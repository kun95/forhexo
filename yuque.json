[
  {
    "id": 1949021,
    "slug": "a20f2c6b-725c-49a3-9b19-ef72b8a9a03b",
    "title": "30个mysql千万级大数据SQL查询优化技巧",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "本文总结了30个mysql千万级大数据SQL查询优化技巧,特别适合大\n\n[![](https://user-gold-cdn.xitu.io/2018/8/8/165188676eae5d5f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&display=inline&height=366&originHeight=366&originWidth=651&status=done&width=651)](https://link.juejin.im/?target=http%3A%2F%2Fs4.51cto.com%2Foss%2F201807%2F30%2F31e83f5bfedbbc6758440150a0337e25.jpeg-wh_651x-s_631009781.jpeg)\n\n数据里的MYSQL使用。\n\n1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：select id from t where num is null可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：select id from t where num=0\n\n3.应尽量避免在 where 子句中使用!=或<>操作符，否则引擎将放弃使用索引而进行全表扫描。\n\n4.应尽量避免在 where 子句中使用or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：select id from t where num=10 or num=20可以这样查询：select id from t where num=10 union all select id from t where num=20\n\n5.in 和 not in 也要慎用，否则会导致全表扫描，如：select id from t where num in(1,2,3) 对于连续的数值，能用 between 就不要用 in 了：select id from t where num between 1 and 3\n\n6.下面的查询也将导致全表扫描：select id from t where name like ‘%李%'若要提高效率，可以考虑全文检索。\n\n7. 如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：select id from t where num=@num可以改为强制查询使用索引：select id from t with(index(索引名)) where num=[@num ]()\n\n8.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where num/2=100应改为:select id from t where num=100*2\n\n9.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where substring(name,1,3)='abc' ，name以abc开头的id应改为:\n\nselect id from t where name like ‘abc%'\n\n10.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n11.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n12.不要写一些没有意义的查询，如需要生成一个空表结构：select col1,col2 into #t from t where 1=0\n\n这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\n\ncreate table #t(…)\n\n13.很多时候用 exists 代替 in 是一个好的选择：select num from a where num in(select num from b)\n\n用下面的语句替换：\n\nselect num from a where exists(select 1 from b where num=a.num)\n\n14.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n15. 索引并不是越多越好，索引固然可 以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。\n\n16. 应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。\n\n17.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n18.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n19.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n20.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。\n\n21.避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n22.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n\n23.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n27. 与临时表一样，游标并不是不可使 用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送DONE_IN_PROC 消息。\n\n29.尽量避免大事务操作，提高系统并发能力。\n\n30.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。\n\n如果你的程序都能满足这30条的话那么你的程序执行效率会有很大的提高\n\n",
    "body_draft": "",
    "body_html": "<p>本文总结了30个mysql千万级大数据SQL查询优化技巧,特别适合大</p><p><br /></p><p><a href=\"https://link.juejin.im/?target=http%3A%2F%2Fs4.51cto.com%2Foss%2F201807%2F30%2F31e83f5bfedbbc6758440150a0337e25.jpeg-wh_651x-s_631009781.jpeg\" target=\"_blank\"><img src=\"https://user-gold-cdn.xitu.io/2018/8/8/165188676eae5d5f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&amp;display=inline&amp;height=366&amp;originHeight=366&amp;originWidth=651&amp;status=done&amp;width=651\" style=\"max-width: 600px; width: 651px;\" /></a></p><p><br /></p><p>数据里的MYSQL使用。</p><p><br /></p><p>1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><p><br /></p><p>2<span style=\"color: #F5222D;\">.应尽量避免在 where 子句中对字段进行 null 值判断</span>，否则将导致引擎放弃使用索引而进行全表扫描，如：select id from t where num is null可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：select id from t where num=0</p><p><br /></p><p>3.<span style=\"color: #F5222D;\">应尽量避免在 where 子句中使用!=或&lt;&gt;操作符</span>，否则引擎将放弃使用索引而进行全表扫描。</p><p><br /></p><p>4.<span style=\"color: #F5222D;\">应尽量避免在 where 子句中使用or 来连接条件</span>，否则将导致引擎放弃使用索引而进行全表扫描，如：select id from t where num=10 or num=20可以这样查询：select id from t where num=10 union all select id from t where num=20</p><p><br /></p><p>5.<span style=\"color: #F5222D;\">in 和 not in 也要慎用</span>，否则会导致全表扫描，如：select id from t where num in(1,2,3) 对于连续的数值，<span style=\"color: #F5222D;\">能用 between 就不要用 in 了：select id from t where num between 1 and 3</span></p><p><br /></p><p><span style=\"color: #F5222D;\">6.下面的查询也将导致全表扫描：select id from t where name like ‘%李%'若要提高效率，可以考虑全文检索。</span></p><p><br /></p><p>7. 如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：select id from t where num=@num可以改为强制查询使用索引：select id from t with(index(索引名)) where num=<a>@num </a></p><p><br /></p><p>8.<span style=\"color: #F5222D;\">应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where num/2=100应改为:select id from t where num=100*2</span></p><p><br /></p><p>9.<span style=\"color: #F5222D;\">应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where substring(name,1,3)='abc' ，name以abc开头的id应改为:</span></p><p><br /></p><p><span style=\"color: #F5222D;\">select id from t where name like ‘abc%'</span></p><p><br /></p><p>10.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p><p><br /></p><p>11<span style=\"color: #F5222D;\">.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</span></p><p><br /></p><p>12.不要写一些没有意义的查询，如需要生成一个空表结构：select col1,col2 into #t from t where 1=0</p><p><br /></p><p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</p><p><br /></p><p>create table #t(…)</p><p><br /></p><p>13.很多时候用 exists 代替 in 是一个好的选择：select num from a where num in(select num from b)</p><p><br /></p><p>用下面的语句替换：</p><p><br /></p><p>select num from a where exists(select 1 from b where num=a.num)</p><p><br /></p><p>14<span style=\"color: #F5222D;\">.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</span></p><p><br /></p><p>15. 索引并不是越多越好，索引固然可 以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p><p><br /></p><p>16. 应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p><p><br /></p><p>17.<span style=\"color: #F5222D;\">尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</span></p><p><br /></p><p>18.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p><br /></p><p>19.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p><p><br /></p><p>20.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p><p><br /></p><p>21.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p><p><br /></p><p>22.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p><p><br /></p><p>23.<span style=\"color: #F5222D;\">在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后inse</span>rt。</p><p><br /></p><p>24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p><p><br /></p><p>25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p><p><br /></p><p>26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p><p><br /></p><p>27. 与临时表一样，游标并不是不可使 用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p><p><br /></p><p>28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送DONE_IN_PROC 消息。</p><p><br /></p><p>29.尽量避免大事务操作，提高系统并发能力。</p><p><br /></p><p>30.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><p><br /></p><p>如果你的程序都能满足这30条的话那么你的程序执行效率会有很大的提高</p><p><br /></p>",
    "body_lake": "<!doctype lake><p>本文总结了30个mysql千万级大数据SQL查询优化技巧,特别适合大</p><p><br /></p><p><a href=\"https://link.juejin.im/?target=http%3A%2F%2Fs4.51cto.com%2Foss%2F201807%2F30%2F31e83f5bfedbbc6758440150a0337e25.jpeg-wh_651x-s_631009781.jpeg\" target=\"_blank\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2018%2F8%2F8%2F165188676eae5d5f%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%22%2C%22originWidth%22%3A651%2C%22originHeight%22%3A366%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A651%2C%22height%22%3A366%7D\"></card></a></p><p><br /></p><p>数据里的MYSQL使用。</p><p><br /></p><p>1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><p><br /></p><p>2<span style=\"color: #F5222D;\">.应尽量避免在 where 子句中对字段进行 null 值判断</span>，否则将导致引擎放弃使用索引而进行全表扫描，如：select id from t where num is null可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：select id from t where num=0</p><p><br /></p><p>3.<span style=\"color: #F5222D;\">应尽量避免在 where 子句中使用!=或&lt;&gt;操作符</span>，否则引擎将放弃使用索引而进行全表扫描。</p><p><br /></p><p>4.<span style=\"color: #F5222D;\">应尽量避免在 where 子句中使用or 来连接条件</span>，否则将导致引擎放弃使用索引而进行全表扫描，如：select id from t where num=10 or num=20可以这样查询：select id from t where num=10 union all select id from t where num=20</p><p><br /></p><p>5.<span style=\"color: #F5222D;\">in 和 not in 也要慎用</span>，否则会导致全表扫描，如：select id from t where num in(1,2,3) 对于连续的数值，<span style=\"color: #F5222D;\">能用 between 就不要用 in 了：select id from t where num between 1 and 3</span></p><p><br /></p><p><span style=\"color: #F5222D;\">6.下面的查询也将导致全表扫描：select id from t where name like ‘%李%'若要提高效率，可以考虑全文检索。</span></p><p><br /></p><p>7. 如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：select id from t where num=@num可以改为强制查询使用索引：select id from t with(index(索引名)) where num=<a>@num </a></p><p><br /></p><p>8.<span style=\"color: #F5222D;\">应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where num/2=100应改为:select id from t where num=100*2</span></p><p><br /></p><p>9.<span style=\"color: #F5222D;\">应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where substring(name,1,3)='abc' ，name以abc开头的id应改为:</span></p><p><br /></p><p><span style=\"color: #F5222D;\">select id from t where name like ‘abc%'</span></p><p><br /></p><p>10.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p><p><br /></p><p>11<span style=\"color: #F5222D;\">.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</span></p><p><br /></p><p>12.不要写一些没有意义的查询，如需要生成一个空表结构：select col1,col2 into #t from t where 1=0</p><p><br /></p><p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</p><p><br /></p><p>create table #t(…)</p><p><br /></p><p>13.很多时候用 exists 代替 in 是一个好的选择：select num from a where num in(select num from b)</p><p><br /></p><p>用下面的语句替换：</p><p><br /></p><p>select num from a where exists(select 1 from b where num=a.num)</p><p><br /></p><p>14<span style=\"color: #F5222D;\">.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</span></p><p><br /></p><p>15. 索引并不是越多越好，索引固然可 以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p><p><br /></p><p>16. 应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p><p><br /></p><p>17.<span style=\"color: #F5222D;\">尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</span></p><p><br /></p><p>18.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p><br /></p><p>19.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p><p><br /></p><p>20.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p><p><br /></p><p>21.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p><p><br /></p><p>22.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p><p><br /></p><p>23.<span style=\"color: #F5222D;\">在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后inse</span>rt。</p><p><br /></p><p>24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p><p><br /></p><p>25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p><p><br /></p><p>26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p><p><br /></p><p>27. 与临时表一样，游标并不是不可使 用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p><p><br /></p><p>28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送DONE_IN_PROC 消息。</p><p><br /></p><p>29.尽量避免大事务操作，提高系统并发能力。</p><p><br /></p><p>30.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><p><br /></p><p>如果你的程序都能满足这30条的话那么你的程序执行效率会有很大的提高</p><p><br /><cursor /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-06-20T15:12:37.000Z",
    "deleted_at": null,
    "created_at": "2019-06-20T15:02:07.000Z",
    "updated_at": "2019-06-20T15:12:38.000Z",
    "published_at": "2019-06-20T15:12:37.000Z",
    "first_published_at": null,
    "word_count": 1983,
    "cover": null,
    "description": "本文总结了30个mysql千万级大数据SQL查询优化技巧,特别适合大数据里的MYSQL使用。1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1729058,
    "slug": "b329289a-9bcd-440d-84cd-ec6f4a88d777",
    "title": "MySQL 性能优化神器 Explain 使用分析",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "[]()\n<a name=\"e05dce83\"></a>\n## 简介\n\nMySQL 提供了一个 EXPLAIN 命令, 它可以对 `SELECT` 语句进行分析, 并输出 `SELECT` 执行的详细信息, 以供开发人员针对性优化.<br />\nEXPLAIN 命令用法十分简单, 在 SELECT 语句前加上 Explain 就可以了, 例如:\n\n```\nEXPLAIN SELECT * from user_info WHERE  id < 300;\n```\n\n[]()\n<a name=\"424a2ad8\"></a>\n## 准备\n\n为了接下来方便演示 EXPLAIN 的使用, 首先我们需要建立两个测试用的表, 并添加相应的数据:\n\n```\nCREATE TABLE `user_info` (\n  `id`   BIGINT(20)  NOT NULL AUTO_INCREMENT,\n  `name` VARCHAR(50) NOT NULL DEFAULT '',\n  `age`  INT(11)              DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `name_index` (`name`)\n)\n  ENGINE = InnoDB\n  DEFAULT CHARSET = utf8\n\nINSERT INTO user_info (name, age) VALUES ('xys', 20);\nINSERT INTO user_info (name, age) VALUES ('a', 21);\nINSERT INTO user_info (name, age) VALUES ('b', 23);\nINSERT INTO user_info (name, age) VALUES ('c', 50);\nINSERT INTO user_info (name, age) VALUES ('d', 15);\nINSERT INTO user_info (name, age) VALUES ('e', 20);\nINSERT INTO user_info (name, age) VALUES ('f', 21);\nINSERT INTO user_info (name, age) VALUES ('g', 23);\nINSERT INTO user_info (name, age) VALUES ('h', 50);\nINSERT INTO user_info (name, age) VALUES ('i', 15);\n\nCREATE TABLE `order_info` (\n  `id`           BIGINT(20)  NOT NULL AUTO_INCREMENT,\n  `user_id`      BIGINT(20)           DEFAULT NULL,\n  `product_name` VARCHAR(50) NOT NULL DEFAULT '',\n  `productor`    VARCHAR(30)          DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)\n)\n  ENGINE = InnoDB\n  DEFAULT CHARSET = utf8\n\nINSERT INTO order_info (user_id, product_name, productor) VALUES (1, 'p1', 'WHH');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (1, 'p2', 'WL');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (1, 'p1', 'DX');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (2, 'p1', 'WHH');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (2, 'p5', 'WL');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (3, 'p3', 'MA');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (4, 'p1', 'WHH');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (6, 'p1', 'WHH');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (9, 'p8', 'TE');\n```\n\n[]()\n<a name=\"156d011a\"></a>\n## EXPLAIN 输出格式\n\nEXPLAIN 命令的输出内容大致如下:\n\n```\nmysql> explain select * from user_info where id = 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user_info\n   partitions: NULL\n         type: const\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 8\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n```\n\n各列的含义如下:\n\n- id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.\n- select_type: SELECT 查询的类型.\n- table: 查询的是哪个表\n- partitions: 匹配的分区\n- type: join 类型\n- possible_keys: 此次查询中可能选用的索引\n- key: 此次查询中确切使用到的索引.\n- ref: 哪个字段或常数与 key 一起被使用\n- rows: 显示此查询一共扫描了多少行. 这个是一个估计值.\n- filtered: 表示此查询条件所过滤的数据的百分比\n- extra: 额外的信息\n\n接下来我们来重点看一下比较重要的几个字段.\n\n<a name=\"select_type\"></a>\n### select_type\n\n`select_type` 表示了查询的类型, 它的常用取值有:\n\n- SIMPLE, 表示此查询不包含 UNION 查询或子查询\n- PRIMARY, 表示此查询是最外层的查询\n- UNION, 表示此查询是 UNION 的第二或随后的查询\n- DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询\n- UNION RESULT, UNION 的结果\n- SUBQUERY, 子查询中的第一个 SELECT\n- DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.\n\n最常见的查询类别应该是 `SIMPLE` 了, 比如当我们的查询没有子查询, 也没有 UNION 查询时, 那么通常就是 `SIMPLE` 类型, 例如:\n\n```\nmysql> explain select * from user_info where id = 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user_info\n   partitions: NULL\n         type: const\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 8\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n```\n\n如果我们使用了 UNION 查询, 那么 EXPLAIN 输出 的结果类似如下:\n\n```\nmysql> EXPLAIN (SELECT * FROM user_info  WHERE id IN (1, 2, 3))\n    -> UNION\n    -> (SELECT * FROM user_info WHERE id IN (3, 4, 5));\n+\n| id | select_type  | table      | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra           |\n+\n|  1 | PRIMARY      | user_info  | NULL       | range | PRIMARY       | PRIMARY | 8       | NULL |    3 |   100.00 | Using where     |\n|  2 | UNION        | user_info  | NULL       | range | PRIMARY       | PRIMARY | 8       | NULL |    3 |   100.00 | Using where     |\n| NULL | UNION RESULT | <union1,2> | NULL       | ALL   | NULL          | NULL    | NULL    | NULL | NULL |     NULL | Using temporary |\n+\n3 rows in set, 1 warning (0.00 sec)\n```\n\n<a name=\"table\"></a>\n### table\n\n表示查询涉及的表或衍生表\n\n<a name=\"type\"></a>\n### type\n`type` 字段比较重要, 它提供了判断查询是否高效的重要依据依据. 通过 `type` 字段, 我们判断此次查询是 `全表扫描` 还是 `索引扫描` 等.<br />[]()\n<a name=\"63641849\"></a>\n#### type 常用类型\ntype 常用的取值有:\n\n- `system`: 表中只有一条数据. 这个类型是特殊的 `const` 类型.\n- `const`: 针对主键或唯一索引的等值查询扫描, 最多只返回一行数据. const 查询速度非常快, 因为它仅仅读取一次即可.<br />\n例如下面的这个查询, 它使用了主键索引, 因此 `type` 就是 `const` 类型的.\n<br />mysql> explain select * from user_info where id = 2\\G<br />\n**_ 1. row _**<br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: const<br />\npossible_keys: PRIMARY<br />\nkey: PRIMARY<br />\nkey_len: 8<br />\nref: const<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: NULL<br />\n1 row in set, 1 warning (0.00 sec)\n- `eq_ref`: 此类型通常出现在多表的 join 查询, 表示对于前表的每一个结果, 都只能匹配到后表的一行结果. 并且查询的比较操作通常是 `=`, 查询效率较高. 例如:\n<br />mysql> EXPLAIN SELECT * FROM user_info, order_info WHERE user_info.id = order_info.user_id\\G<br />\n**_ 1. row _**<br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: order_info<br />\npartitions: NULL<br />\ntype: index<br />\npossible_keys: user_product_detail_index<br />\nkey: user_product_detail_index<br />\nkey_len: 314<br />\nref: NULL<br />\nrows: 9<br />\nfiltered: 100.00<br />\nExtra: Using where; Using index<br />\n**_ 2. row _**<br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: eq_ref<br />\npossible_keys: PRIMARY<br />\nkey: PRIMARY<br />\nkey_len: 8<br />\nref: test.order_info.user_id<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: NULL<br />\n2 rows in set, 1 warning (0.00 sec)\n- `ref`: 此类型通常出现在多表的 join 查询, 针对于非唯一或非主键索引, 或者是使用了 `最左前缀` 规则索引的查询.<br />\n例如下面这个例子中, 就使用到了 `ref` 类型的查询:\n<br />mysql> EXPLAIN SELECT * FROM user_info, order_info WHERE user_info.id = order_info.user_id AND order_info.user_id = 5\\G<br />\n**_ 1. row _**<br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: const<br />\npossible_keys: PRIMARY<br />\nkey: PRIMARY<br />\nkey_len: 8<br />\nref: const<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: NULL<br />\n**_ 2. row _**<br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: order_info<br />\npartitions: NULL<br />\ntype: ref<br />\npossible_keys: user_product_detail_index<br />\nkey: user_product_detail_index<br />\nkey_len: 9<br />\nref: const<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: Using index<br />\n2 rows in set, 1 warning (0.01 sec)\n- `range`: 表示使用索引范围查询, 通过索引字段范围获取表中部分数据记录. 这个类型通常出现在 =, <>, >, >=, <, <=, IS NULL, <=>, BETWEEN, IN() 操作中.<br />\n当 `type` 是 `range` 时, 那么 EXPLAIN 输出的 `ref` 字段为 NULL, 并且 `key_len` 字段是此次查询中使用到的索引的最长的那个.\n\n例如下面的例子就是一个范围查询:\n\n```\nmysql> EXPLAIN SELECT *\n    ->         FROM user_info\n    ->         WHERE id BETWEEN 2 AND 8 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user_info\n   partitions: NULL\n         type: range\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 8\n          ref: NULL\n         rows: 7\n     filtered: 100.00\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n```\n\n- `index`: 表示全索引扫描(full index scan), 和 ALL 类型类似, 只不过 ALL 类型是全表扫描, 而 index 类型则仅仅扫描所有的索引, 而不扫描数据.<br />\n`index` 类型通常出现在: 所要查询的数据直接在索引树中就可以获取到, 而不需要扫描数据. 当是这种情况时, Extra 字段 会显示 `Using index`.\n\n例如:\n\n```\nmysql> EXPLAIN SELECT name FROM  user_info \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user_info\n   partitions: NULL\n         type: index\npossible_keys: NULL\n          key: name_index\n      key_len: 152\n          ref: NULL\n         rows: 10\n     filtered: 100.00\n        Extra: Using index\n1 row in set, 1 warning (0.00 sec)\n```\n\n上面的例子中, 我们查询的 name 字段恰好是一个索引, 因此我们直接从索引中获取数据就可以满足查询的需求了, 而不需要查询表中的数据. 因此这样的情况下, type 的值是 `index`, 并且 Extra 的值是 `Using index`.\n\n- ALL: 表示全表扫描, 这个类型的查询是性能最差的查询之一. 通常来说, 我们的查询不应该出现 ALL 类型的查询, 因为这样的查询在数据量大的情况下, 对数据库的性能是巨大的灾难. 如一个查询是 ALL 类型查询, 那么一般来说可以对相应的字段添加索引来避免.<br />\n下面是一个全表扫描的例子, 可以看到, 在全表扫描时, possible_keys 和 key 字段都是 NULL, 表示没有使用到索引, 并且 rows 十分巨大, 因此整个查询效率是十分低下的.\n<br />mysql> EXPLAIN SELECT age FROM  user_info WHERE age = 20 \\G<br />\n**_ 1. row _**<br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: ALL<br />\npossible_keys: NULL<br />\nkey: NULL<br />\nkey_len: NULL<br />\nref: NULL<br />\nrows: 10<br />\nfiltered: 10.00<br />\nExtra: Using where<br />\n1 row in set, 1 warning (0.00 sec)\n\n[]()\n<a name=\"1c3ee6de\"></a>\n#### type 类型的性能比较\n\n通常来说, 不同的 type 类型的性能关系如下:<br />\n`ALL < index < range ~ index_merge < ref < eq_ref < const < system`<br />\n`ALL` 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的.<br />\n而 `index` 类型的查询虽然不是全表扫描, 但是它扫描了所有的索引, 因此比 ALL 类型的稍快.<br />\n后面的几种类型都是利用了索引来查询数据, 因此可以过滤部分或大部分数据, 因此查询效率就比较高了.\n\n<a name=\"possible_keys\"></a>\n### possible_keys\n\n`possible_keys` 表示 MySQL 在查询时, 能够使用到的索引. 注意, 即使有些索引在 `possible_keys` 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 `key` 字段决定.\n\n<a name=\"key\"></a>\n### key\n\n此字段是 MySQL 在当前查询时所真正使用到的索引.\n\n<a name=\"key_len\"></a>\n### key_len\n\n表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到.<br />\nkey_len 的计算规则如下:\n\n- 字符串\n  - char(n): n 字节长度\n  - varchar(n): 如果是 utf8 编码, 则是 3 _n + 2字节; 如果是 utf8mb4 编码, 则是 4_ n + 2 字节.\n- 数值类型:\n  - TINYINT: 1字节\n  - SMALLINT: 2字节\n  - MEDIUMINT: 3字节\n  - INT: 4字节\n  - BIGINT: 8字节\n- 时间类型\n  - DATE: 3字节\n  - TIMESTAMP: 4字节\n  - DATETIME: 8字节\n- 字段属性: NULL 属性 占用一个字节. 如果一个字段是 NOT NULL 的, 则没有此属性.\n\n我们来举两个简单的栗子:\n\n```\nmysql> EXPLAIN SELECT * FROM order_info WHERE user_id < 3 AND product_name = 'p1' AND productor = 'WHH' \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: order_info\n   partitions: NULL\n         type: range\npossible_keys: user_product_detail_index\n          key: user_product_detail_index\n      key_len: 9\n          ref: NULL\n         rows: 5\n     filtered: 11.11\n        Extra: Using where; Using index\n1 row in set, 1 warning (0.00 sec)\n```\n\n上面的例子是从表 order_info 中查询指定的内容, 而我们从此表的建表语句中可以知道, 表 `order_info` 有一个联合索引:\n\n```\nKEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)\n```\n\n不过此查询语句 `WHERE user_id < 3 AND product_name = 'p1' AND productor = 'WHH'` 中, 因为先进行 user_id 的范围查询, 而根据 `最左前缀匹配` 原则, 当遇到范围查询时, 就停止索引的匹配, 因此实际上我们使用到的索引的字段只有 `user_id`, 因此在 `EXPLAIN` 中, 显示的 key_len 为 9. 因为 user_id 字段是 BIGINT, 占用 8 字节, 而 NULL 属性占用一个字节, 因此总共是 9 个字节. 若我们将user_id 字段改为 `BIGINT(20) NOT NULL DEFAULT '0'`, 则 key_length 应该是8.\n\n上面因为 `最左前缀匹配` 原则, 我们的查询仅仅使用到了联合索引的 `user_id` 字段, 因此效率不算高.\n\n接下来我们来看一下下一个例子:\n\n```\nmysql> EXPLAIN SELECT * FROM order_info WHERE user_id = 1 AND product_name = 'p1' \\G;\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: order_info\n   partitions: NULL\n         type: ref\npossible_keys: user_product_detail_index\n          key: user_product_detail_index\n      key_len: 161\n          ref: const,const\n         rows: 2\n     filtered: 100.00\n        Extra: Using index\n1 row in set, 1 warning (0.00 sec)\n```\n\n这次的查询中, 我们没有使用到范围查询, key_len 的值为 161. 为什么呢? 因为我们的查询条件 `WHERE user_id = 1 AND product_name = 'p1'` 中, 仅仅使用到了联合索引中的前两个字段, 因此 `keyLen(user_id) + keyLen(product_name) = 9 + 50 * 3 + 2 = 161`\n\n<a name=\"rows\"></a>\n### rows\n\nrows 也是一个重要的字段. MySQL 查询优化器根据统计信息, 估算 SQL 要查找到结果集需要扫描读取的数据行数.<br />\n这个值非常直观显示 SQL 的效率好坏, 原则上 rows 越少越好.\n\n<a name=\"Extra\"></a>\n### Extra\n\nEXplain 中的很多额外的信息会在 Extra 字段显示, 常见的有以下几种内容:\n\n- Using filesort<br />\n当 Extra 中有 `Using filesort` 时, 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 `Using filesort`, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大.\n\n例如下面的例子:\n\n```\nmysql> EXPLAIN SELECT * FROM order_info ORDER BY product_name \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: order_info\n   partitions: NULL\n         type: index\npossible_keys: NULL\n          key: user_product_detail_index\n      key_len: 253\n          ref: NULL\n         rows: 9\n     filtered: 100.00\n        Extra: Using index; Using filesort\n1 row in set, 1 warning (0.00 sec)\n```\n\n我们的索引是\n\n```\nKEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)\n```\n\n但是上面的查询中根据 `product_name` 来排序, 因此不能使用索引进行优化, 进而会产生 `Using filesort`.<br />\n如果我们将排序依据改为 `ORDER BY user_id, product_name`, 那么就不会出现 `Using filesort` 了. 例如:\n\n```\nmysql> EXPLAIN SELECT * FROM order_info ORDER BY user_id, product_name \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: order_info\n   partitions: NULL\n         type: index\npossible_keys: NULL\n          key: user_product_detail_index\n      key_len: 253\n          ref: NULL\n         rows: 9\n     filtered: 100.00\n        Extra: Using index\n1 row in set, 1 warning (0.00 sec)\n```\n\n- Using index<br />\n\"覆盖索引扫描\", 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错\n- Using temporary<br />\n查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化.\n",
    "body_draft": "",
    "body_html": "<p><a name=\"简介\"></a></p><h2 id=\"e05dce83\">简介</h2><p><br /></p><p>MySQL 提供了一个 EXPLAIN 命令, 它可以对 <code>SELECT</code> 语句进行分析, 并输出 <code>SELECT</code> 执行的详细信息, 以供开发人员针对性优化.<br />\nEXPLAIN 命令用法十分简单, 在 SELECT 语句前加上 Explain 就可以了, 例如:</p><p><br /></p><pre><code>EXPLAIN SELECT * from user_info WHERE  id &lt; 300;</code></pre><p><br /></p><p><a name=\"准备\"></a></p><h2 id=\"424a2ad8\">准备</h2><p><br /></p><p>为了接下来方便演示 EXPLAIN 的使用, 首先我们需要建立两个测试用的表, 并添加相应的数据:</p><p><br /></p><pre><code>CREATE TABLE `user_info` (\n  `id`   BIGINT(20)  NOT NULL AUTO_INCREMENT,\n  `name` VARCHAR(50) NOT NULL DEFAULT '',\n  `age`  INT(11)              DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `name_index` (`name`)\n)\n  ENGINE = InnoDB\n  DEFAULT CHARSET = utf8\n\nINSERT INTO user_info (name, age) VALUES ('xys', 20);\nINSERT INTO user_info (name, age) VALUES ('a', 21);\nINSERT INTO user_info (name, age) VALUES ('b', 23);\nINSERT INTO user_info (name, age) VALUES ('c', 50);\nINSERT INTO user_info (name, age) VALUES ('d', 15);\nINSERT INTO user_info (name, age) VALUES ('e', 20);\nINSERT INTO user_info (name, age) VALUES ('f', 21);\nINSERT INTO user_info (name, age) VALUES ('g', 23);\nINSERT INTO user_info (name, age) VALUES ('h', 50);\nINSERT INTO user_info (name, age) VALUES ('i', 15);\n\nCREATE TABLE `order_info` (\n  `id`           BIGINT(20)  NOT NULL AUTO_INCREMENT,\n  `user_id`      BIGINT(20)           DEFAULT NULL,\n  `product_name` VARCHAR(50) NOT NULL DEFAULT '',\n  `productor`    VARCHAR(30)          DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)\n)\n  ENGINE = InnoDB\n  DEFAULT CHARSET = utf8\n\nINSERT INTO order_info (user_id, product_name, productor) VALUES (1, 'p1', 'WHH');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (1, 'p2', 'WL');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (1, 'p1', 'DX');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (2, 'p1', 'WHH');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (2, 'p5', 'WL');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (3, 'p3', 'MA');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (4, 'p1', 'WHH');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (6, 'p1', 'WHH');\nINSERT INTO order_info (user_id, product_name, productor) VALUES (9, 'p8', 'TE');</code></pre><p><br /></p><p><a name=\"EXPLAIN-输出格式\"></a></p><h2 id=\"156d011a\">EXPLAIN 输出格式</h2><p><br /></p><p>EXPLAIN 命令的输出内容大致如下:</p><p><br /></p><pre><code>mysql&gt; explain select * from user_info where id = 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user_info\n   partitions: NULL\n         type: const\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 8\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)</code></pre><p><br /></p><p>各列的含义如下:</p><p><br /></p><ul><li>id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.</li></ul><ul><li>select_type: SELECT 查询的类型.</li></ul><ul><li>table: 查询的是哪个表</li></ul><ul><li>partitions: 匹配的分区</li></ul><ul><li>type: join 类型</li></ul><ul><li>possible_keys: 此次查询中可能选用的索引</li></ul><ul><li>key: 此次查询中确切使用到的索引.</li></ul><ul><li>ref: 哪个字段或常数与 key 一起被使用</li></ul><ul><li>rows: 显示此查询一共扫描了多少行. 这个是一个估计值.</li></ul><ul><li>filtered: 表示此查询条件所过滤的数据的百分比</li></ul><ul><li>extra: 额外的信息</li></ul><p><br /></p><p>接下来我们来重点看一下比较重要的几个字段.</p><p><br /></p><h3 id=\"select_type\">select_type</h3><p><br /></p><p><code>select_type</code> 表示了查询的类型, 它的常用取值有:</p><p><br /></p><ul><li><span style=\"color: #389E0D;\">SIMPLE, 表示此查询不包含 UNION 查询或子查询</span></li></ul><ul><li>PRIMARY, 表示此查询是最外层的查询</li></ul><ul><li>UNION, 表示此查询是 UNION 的第二或随后的查询</li></ul><ul><li>DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询</li></ul><ul><li>UNION RESULT, UNION 的结果</li></ul><ul><li>SUBQUERY, 子查询中的第一个 SELECT</li></ul><ul><li>DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.</li></ul><p><br /></p><p>最常见的查询类别应该是 <code>SIMPLE</code> 了, 比如当我们的查询没有子查询, 也没有 UNION 查询时, 那么通常就是 <code>SIMPLE</code> 类型, 例如:</p><p><br /></p><pre><code>mysql&gt; explain select * from user_info where id = 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user_info\n   partitions: NULL\n         type: const\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 8\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)</code></pre><p><br /></p><p>如果我们使用了 UNION 查询, 那么 EXPLAIN 输出 的结果类似如下:</p><p><br /></p><pre><code>mysql&gt; EXPLAIN (SELECT * FROM user_info  WHERE id IN (1, 2, 3))\n    -&gt; UNION\n    -&gt; (SELECT * FROM user_info WHERE id IN (3, 4, 5));\n+\n| id | select_type  | table      | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra           |\n+\n|  1 | PRIMARY      | user_info  | NULL       | range | PRIMARY       | PRIMARY | 8       | NULL |    3 |   100.00 | Using where     |\n|  2 | UNION        | user_info  | NULL       | range | PRIMARY       | PRIMARY | 8       | NULL |    3 |   100.00 | Using where     |\n| NULL | UNION RESULT | &lt;union1,2&gt; | NULL       | ALL   | NULL          | NULL    | NULL    | NULL | NULL |     NULL | Using temporary |\n+\n3 rows in set, 1 warning (0.00 sec)</code></pre><p><br /></p><h3 id=\"table\">table</h3><p><br /></p><p>表示查询涉及的表或衍生表</p><p><br /></p><h3 id=\"type\">type</h3><p><code>type</code> 字段比较重要, 它提供了判断查询是否高效的重要依据依据. 通过 <code>type</code> 字段, 我们判断此次查询是 <code>全表扫描</code> 还是 <code>索引扫描</code> 等.</p><p><a name=\"type-常用类型\"></a></p><h4 id=\"63641849\">type 常用类型</h4><p>type 常用的取值有:</p><ul><li><code>system</code>: 表中只有一条数据. 这个类型是特殊的 <code>const</code> 类型.</li></ul><ul><li><code>const</code>: 针对主键或唯一索引的等值查询扫描, 最多只返回一行数据. const 查询速度非常快, 因为它仅仅读取一次即可.<br />\n例如下面的这个查询, 它使用了主键索引, 因此 <code>type</code> 就是 <code>const</code> 类型的.\n<br />mysql&gt; explain select * from user_info where id = 2\\G<br />\n<strong><em> 1. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: const<br />\npossible_keys: PRIMARY<br />\nkey: PRIMARY<br />\nkey_len: 8<br />\nref: const<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: NULL<br />\n1 row in set, 1 warning (0.00 sec)</li></ul><ul><li><code>eq_ref</code>: 此类型通常出现在多表的 join 查询, 表示对于前表的每一个结果, 都只能匹配到后表的一行结果. 并且查询的比较操作通常是 <code>=</code>, 查询效率较高. 例如:\n<br />mysql&gt; EXPLAIN SELECT * FROM user_info, order_info WHERE user_info.id = order_info.user_id\\G<br />\n<strong><em> 1. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: order_info<br />\npartitions: NULL<br />\ntype: index<br />\npossible_keys: user_product_detail_index<br />\nkey: user_product_detail_index<br />\nkey_len: 314<br />\nref: NULL<br />\nrows: 9<br />\nfiltered: 100.00<br />\nExtra: Using where; Using index<br />\n<strong><em> 2. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: eq_ref<br />\npossible_keys: PRIMARY<br />\nkey: PRIMARY<br />\nkey_len: 8<br />\nref: test.order_info.user_id<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: NULL<br />\n2 rows in set, 1 warning (0.00 sec)</li></ul><ul><li><code>ref</code>: 此类型通常出现在多表的 join 查询, 针对于非唯一或非主键索引, 或者是使用了 <code>最左前缀</code> 规则索引的查询.<br />\n例如下面这个例子中, 就使用到了 <code>ref</code> 类型的查询:\n<br />mysql&gt; EXPLAIN SELECT * FROM user_info, order_info WHERE user_info.id = order_info.user_id AND order_info.user_id = 5\\G<br />\n<strong><em> 1. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: const<br />\npossible_keys: PRIMARY<br />\nkey: PRIMARY<br />\nkey_len: 8<br />\nref: const<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: NULL<br />\n<strong><em> 2. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: order_info<br />\npartitions: NULL<br />\ntype: ref<br />\npossible_keys: user_product_detail_index<br />\nkey: user_product_detail_index<br />\nkey_len: 9<br />\nref: const<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: Using index<br />\n2 rows in set, 1 warning (0.01 sec)</li></ul><ul><li><code>range</code>: 表示使用索引范围查询, 通过索引字段范围获取表中部分数据记录. 这个类型通常出现在 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN() 操作中.<br />\n当 <code>type</code> 是 <code>range</code> 时, 那么 EXPLAIN 输出的 <code>ref</code> 字段为 NULL, 并且 <code>key_len</code> 字段是此次查询中使用到的索引的最长的那个.</li></ul><p><br /></p><p>例如下面的例子就是一个范围查询:</p><p><br /></p><pre><code>mysql&gt; EXPLAIN SELECT *\n    -&gt;         FROM user_info\n    -&gt;         WHERE id BETWEEN 2 AND 8 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user_info\n   partitions: NULL\n         type: range\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 8\n          ref: NULL\n         rows: 7\n     filtered: 100.00\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)</code></pre><p><br /></p><ul><li><code>index</code>: 表示全索引扫描(full index scan), 和 ALL 类型类似, 只不过 ALL 类型是全表扫描, 而 index 类型则仅仅扫描所有的索引, 而不扫描数据.<br />\n<code>index</code> 类型通常出现在: 所要查询的数据直接在索引树中就可以获取到, 而不需要扫描数据. 当是这种情况时, Extra 字段 会显示 <code>Using index</code>.</li></ul><p><br /></p><p>例如:</p><p><br /></p><pre><code>mysql&gt; EXPLAIN SELECT name FROM  user_info \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user_info\n   partitions: NULL\n         type: index\npossible_keys: NULL\n          key: name_index\n      key_len: 152\n          ref: NULL\n         rows: 10\n     filtered: 100.00\n        Extra: Using index\n1 row in set, 1 warning (0.00 sec)</code></pre><p><br /></p><p>上面的例子中, 我们查询的 name 字段恰好是一个索引, 因此我们直接从索引中获取数据就可以满足查询的需求了, 而不需要查询表中的数据. 因此这样的情况下, type 的值是 <code>index</code>, 并且 Extra 的值是 <code>Using index</code>.</p><p><br /></p><ul><li>ALL: 表示全表扫描, 这个类型的查询是性能最差的查询之一. 通常来说, 我们的查询不应该出现 ALL 类型的查询, 因为这样的查询在数据量大的情况下, 对数据库的性能是巨大的灾难. 如一个查询是 ALL 类型查询, 那么一般来说可以对相应的字段添加索引来避免.<br />\n下面是一个全表扫描的例子, 可以看到, 在全表扫描时, possible_keys 和 key 字段都是 NULL, 表示没有使用到索引, 并且 rows 十分巨大, 因此整个查询效率是十分低下的.\n<br />mysql&gt; EXPLAIN SELECT age FROM  user_info WHERE age = 20 \\G<br />\n<strong><em> 1. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: ALL<br />\npossible_keys: NULL<br />\nkey: NULL<br />\nkey_len: NULL<br />\nref: NULL<br />\nrows: 10<br />\nfiltered: 10.00<br />\nExtra: Using where<br />\n1 row in set, 1 warning (0.00 sec)</li></ul><p><br /></p><p><a name=\"type-类型的性能比较\"></a></p><h4 id=\"1c3ee6de\">type 类型的性能比较</h4><p><br /></p><p>通常来说, 不同的 type 类型的性能关系如下:<br />\n<code>ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system</code><br />\n<code>ALL</code> 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的.<br />\n而 <code>index</code> 类型的查询虽然不是全表扫描, 但是它扫描了所有的索引, 因此比 ALL 类型的稍快.<br />\n后面的几种类型都是利用了索引来查询数据, 因此可以过滤部分或大部分数据, 因此查询效率就比较高了.</p><p><br /></p><h3 id=\"possible_keys\">possible_keys</h3><p><br /></p><p><code>possible_keys</code> 表示 MySQL 在查询时, 能够使用到的索引. 注意, 即使有些索引在 <code>possible_keys</code> 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 <code>key</code> 字段决定.</p><p><br /></p><h3 id=\"key\">key</h3><p><br /></p><p>此字段是 MySQL 在当前查询时所真正使用到的索引.</p><p><br /></p><h3 id=\"key_len\">key_len</h3><p><br /></p><p>表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到.<br />\nkey_len 的计算规则如下:</p><p><br /></p><ul><li>字符串</li></ul><ul data-lake-indent=\"1\"><li>char(n): n 字节长度</li></ul><ul data-lake-indent=\"1\"><li>varchar(n): 如果是 utf8 编码, 则是 3 <em>n + 2字节; 如果是 utf8mb4 编码, 则是 4</em> n + 2 字节.</li></ul><ul><li>数值类型:</li></ul><ul data-lake-indent=\"1\"><li>TINYINT: 1字节</li></ul><ul data-lake-indent=\"1\"><li>SMALLINT: 2字节</li></ul><ul data-lake-indent=\"1\"><li>MEDIUMINT: 3字节</li></ul><ul data-lake-indent=\"1\"><li>INT: 4字节</li></ul><ul data-lake-indent=\"1\"><li>BIGINT: 8字节</li></ul><ul><li>时间类型</li></ul><ul data-lake-indent=\"1\"><li>DATE: 3字节</li></ul><ul data-lake-indent=\"1\"><li>TIMESTAMP: 4字节</li></ul><ul data-lake-indent=\"1\"><li>DATETIME: 8字节</li></ul><ul><li>字段属性: NULL 属性 占用一个字节. 如果一个字段是 NOT NULL 的, 则没有此属性.</li></ul><p><br /></p><p>我们来举两个简单的栗子:</p><p><br /></p><pre><code>mysql&gt; EXPLAIN SELECT * FROM order_info WHERE user_id &lt; 3 AND product_name = 'p1' AND productor = 'WHH' \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: order_info\n   partitions: NULL\n         type: range\npossible_keys: user_product_detail_index\n          key: user_product_detail_index\n      key_len: 9\n          ref: NULL\n         rows: 5\n     filtered: 11.11\n        Extra: Using where; Using index\n1 row in set, 1 warning (0.00 sec)</code></pre><p><br /></p><p>上面的例子是从表 order_info 中查询指定的内容, 而我们从此表的建表语句中可以知道, 表 <code>order_info</code> 有一个联合索引:</p><p><br /></p><pre><code>KEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)</code></pre><p><br /></p><p>不过此查询语句 <code>WHERE user_id &lt; 3 AND product_name = 'p1' AND productor = 'WHH'</code> 中, 因为先进行 user_id 的范围查询, 而根据 <code>最左前缀匹配</code> 原则, 当遇到范围查询时, 就停止索引的匹配, 因此实际上我们使用到的索引的字段只有 <code>user_id</code>, 因此在 <code>EXPLAIN</code> 中, 显示的 key_len 为 9. 因为 user_id 字段是 BIGINT, 占用 8 字节, 而 NULL 属性占用一个字节, 因此总共是 9 个字节. 若我们将user_id 字段改为 <code>BIGINT(20) NOT NULL DEFAULT '0'</code>, 则 key_length 应该是8.</p><p><br /></p><p>上面因为 <code>最左前缀匹配</code> 原则, 我们的查询仅仅使用到了联合索引的 <code>user_id</code> 字段, 因此效率不算高.</p><p><br /></p><p>接下来我们来看一下下一个例子:</p><p><br /></p><pre><code>mysql&gt; EXPLAIN SELECT * FROM order_info WHERE user_id = 1 AND product_name = 'p1' \\G;\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: order_info\n   partitions: NULL\n         type: ref\npossible_keys: user_product_detail_index\n          key: user_product_detail_index\n      key_len: 161\n          ref: const,const\n         rows: 2\n     filtered: 100.00\n        Extra: Using index\n1 row in set, 1 warning (0.00 sec)</code></pre><p><br /></p><p>这次的查询中, 我们没有使用到范围查询, key_len 的值为 161. 为什么呢? 因为我们的查询条件 <code>WHERE user_id = 1 AND product_name = 'p1'</code> 中, 仅仅使用到了联合索引中的前两个字段, 因此 <code>keyLen(user_id) + keyLen(product_name) = 9 + 50 * 3 + 2 = 161</code></p><p><br /></p><h3 id=\"rows\">rows</h3><p><br /></p><p>rows 也是一个重要的字段. MySQL 查询优化器根据统计信息, 估算 SQL 要查找到结果集需要扫描读取的数据行数.<br />\n这个值非常直观显示 SQL 的效率好坏, 原则上 rows 越少越好.</p><p><br /></p><h3 id=\"Extra\">Extra</h3><p><br /></p><p>EXplain 中的很多额外的信息会在 Extra 字段显示, 常见的有以下几种内容:</p><p><br /></p><ul><li>Using filesort<br />\n当 Extra 中有 <code>Using filesort</code> 时, 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 <code>Using filesort</code>, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大.</li></ul><p><br /></p><p>例如下面的例子:</p><p><br /></p><pre><code>mysql&gt; EXPLAIN SELECT * FROM order_info ORDER BY product_name \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: order_info\n   partitions: NULL\n         type: index\npossible_keys: NULL\n          key: user_product_detail_index\n      key_len: 253\n          ref: NULL\n         rows: 9\n     filtered: 100.00\n        Extra: Using index; Using filesort\n1 row in set, 1 warning (0.00 sec)</code></pre><p><br /></p><p>我们的索引是</p><p><br /></p><pre><code>KEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)</code></pre><p><br /></p><p>但是上面的查询中根据 <code>product_name</code> 来排序, 因此不能使用索引进行优化, 进而会产生 <code>Using filesort</code>.<br />\n如果我们将排序依据改为 <code>ORDER BY user_id, product_name</code>, 那么就不会出现 <code>Using filesort</code> 了. 例如:</p><p><br /></p><pre><code>mysql&gt; EXPLAIN SELECT * FROM order_info ORDER BY user_id, product_name \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: order_info\n   partitions: NULL\n         type: index\npossible_keys: NULL\n          key: user_product_detail_index\n      key_len: 253\n          ref: NULL\n         rows: 9\n     filtered: 100.00\n        Extra: Using index\n1 row in set, 1 warning (0.00 sec)</code></pre><p><br /></p><ul><li>Using index<br />\n&quot;覆盖索引扫描&quot;, 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错</li></ul><ul><li>Using temporary<br />\n查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化.</li></ul>",
    "body_lake": "<!doctype lake><p><a name=\"简介\"></a></p><h2 id=\"e05dce83\">简介</h2><p><br /></p><p>MySQL 提供了一个 EXPLAIN 命令, 它可以对 <code>SELECT</code> 语句进行分析, 并输出 <code>SELECT</code> 执行的详细信息, 以供开发人员针对性优化.<br />\nEXPLAIN 命令用法十分简单, 在 SELECT 语句前加上 Explain 就可以了, 例如:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%220b34926f%22%2C%22code%22%3A%22EXPLAIN%20SELECT%20*%20from%20user_info%20WHERE%20%20id%20%3C%20300%3B%22%7D\"></card><p><br /></p><p><a name=\"准备\"></a></p><h2 id=\"424a2ad8\">准备</h2><p><br /></p><p>为了接下来方便演示 EXPLAIN 的使用, 首先我们需要建立两个测试用的表, 并添加相应的数据:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2212e33ffb%22%2C%22code%22%3A%22CREATE%20TABLE%20%60user_info%60%20(%5Cn%20%20%60id%60%20%20%20BIGINT(20)%20%20NOT%20NULL%20AUTO_INCREMENT%2C%5Cn%20%20%60name%60%20VARCHAR(50)%20NOT%20NULL%20DEFAULT%20''%2C%5Cn%20%20%60age%60%20%20INT(11)%20%20%20%20%20%20%20%20%20%20%20%20%20%20DEFAULT%20NULL%2C%5Cn%20%20PRIMARY%20KEY%20(%60id%60)%2C%5Cn%20%20KEY%20%60name_index%60%20(%60name%60)%5Cn)%5Cn%20%20ENGINE%20%3D%20InnoDB%5Cn%20%20DEFAULT%20CHARSET%20%3D%20utf8%5Cn%5CnINSERT%20INTO%20user_info%20(name%2C%20age)%20VALUES%20('xys'%2C%2020)%3B%5CnINSERT%20INTO%20user_info%20(name%2C%20age)%20VALUES%20('a'%2C%2021)%3B%5CnINSERT%20INTO%20user_info%20(name%2C%20age)%20VALUES%20('b'%2C%2023)%3B%5CnINSERT%20INTO%20user_info%20(name%2C%20age)%20VALUES%20('c'%2C%2050)%3B%5CnINSERT%20INTO%20user_info%20(name%2C%20age)%20VALUES%20('d'%2C%2015)%3B%5CnINSERT%20INTO%20user_info%20(name%2C%20age)%20VALUES%20('e'%2C%2020)%3B%5CnINSERT%20INTO%20user_info%20(name%2C%20age)%20VALUES%20('f'%2C%2021)%3B%5CnINSERT%20INTO%20user_info%20(name%2C%20age)%20VALUES%20('g'%2C%2023)%3B%5CnINSERT%20INTO%20user_info%20(name%2C%20age)%20VALUES%20('h'%2C%2050)%3B%5CnINSERT%20INTO%20user_info%20(name%2C%20age)%20VALUES%20('i'%2C%2015)%3B%5Cn%5CnCREATE%20TABLE%20%60order_info%60%20(%5Cn%20%20%60id%60%20%20%20%20%20%20%20%20%20%20%20BIGINT(20)%20%20NOT%20NULL%20AUTO_INCREMENT%2C%5Cn%20%20%60user_id%60%20%20%20%20%20%20BIGINT(20)%20%20%20%20%20%20%20%20%20%20%20DEFAULT%20NULL%2C%5Cn%20%20%60product_name%60%20VARCHAR(50)%20NOT%20NULL%20DEFAULT%20''%2C%5Cn%20%20%60productor%60%20%20%20%20VARCHAR(30)%20%20%20%20%20%20%20%20%20%20DEFAULT%20NULL%2C%5Cn%20%20PRIMARY%20KEY%20(%60id%60)%2C%5Cn%20%20KEY%20%60user_product_detail_index%60%20(%60user_id%60%2C%20%60product_name%60%2C%20%60productor%60)%5Cn)%5Cn%20%20ENGINE%20%3D%20InnoDB%5Cn%20%20DEFAULT%20CHARSET%20%3D%20utf8%5Cn%5CnINSERT%20INTO%20order_info%20(user_id%2C%20product_name%2C%20productor)%20VALUES%20(1%2C%20'p1'%2C%20'WHH')%3B%5CnINSERT%20INTO%20order_info%20(user_id%2C%20product_name%2C%20productor)%20VALUES%20(1%2C%20'p2'%2C%20'WL')%3B%5CnINSERT%20INTO%20order_info%20(user_id%2C%20product_name%2C%20productor)%20VALUES%20(1%2C%20'p1'%2C%20'DX')%3B%5CnINSERT%20INTO%20order_info%20(user_id%2C%20product_name%2C%20productor)%20VALUES%20(2%2C%20'p1'%2C%20'WHH')%3B%5CnINSERT%20INTO%20order_info%20(user_id%2C%20product_name%2C%20productor)%20VALUES%20(2%2C%20'p5'%2C%20'WL')%3B%5CnINSERT%20INTO%20order_info%20(user_id%2C%20product_name%2C%20productor)%20VALUES%20(3%2C%20'p3'%2C%20'MA')%3B%5CnINSERT%20INTO%20order_info%20(user_id%2C%20product_name%2C%20productor)%20VALUES%20(4%2C%20'p1'%2C%20'WHH')%3B%5CnINSERT%20INTO%20order_info%20(user_id%2C%20product_name%2C%20productor)%20VALUES%20(6%2C%20'p1'%2C%20'WHH')%3B%5CnINSERT%20INTO%20order_info%20(user_id%2C%20product_name%2C%20productor)%20VALUES%20(9%2C%20'p8'%2C%20'TE')%3B%22%7D\"></card><p><br /></p><p><a name=\"EXPLAIN-输出格式\"></a></p><h2 id=\"156d011a\">EXPLAIN 输出格式</h2><p><br /></p><p>EXPLAIN 命令的输出内容大致如下:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2298e950eb%22%2C%22code%22%3A%22mysql%3E%20explain%20select%20*%20from%20user_info%20where%20id%20%3D%202%5C%5CG%5Cn***************************%201.%20row%20***************************%5Cn%20%20%20%20%20%20%20%20%20%20%20id%3A%201%5Cn%20%20select_type%3A%20SIMPLE%5Cn%20%20%20%20%20%20%20%20table%3A%20user_info%5Cn%20%20%20partitions%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20type%3A%20const%5Cnpossible_keys%3A%20PRIMARY%5Cn%20%20%20%20%20%20%20%20%20%20key%3A%20PRIMARY%5Cn%20%20%20%20%20%20key_len%3A%208%5Cn%20%20%20%20%20%20%20%20%20%20ref%3A%20const%5Cn%20%20%20%20%20%20%20%20%20rows%3A%201%5Cn%20%20%20%20%20filtered%3A%20100.00%5Cn%20%20%20%20%20%20%20%20Extra%3A%20NULL%5Cn1%20row%20in%20set%2C%201%20warning%20(0.00%20sec)%22%7D\"></card><p><br /></p><p>各列的含义如下:</p><p><br /></p><ul><li>id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.</li></ul><ul><li>select_type: SELECT 查询的类型.</li></ul><ul><li>table: 查询的是哪个表</li></ul><ul><li>partitions: 匹配的分区</li></ul><ul><li>type: join 类型</li></ul><ul><li>possible_keys: 此次查询中可能选用的索引</li></ul><ul><li>key: 此次查询中确切使用到的索引.</li></ul><ul><li>ref: 哪个字段或常数与 key 一起被使用</li></ul><ul><li>rows: 显示此查询一共扫描了多少行. 这个是一个估计值.</li></ul><ul><li>filtered: 表示此查询条件所过滤的数据的百分比</li></ul><ul><li>extra: 额外的信息</li></ul><p><br /></p><p>接下来我们来重点看一下比较重要的几个字段.</p><p><br /></p><h3 id=\"select_type\">select_type</h3><p><br /></p><p><code>select_type</code> 表示了查询的类型, 它的常用取值有:</p><p><br /></p><ul><li><span style=\"color: #389E0D;\">SIMPLE, 表示此查询不包含 UNION 查询或子查询</span></li></ul><ul><li>PRIMARY, 表示此查询是最外层的查询</li></ul><ul><li>UNION, 表示此查询是 UNION 的第二或随后的查询</li></ul><ul><li>DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询</li></ul><ul><li>UNION RESULT, UNION 的结果</li></ul><ul><li>SUBQUERY, 子查询中的第一个 SELECT</li></ul><ul><li>DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.</li></ul><p><br /></p><p>最常见的查询类别应该是 <code>SIMPLE</code> 了, 比如当我们的查询没有子查询, 也没有 UNION 查询时, 那么通常就是 <code>SIMPLE</code> 类型, 例如:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2298e950eb-1%22%2C%22code%22%3A%22mysql%3E%20explain%20select%20*%20from%20user_info%20where%20id%20%3D%202%5C%5CG%5Cn***************************%201.%20row%20***************************%5Cn%20%20%20%20%20%20%20%20%20%20%20id%3A%201%5Cn%20%20select_type%3A%20SIMPLE%5Cn%20%20%20%20%20%20%20%20table%3A%20user_info%5Cn%20%20%20partitions%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20type%3A%20const%5Cnpossible_keys%3A%20PRIMARY%5Cn%20%20%20%20%20%20%20%20%20%20key%3A%20PRIMARY%5Cn%20%20%20%20%20%20key_len%3A%208%5Cn%20%20%20%20%20%20%20%20%20%20ref%3A%20const%5Cn%20%20%20%20%20%20%20%20%20rows%3A%201%5Cn%20%20%20%20%20filtered%3A%20100.00%5Cn%20%20%20%20%20%20%20%20Extra%3A%20NULL%5Cn1%20row%20in%20set%2C%201%20warning%20(0.00%20sec)%22%7D\"></card><p><br /></p><p>如果我们使用了 UNION 查询, 那么 EXPLAIN 输出 的结果类似如下:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%220ff01469%22%2C%22code%22%3A%22mysql%3E%20EXPLAIN%20(SELECT%20*%20FROM%20user_info%20%20WHERE%20id%20IN%20(1%2C%202%2C%203))%5Cn%20%20%20%20-%3E%20UNION%5Cn%20%20%20%20-%3E%20(SELECT%20*%20FROM%20user_info%20WHERE%20id%20IN%20(3%2C%204%2C%205))%3B%5Cn%2B%5Cn%7C%20id%20%7C%20select_type%20%20%7C%20table%20%20%20%20%20%20%7C%20partitions%20%7C%20type%20%20%7C%20possible_keys%20%7C%20key%20%20%20%20%20%7C%20key_len%20%7C%20ref%20%20%7C%20rows%20%7C%20filtered%20%7C%20Extra%20%20%20%20%20%20%20%20%20%20%20%7C%5Cn%2B%5Cn%7C%20%201%20%7C%20PRIMARY%20%20%20%20%20%20%7C%20user_info%20%20%7C%20NULL%20%20%20%20%20%20%20%7C%20range%20%7C%20PRIMARY%20%20%20%20%20%20%20%7C%20PRIMARY%20%7C%208%20%20%20%20%20%20%20%7C%20NULL%20%7C%20%20%20%203%20%7C%20%20%20100.00%20%7C%20Using%20where%20%20%20%20%20%7C%5Cn%7C%20%202%20%7C%20UNION%20%20%20%20%20%20%20%20%7C%20user_info%20%20%7C%20NULL%20%20%20%20%20%20%20%7C%20range%20%7C%20PRIMARY%20%20%20%20%20%20%20%7C%20PRIMARY%20%7C%208%20%20%20%20%20%20%20%7C%20NULL%20%7C%20%20%20%203%20%7C%20%20%20100.00%20%7C%20Using%20where%20%20%20%20%20%7C%5Cn%7C%20NULL%20%7C%20UNION%20RESULT%20%7C%20%3Cunion1%2C2%3E%20%7C%20NULL%20%20%20%20%20%20%20%7C%20ALL%20%20%20%7C%20NULL%20%20%20%20%20%20%20%20%20%20%7C%20NULL%20%20%20%20%7C%20NULL%20%20%20%20%7C%20NULL%20%7C%20NULL%20%7C%20%20%20%20%20NULL%20%7C%20Using%20temporary%20%7C%5Cn%2B%5Cn3%20rows%20in%20set%2C%201%20warning%20(0.00%20sec)%22%7D\"></card><p><br /></p><h3 id=\"table\">table</h3><p><br /></p><p>表示查询涉及的表或衍生表</p><p><br /></p><h3 id=\"type\">type</h3><p><code>type</code> 字段比较重要, 它提供了判断查询是否高效的重要依据依据. 通过 <code>type</code> 字段, 我们判断此次查询是 <code>全表扫描</code> 还是 <code>索引扫描</code> 等.</p><p><a name=\"type-常用类型\"></a></p><h4 id=\"63641849\">type 常用类型</h4><p>type 常用的取值有:</p><ul><li><code>system</code>: 表中只有一条数据. 这个类型是特殊的 <code>const</code> 类型.</li></ul><ul><li><code>const</code>: 针对主键或唯一索引的等值查询扫描, 最多只返回一行数据. const 查询速度非常快, 因为它仅仅读取一次即可.<br />\n例如下面的这个查询, 它使用了主键索引, 因此 <code>type</code> 就是 <code>const</code> 类型的.\n<br />mysql&gt; explain select * from user_info where id = 2\\G<br />\n<strong><em> 1. row </em></strong><br />\nid: 1<cursor /><br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: const<br />\npossible_keys: PRIMARY<br />\nkey: PRIMARY<br />\nkey_len: 8<br />\nref: const<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: NULL<br />\n1 row in set, 1 warning (0.00 sec)</li></ul><ul><li><code>eq_ref</code>: 此类型通常出现在多表的 join 查询, 表示对于前表的每一个结果, 都只能匹配到后表的一行结果. 并且查询的比较操作通常是 <code>=</code>, 查询效率较高. 例如:\n<br />mysql&gt; EXPLAIN SELECT * FROM user_info, order_info WHERE user_info.id = order_info.user_id\\G<br />\n<strong><em> 1. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: order_info<br />\npartitions: NULL<br />\ntype: index<br />\npossible_keys: user_product_detail_index<br />\nkey: user_product_detail_index<br />\nkey_len: 314<br />\nref: NULL<br />\nrows: 9<br />\nfiltered: 100.00<br />\nExtra: Using where; Using index<br />\n<strong><em> 2. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: eq_ref<br />\npossible_keys: PRIMARY<br />\nkey: PRIMARY<br />\nkey_len: 8<br />\nref: test.order_info.user_id<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: NULL<br />\n2 rows in set, 1 warning (0.00 sec)</li></ul><ul><li><code>ref</code>: 此类型通常出现在多表的 join 查询, 针对于非唯一或非主键索引, 或者是使用了 <code>最左前缀</code> 规则索引的查询.<br />\n例如下面这个例子中, 就使用到了 <code>ref</code> 类型的查询:\n<br />mysql&gt; EXPLAIN SELECT * FROM user_info, order_info WHERE user_info.id = order_info.user_id AND order_info.user_id = 5\\G<br />\n<strong><em> 1. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: const<br />\npossible_keys: PRIMARY<br />\nkey: PRIMARY<br />\nkey_len: 8<br />\nref: const<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: NULL<br />\n<strong><em> 2. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: order_info<br />\npartitions: NULL<br />\ntype: ref<br />\npossible_keys: user_product_detail_index<br />\nkey: user_product_detail_index<br />\nkey_len: 9<br />\nref: const<br />\nrows: 1<br />\nfiltered: 100.00<br />\nExtra: Using index<br />\n2 rows in set, 1 warning (0.01 sec)</li></ul><ul><li><code>range</code>: 表示使用索引范围查询, 通过索引字段范围获取表中部分数据记录. 这个类型通常出现在 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN() 操作中.<br />\n当 <code>type</code> 是 <code>range</code> 时, 那么 EXPLAIN 输出的 <code>ref</code> 字段为 NULL, 并且 <code>key_len</code> 字段是此次查询中使用到的索引的最长的那个.</li></ul><p><br /></p><p>例如下面的例子就是一个范围查询:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22d2e4bdf6%22%2C%22code%22%3A%22mysql%3E%20EXPLAIN%20SELECT%20*%5Cn%20%20%20%20-%3E%20%20%20%20%20%20%20%20%20FROM%20user_info%5Cn%20%20%20%20-%3E%20%20%20%20%20%20%20%20%20WHERE%20id%20BETWEEN%202%20AND%208%20%5C%5CG%5Cn***************************%201.%20row%20***************************%5Cn%20%20%20%20%20%20%20%20%20%20%20id%3A%201%5Cn%20%20select_type%3A%20SIMPLE%5Cn%20%20%20%20%20%20%20%20table%3A%20user_info%5Cn%20%20%20partitions%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20type%3A%20range%5Cnpossible_keys%3A%20PRIMARY%5Cn%20%20%20%20%20%20%20%20%20%20key%3A%20PRIMARY%5Cn%20%20%20%20%20%20key_len%3A%208%5Cn%20%20%20%20%20%20%20%20%20%20ref%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20rows%3A%207%5Cn%20%20%20%20%20filtered%3A%20100.00%5Cn%20%20%20%20%20%20%20%20Extra%3A%20Using%20where%5Cn1%20row%20in%20set%2C%201%20warning%20(0.00%20sec)%22%7D\"></card><p><br /></p><ul><li><code>index</code>: 表示全索引扫描(full index scan), 和 ALL 类型类似, 只不过 ALL 类型是全表扫描, 而 index 类型则仅仅扫描所有的索引, 而不扫描数据.<br />\n<code>index</code> 类型通常出现在: 所要查询的数据直接在索引树中就可以获取到, 而不需要扫描数据. 当是这种情况时, Extra 字段 会显示 <code>Using index</code>.</li></ul><p><br /></p><p>例如:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f3198460%22%2C%22code%22%3A%22mysql%3E%20EXPLAIN%20SELECT%20name%20FROM%20%20user_info%20%5C%5CG%5Cn***************************%201.%20row%20***************************%5Cn%20%20%20%20%20%20%20%20%20%20%20id%3A%201%5Cn%20%20select_type%3A%20SIMPLE%5Cn%20%20%20%20%20%20%20%20table%3A%20user_info%5Cn%20%20%20partitions%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20type%3A%20index%5Cnpossible_keys%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20%20key%3A%20name_index%5Cn%20%20%20%20%20%20key_len%3A%20152%5Cn%20%20%20%20%20%20%20%20%20%20ref%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20rows%3A%2010%5Cn%20%20%20%20%20filtered%3A%20100.00%5Cn%20%20%20%20%20%20%20%20Extra%3A%20Using%20index%5Cn1%20row%20in%20set%2C%201%20warning%20(0.00%20sec)%22%7D\"></card><p><br /></p><p>上面的例子中, 我们查询的 name 字段恰好是一个索引, 因此我们直接从索引中获取数据就可以满足查询的需求了, 而不需要查询表中的数据. 因此这样的情况下, type 的值是 <code>index</code>, 并且 Extra 的值是 <code>Using index</code>.</p><p><br /></p><ul><li>ALL: 表示全表扫描, 这个类型的查询是性能最差的查询之一. 通常来说, 我们的查询不应该出现 ALL 类型的查询, 因为这样的查询在数据量大的情况下, 对数据库的性能是巨大的灾难. 如一个查询是 ALL 类型查询, 那么一般来说可以对相应的字段添加索引来避免.<br />\n下面是一个全表扫描的例子, 可以看到, 在全表扫描时, possible_keys 和 key 字段都是 NULL, 表示没有使用到索引, 并且 rows 十分巨大, 因此整个查询效率是十分低下的.\n<br />mysql&gt; EXPLAIN SELECT age FROM  user_info WHERE age = 20 \\G<br />\n<strong><em> 1. row </em></strong><br />\nid: 1<br />\nselect_type: SIMPLE<br />\ntable: user_info<br />\npartitions: NULL<br />\ntype: ALL<br />\npossible_keys: NULL<br />\nkey: NULL<br />\nkey_len: NULL<br />\nref: NULL<br />\nrows: 10<br />\nfiltered: 10.00<br />\nExtra: Using where<br />\n1 row in set, 1 warning (0.00 sec)</li></ul><p><br /></p><p><a name=\"type-类型的性能比较\"></a></p><h4 id=\"1c3ee6de\">type 类型的性能比较</h4><p><br /></p><p>通常来说, 不同的 type 类型的性能关系如下:<br />\n<code>ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system</code><br />\n<code>ALL</code> 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的.<br />\n而 <code>index</code> 类型的查询虽然不是全表扫描, 但是它扫描了所有的索引, 因此比 ALL 类型的稍快.<br />\n后面的几种类型都是利用了索引来查询数据, 因此可以过滤部分或大部分数据, 因此查询效率就比较高了.</p><p><br /></p><h3 id=\"possible_keys\">possible_keys</h3><p><br /></p><p><code>possible_keys</code> 表示 MySQL 在查询时, 能够使用到的索引. 注意, 即使有些索引在 <code>possible_keys</code> 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 <code>key</code> 字段决定.</p><p><br /></p><h3 id=\"key\">key</h3><p><br /></p><p>此字段是 MySQL 在当前查询时所真正使用到的索引.</p><p><br /></p><h3 id=\"key_len\">key_len</h3><p><br /></p><p>表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到.<br />\nkey_len 的计算规则如下:</p><p><br /></p><ul><li>字符串</li></ul><ul data-lake-indent=\"1\"><li>char(n): n 字节长度</li></ul><ul data-lake-indent=\"1\"><li>varchar(n): 如果是 utf8 编码, 则是 3 <em>n + 2字节; 如果是 utf8mb4 编码, 则是 4</em> n + 2 字节.</li></ul><ul><li>数值类型:</li></ul><ul data-lake-indent=\"1\"><li>TINYINT: 1字节</li></ul><ul data-lake-indent=\"1\"><li>SMALLINT: 2字节</li></ul><ul data-lake-indent=\"1\"><li>MEDIUMINT: 3字节</li></ul><ul data-lake-indent=\"1\"><li>INT: 4字节</li></ul><ul data-lake-indent=\"1\"><li>BIGINT: 8字节</li></ul><ul><li>时间类型</li></ul><ul data-lake-indent=\"1\"><li>DATE: 3字节</li></ul><ul data-lake-indent=\"1\"><li>TIMESTAMP: 4字节</li></ul><ul data-lake-indent=\"1\"><li>DATETIME: 8字节</li></ul><ul><li>字段属性: NULL 属性 占用一个字节. 如果一个字段是 NOT NULL 的, 则没有此属性.</li></ul><p><br /></p><p>我们来举两个简单的栗子:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22a6149f04%22%2C%22code%22%3A%22mysql%3E%20EXPLAIN%20SELECT%20*%20FROM%20order_info%20WHERE%20user_id%20%3C%203%20AND%20product_name%20%3D%20'p1'%20AND%20productor%20%3D%20'WHH'%20%5C%5CG%5Cn***************************%201.%20row%20***************************%5Cn%20%20%20%20%20%20%20%20%20%20%20id%3A%201%5Cn%20%20select_type%3A%20SIMPLE%5Cn%20%20%20%20%20%20%20%20table%3A%20order_info%5Cn%20%20%20partitions%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20type%3A%20range%5Cnpossible_keys%3A%20user_product_detail_index%5Cn%20%20%20%20%20%20%20%20%20%20key%3A%20user_product_detail_index%5Cn%20%20%20%20%20%20key_len%3A%209%5Cn%20%20%20%20%20%20%20%20%20%20ref%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20rows%3A%205%5Cn%20%20%20%20%20filtered%3A%2011.11%5Cn%20%20%20%20%20%20%20%20Extra%3A%20Using%20where%3B%20Using%20index%5Cn1%20row%20in%20set%2C%201%20warning%20(0.00%20sec)%22%7D\"></card><p><br /></p><p>上面的例子是从表 order_info 中查询指定的内容, 而我们从此表的建表语句中可以知道, 表 <code>order_info</code> 有一个联合索引:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%225c82f668%22%2C%22code%22%3A%22KEY%20%60user_product_detail_index%60%20(%60user_id%60%2C%20%60product_name%60%2C%20%60productor%60)%22%7D\"></card><p><br /></p><p>不过此查询语句 <code>WHERE user_id &lt; 3 AND product_name = 'p1' AND productor = 'WHH'</code> 中, 因为先进行 user_id 的范围查询, 而根据 <code>最左前缀匹配</code> 原则, 当遇到范围查询时, 就停止索引的匹配, 因此实际上我们使用到的索引的字段只有 <code>user_id</code>, 因此在 <code>EXPLAIN</code> 中, 显示的 key_len 为 9. 因为 user_id 字段是 BIGINT, 占用 8 字节, 而 NULL 属性占用一个字节, 因此总共是 9 个字节. 若我们将user_id 字段改为 <code>BIGINT(20) NOT NULL DEFAULT '0'</code>, 则 key_length 应该是8.</p><p><br /></p><p>上面因为 <code>最左前缀匹配</code> 原则, 我们的查询仅仅使用到了联合索引的 <code>user_id</code> 字段, 因此效率不算高.</p><p><br /></p><p>接下来我们来看一下下一个例子:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%223e9cb50c%22%2C%22code%22%3A%22mysql%3E%20EXPLAIN%20SELECT%20*%20FROM%20order_info%20WHERE%20user_id%20%3D%201%20AND%20product_name%20%3D%20'p1'%20%5C%5CG%3B%5Cn***************************%201.%20row%20***************************%5Cn%20%20%20%20%20%20%20%20%20%20%20id%3A%201%5Cn%20%20select_type%3A%20SIMPLE%5Cn%20%20%20%20%20%20%20%20table%3A%20order_info%5Cn%20%20%20partitions%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20type%3A%20ref%5Cnpossible_keys%3A%20user_product_detail_index%5Cn%20%20%20%20%20%20%20%20%20%20key%3A%20user_product_detail_index%5Cn%20%20%20%20%20%20key_len%3A%20161%5Cn%20%20%20%20%20%20%20%20%20%20ref%3A%20const%2Cconst%5Cn%20%20%20%20%20%20%20%20%20rows%3A%202%5Cn%20%20%20%20%20filtered%3A%20100.00%5Cn%20%20%20%20%20%20%20%20Extra%3A%20Using%20index%5Cn1%20row%20in%20set%2C%201%20warning%20(0.00%20sec)%22%7D\"></card><p><br /></p><p>这次的查询中, 我们没有使用到范围查询, key_len 的值为 161. 为什么呢? 因为我们的查询条件 <code>WHERE user_id = 1 AND product_name = 'p1'</code> 中, 仅仅使用到了联合索引中的前两个字段, 因此 <code>keyLen(user_id) + keyLen(product_name) = 9 + 50 * 3 + 2 = 161</code></p><p><br /></p><h3 id=\"rows\">rows</h3><p><br /></p><p>rows 也是一个重要的字段. MySQL 查询优化器根据统计信息, 估算 SQL 要查找到结果集需要扫描读取的数据行数.<br />\n这个值非常直观显示 SQL 的效率好坏, 原则上 rows 越少越好.</p><p><br /></p><h3 id=\"Extra\">Extra</h3><p><br /></p><p>EXplain 中的很多额外的信息会在 Extra 字段显示, 常见的有以下几种内容:</p><p><br /></p><ul><li>Using filesort<br />\n当 Extra 中有 <code>Using filesort</code> 时, 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 <code>Using filesort</code>, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大.</li></ul><p><br /></p><p>例如下面的例子:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2242990589%22%2C%22code%22%3A%22mysql%3E%20EXPLAIN%20SELECT%20*%20FROM%20order_info%20ORDER%20BY%20product_name%20%5C%5CG%5Cn***************************%201.%20row%20***************************%5Cn%20%20%20%20%20%20%20%20%20%20%20id%3A%201%5Cn%20%20select_type%3A%20SIMPLE%5Cn%20%20%20%20%20%20%20%20table%3A%20order_info%5Cn%20%20%20partitions%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20type%3A%20index%5Cnpossible_keys%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20%20key%3A%20user_product_detail_index%5Cn%20%20%20%20%20%20key_len%3A%20253%5Cn%20%20%20%20%20%20%20%20%20%20ref%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20rows%3A%209%5Cn%20%20%20%20%20filtered%3A%20100.00%5Cn%20%20%20%20%20%20%20%20Extra%3A%20Using%20index%3B%20Using%20filesort%5Cn1%20row%20in%20set%2C%201%20warning%20(0.00%20sec)%22%7D\"></card><p><br /></p><p>我们的索引是</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%225c82f668-1%22%2C%22code%22%3A%22KEY%20%60user_product_detail_index%60%20(%60user_id%60%2C%20%60product_name%60%2C%20%60productor%60)%22%7D\"></card><p><br /></p><p>但是上面的查询中根据 <code>product_name</code> 来排序, 因此不能使用索引进行优化, 进而会产生 <code>Using filesort</code>.<br />\n如果我们将排序依据改为 <code>ORDER BY user_id, product_name</code>, 那么就不会出现 <code>Using filesort</code> 了. 例如:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%223d5e7a5c%22%2C%22code%22%3A%22mysql%3E%20EXPLAIN%20SELECT%20*%20FROM%20order_info%20ORDER%20BY%20user_id%2C%20product_name%20%5C%5CG%5Cn***************************%201.%20row%20***************************%5Cn%20%20%20%20%20%20%20%20%20%20%20id%3A%201%5Cn%20%20select_type%3A%20SIMPLE%5Cn%20%20%20%20%20%20%20%20table%3A%20order_info%5Cn%20%20%20partitions%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20type%3A%20index%5Cnpossible_keys%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20%20key%3A%20user_product_detail_index%5Cn%20%20%20%20%20%20key_len%3A%20253%5Cn%20%20%20%20%20%20%20%20%20%20ref%3A%20NULL%5Cn%20%20%20%20%20%20%20%20%20rows%3A%209%5Cn%20%20%20%20%20filtered%3A%20100.00%5Cn%20%20%20%20%20%20%20%20Extra%3A%20Using%20index%5Cn1%20row%20in%20set%2C%201%20warning%20(0.00%20sec)%22%7D\"></card><p><br /></p><ul><li>Using index<br />\n&quot;覆盖索引扫描&quot;, 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错</li></ul><ul><li>Using temporary<br />\n查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化.</li></ul>",
    "public": 1,
    "status": 1,
    "likes_count": 1,
    "comments_count": 0,
    "content_updated_at": "2019-05-21T03:28:48.000Z",
    "deleted_at": null,
    "created_at": "2019-05-21T03:26:05.000Z",
    "updated_at": "2019-06-24T06:28:40.000Z",
    "published_at": "2019-05-21T03:28:48.000Z",
    "first_published_at": null,
    "word_count": 3500,
    "cover": null,
    "description": "简介MySQL 提供了一个 EXPLAIN 命令, 它可以对 SELECT 语句进行分析, 并输出 SELECT 执行的详细信息, 以供开发人员针对性优化. EXPLAIN 命令用法十分简单, 在 SELECT 语句前加上 Explain 就可以了, 例如:EXPLAIN SELECT * f...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1555880,
    "slug": "gppzvt",
    "title": "上线之前",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "1. 入参为空有没有处理\n1. 数据库查询为空有没有处理\n1. 数据库新增字段有没有提交到审核平台\n1. SQL有没有命中索引\n1. 当有新增或是修改的配置时，是否及时同步到了阿波罗\n",
    "body_draft": "",
    "body_html": "<ol start=\"1\"><li>入参为空有没有处理</li><li>数据库查询为空有没有处理</li><li>数据库新增字段有没有提交到审核平台</li><li>SQL有没有命中索引</li><li>当有新增或是修改的配置时，是否及时同步到了阿波罗</li></ol>",
    "body_lake": "<!doctype lake><ol start=\"1\"><li>入参为空有没有处理</li><li>数据库查询为空有没有处理</li><li>数据库新增字段有没有提交到审核平台</li><li>SQL有没有命中索引</li><li>当有新增或是修改的配置时，是否及时同步到了阿波罗<cursor /></li></ol>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-04-18T06:07:06.000Z",
    "deleted_at": null,
    "created_at": "2019-04-18T06:04:12.000Z",
    "updated_at": "2019-05-24T07:34:07.000Z",
    "published_at": "2019-04-18T06:07:06.000Z",
    "first_published_at": "2019-04-18T06:07:06.000Z",
    "word_count": 69,
    "cover": null,
    "description": "入参为空有没有处理数据库查询为空有没有处理数据库新增字段有没有提交到审核平台SQL有没有命中索引当有新增或是修改的配置时，是否及时同步到了阿波罗",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1422914,
    "slug": "1d4b94a6-5440-4501-a834-eb2a0d51008d",
    "title": "Java动态追踪技术探究 - 美团技术团队",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"47f6f944\"></a>\n## 引子\n\n在遥远的希艾斯星球爪哇国塞沃城中，两名年轻的程序员正在为一件事情苦恼，程序出问题了，一时看不出问题出在哪里，于是有了以下对话：\n\n“Debug一下吧。”\n\n“线上机器，没开Debug端口。”\n\n“看日志，看看请求值和返回值分别是什么？”\n\n“那段代码没打印日志。”\n\n“改代码，加日志，重新发布一次。”\n\n“怀疑是线程池的问题，重启会破坏现场。”\n\n长达几十秒的沉默之后：“据说，排查问题的最高境界，就是只通过Review代码来发现问题。”\n\n比几十秒长几十倍的沉默之后：“我轮询了那段代码一十七遍之后，终于得出一个结论。”\n\n“结论是？”\n\n“我还没到达只通过Review代码就能发现问题的至高境界。”\n\n<a name=\"46b7b012\"></a>\n## 从JSP说起\n\n对于大多数Java程序员来说，早期的时候，都会接触到一个叫做JSP（Java Server Pages）的技术。虽然这种技术，在前后端代码分离、前后端逻辑分离、前后端组织架构分离的今天来看，已经过时了，但是其中还是有一些有意思的东西，值得拿出来说一说。\n\n当时刚刚处于Java入门时期的我们，大多数精力似乎都放在了JSP的页面展示效果上了：\n\n“这个表格显示的行数不对”\n\n“原来是for循环写的有问题，改一下，刷新页面再试一遍”\n\n“嗯，好了，表格显示没问题了，但是，登录人的姓名没取到啊，是不是Sesstion获取有问题？”\n\n“有可能，我再改一下，一会儿再刷新试试”\n\n……\n\n在一遍一遍修改代码刷新浏览器页面重试的时候，我们自己也许并没有注意到一件很酷的事情：我们修改完代码，居然只是简单地刷新一遍浏览器页面，修改就生效了，整个过程并没有重启JVM。按照我们的常识，Java程序一般都是在启动时加载类文件，如果都像JSP这样修改完代码，不用重启就生效的话，那文章开头的问题就可以解决了啊：Java文件中加一段日志打印的代码，不重启就生效，既不破坏现场，又可以定位问题。忍不住试一试：修改、编译、替换class文件。额，不行，新改的代码并没有生效。那为什么偏偏JSP可以呢？让我们先来看看JSP的运行原理。\n\n当我们打开浏览器，请求访问一个JSP文件的时候，整个过程是这样的:\n\n![](https://p1.meituan.net/travelcube/7fceed5036a40f4bd22ccf86629069c0118151.jpg#align=left&display=inline&height=389&originHeight=782&originWidth=1498&status=done&width=746)\n\nJSP文件处理过程\n\nJSP文件修改过后，之所以能及时生效，是因为Web容器（Tomcat）会检查请求的JSP文件是否被更改过。如果发生过更改，那么就将JSP文件重新解析翻译成一个新的Sevlet类，并加载到JVM中。之后的请求，都会由这个新的Servet来处理。**这里有个问题，根据Java的类加载机制，在同一个ClassLoader中，类是不允许重复的。为了绕开这个限制，Web容器每次都会创建一个新的ClassLoader实例，来加载新编译的Servlet类。之后的请求都会由这个新的Servlet来处理，这样就实现了新旧JSP的切换。**\n\nHTTP服务是无状态的，所以JSP的场景基本上都是一次性消费，这种通过创建新的ClassLoader来“替换”class的做法行得通，但是对于其他应用，比如Spring框架，即便这样做了，对象多数是单例，对于内存中已经创建好的对象，我们无法通过这种创建新的ClassLoader实例的方法来修改对象行为。\n\n我就是想不重启应用加个日志打印，就这么难吗？\n\n<a name=\"1125ee41\"></a>\n## Java对象行为\n\n既然JSP的办法行不通，那我们来看看还有没有其他的办法。仔细想想，我们会发现，文章开头的问题本质上是动态改变内存中已存在对象的行为的问题。所以，我们得先弄清楚JVM中和对象行为有关的地方在哪里，有没有更改的可能性。\n\n我们都知道，对象使用两种东西来描述事物：行为和属性。举个例子：\n\n```java\npublic class Person{\n\n  private int age;\n\n  private String name;\n\n  public void speak(String str) {\n\n    System.out.println(str);\n\n }\n\n public Person(int age, String name) {\n\n    this.age = age;\n\n    this.name = name;\n\n }\n\n}\n```\n\n上面Person类中age和name是属性，speak是行为。对象是类的事例，每个对象的属性都属于对象本身，但是每个对象的行为却是公共的。举个例子，比如我们现在基于Person类创建了两个对象，personA和personB：\n\n```java\nPerson personA = new Person(43, \"lixunhuan\");\n\npersonA.speak(\"我是李寻欢\");\n\nPerson personB = new Person(23, \"afei\");\n\npersonB.speak(\"我是阿飞\");\n```\n\npersonA和personB有各自的姓名和年龄，但是有共同的行为：speak。想象一下，如果我们是Java语言的设计者，我们会怎么存储对象的行为和属性呢？\n\n“很简单，属性跟着对象走，每个对象都存一份。行为是公共的东西，抽离出来，单独放到一个地方。”\n\n“咦？抽离出公共的部分，跟代码复用好像啊。”\n\n“大道至简，很多东西本来都是殊途同归。”\n\n也就是说，第一步我们首先得找到存储对象行为的这个公共的地方。一番搜索之后，我们发现这样一段描述：\n\n> Method area is created on virtual machine startup, shared among all Java virtual machine threads and it is logically part of heap area. It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors.\n\n\nJava的对象行为（方法、函数）是存储在方法区的。\n\n“方法区中的数据从哪来？”\n\n“方法区中的数据是类加载时从class文件中提取出来的。”\n\n“class文件从哪来？”\n\n“从Java或者其他符合JVM规范的源代码中编译而来。”\n\n“源代码从哪来？”\n\n“废话，当然是手写！”\n\n“倒着推，手写没问题，编译没问题，至于加载……有没有办法加载一个已经加载过的类呢？如果有的话，我们就能修改字节码中目标方法所在的区域，然后重新加载这个类，这样方法区中的对象行为（方法）就被改变了，而且不改变对象的属性，也不影响已经存在对象的状态，那么就可以搞定这个问题了。可是，这岂不是违背了JVM的类加载原理？毕竟我们不想改变ClassLoader。”\n\n“少年，可以去看看`java.lang.instrument.Instrumentation`。”\n\n<a name=\"java.lang.instrument.Instrumentation\"></a>\n## java.lang.instrument.Instrumentation\n\n看完文档之后，我们发现这么两个接口：redefineClasses和retransformClasses。一个是重新定义class，一个是修改class。这两个大同小异，看reDefineClasses的说明：\n\n> This method is used to replace the definition of a class without reference to the existing class file bytes, as one might do when recompiling from source for fix-and-continue debugging. Where the existing class file bytes are to be transformed (for example in bytecode instrumentation) retransformClasses should be used.\n\n\n都是替换已经存在的class文件，redefineClasses是自己提供字节码文件替换掉已存在的class文件，retransformClasses是在已存在的字节码文件上修改后再替换之。\n\n当然，运行时直接替换类很不安全。比如新的class文件引用了一个不存在的类，或者把某个类的一个field给删除了等等，这些情况都会引发异常。所以如文档中所言，instrument存在诸多的限制：\n\n> The redefinition may change method bodies, the constant pool and attributes. The redefinition must not add, remove or rename fields or methods, change the signatures of methods, or change inheritance. These restrictions maybe be lifted in future versions. The class file bytes are not checked, verified and installed until after the transformations have been applied, if the resultant bytes are in error this method will throw an exception.\n\n\n我们能做的基本上也就是简单修改方法内的一些行为，这对于我们开头的问题，打印一段日志来说，已经足够了。当然，我们除了通过reTransform来打印日志，还能做很多其他非常有用的事情，这个下文会进行介绍。\n\n那怎么得到我们需要的class文件呢？一个最简单的方法，是把修改后的Java文件重新编译一遍得到class文件，然后调用redefineClasses替换。但是对于没有（或者拿不到，或者不方便修改）源码的文件我们应该怎么办呢？其实对于JVM来说，不管是Java也好，Scala也好，任何一种符合JVM规范的语言的源代码，都可以编译成class文件。JVM的操作对象是class文件，而不是源码。所以，从这种意义上来讲，我们可以说“JVM跟语言无关”。既然如此，不管有没有源码，其实我们只需要修改class文件就行了。\n\n<a name=\"30680ce1\"></a>\n## 直接操作字节码\n\nJava是软件开发人员能读懂的语言，class字节码是JVM能读懂的语言，class字节码最终会被JVM解释成机器能读懂的语言。无论哪种语言，都是人创造的。所以，理论上（实际上也确实如此）人能读懂上述任何一种语言，既然能读懂，自然能修改。只要我们愿意，我们完全可以跳过Java编译器，直接写字节码文件，只不过这并不符合时代的发展罢了，毕竟高级语言设计之始就是为我们人类所服务，其开发效率也比机器语言高很多。\n\n对于人类来说，字节码文件的可读性远远没有Java代码高。尽管如此，还是有一些杰出的程序员们创造出了可以用来直接编辑字节码的框架，提供接口可以让我们方便地操作字节码文件，进行注入修改类的方法，动态创造一个新的类等等操作。其中最著名的框架应该就是ASM了，cglib、Spring等框架中对于字节码的操作就建立在ASM之上。\n\n我们都知道，Spring的AOP是基于动态代理实现的，Spring会在运行时动态创建代理类，代理类中引用被代理类，在被代理的方法执行前后进行一些神秘的操作。那么，Spring是怎么在运行时创建代理类的呢？动态代理的美妙之处，就在于我们不必手动为每个需要被代理的类写代理类代码，Spring在运行时会根据需要动态地创造出一个类，这里创造的过程并非通过字符串写Java文件，然后编译成class文件，然后加载。Spring会直接“创造”一个class文件，然后加载，创造class文件的工具，就是ASM了。\n\n到这里，我们知道了用ASM框架直接操作class文件，在类中加一段打印日志的代码，然后调用retransformClasses就可以了。\n\n<a name=\"BTrace\"></a>\n## BTrace\n\n截止到目前，我们都是停留在理论描述的层面。那么如何进行实现呢？先来看几个问题：\n\n1. 在我们的工程中，谁来做这个寻找字节码，修改字节码，然后reTransform的动作呢？我们并非先知，不可能知道未来有没有可能遇到文章开头的这种问题。考虑到性价比，我们也不可能在每个工程中都开发一段专门做这些修改字节码、重新加载字节码的代码。\n2. 如果JVM不在本地，在远程呢？\n3. 如果连ASM都不会用呢？能不能更通用一些，更“傻瓜”一些。\n\n幸运的是，因为有BTrace的存在，我们不必自己写一套这样的工具了。什么是BTrace呢？[BTrace](https://github.com/btraceio/btrace)已经开源，项目描述极其简短：\n\n> A safe, dynamic tracing tool for the Java platform.\n\n\nBTrace是基于Java语言的一个安全的、可提供动态追踪服务的工具。BTrace基于ASM、Java Attach Api、Instruments开发，为用户提供了很多注解。依靠这些注解，我们可以编写BTrace脚本（简单的Java代码）达到我们想要的效果，而不必深陷于ASM对字节码的操作中不可自拔。\n\n看BTrace官方提供的一个简单例子：拦截所有java.io包中所有类中以read开头的方法，打印类名、方法名和参数名。当程序IO负载比较高的时候，就可以从输出的信息中看到是哪些类所引起，是不是很方便？\n\n```java\npackage com.sun.btrace.samples;\n\nimport com.sun.btrace.annotations.*;\nimport com.sun.btrace.AnyType;\nimport static com.sun.btrace.BTraceUtils.*;\n\n\n@BTrace public class ArgArray {\n    @OnMethod(\n        clazz=\"/java\\\\.io\\\\..*/\",\n        method=\"/read.*/\"\n    )\n    public static void anyRead(@ProbeClassName String pcn, @ProbeMethodName String pmn, AnyType[] args) {\n        println(pcn);\n        println(pmn);\n        printArray(args);\n    }\n}\n```\n\n再来看另一个例子：每隔2秒打印截止到当前创建过的线程数。\n\n```java\npackage com.sun.btrace.samples;\n\nimport com.sun.btrace.annotations.*;\nimport static com.sun.btrace.BTraceUtils.*;\nimport com.sun.btrace.annotations.Export;\n\n \n@BTrace public class ThreadCounter {\n\n    \n    @Export private static long count;\n\n    @OnMethod(\n        clazz=\"java.lang.Thread\",\n        method=\"start\"\n    ) \n    public static void onnewThread(@Self Thread t) {\n        \n        \n        count++;\n    }\n\n    @OnTimer(2000) \n    public static void ontimer() {\n        \n        \n        println(count);\n        \n        println(Counters.perfLong(\"btrace.com.sun.btrace.samples.ThreadCounter.count\"));\n    }\n}\n```\n\n看了上面的用法是不是有所启发？忍不住冒出来许多想法。比如查看HashMap什么时候会触发rehash，以及此时容器中有多少元素等等。\n\n有了BTrace，文章开头的问题可以得到完美的解决。至于BTrace具体有哪些功能，脚本怎么写，这些Git上BTrace工程中有大量的说明和举例，网上介绍BTrace用法的文章更是恒河沙数，这里就不再赘述了。\n\n我们明白了原理，又有好用的工具支持，剩下的就是发挥我们的创造力了，只需在合适的场景下合理地进行使用即可。\n\n既然BTrace能解决上面我们提到的所有问题，那么BTrace的架构是怎样的呢？\n\nBTrace主要有下面几个模块：\n\n1. BTrace脚本：利用BTrace定义的注解，我们可以很方便地根据需要进行脚本的开发。\n2. Compiler：将BTrace脚本编译成BTrace class文件。\n3. Client：将class文件发送到Agent。\n4. Agent：基于Java的Attach Api，Agent可以动态附着到一个运行的JVM上，然后开启一个BTrace Server，接收client发过来的BTrace脚本；解析脚本，然后根据脚本中的规则找到要修改的类；修改字节码后，调用Java Instrument的reTransform接口，完成对对象行为的修改并使之生效。\n\n整个BTrace的架构大致如下：\n\n![](https://p1.meituan.net/travelcube/25f19ea854450ce3964d20ae778f621a178594.jpg#align=left&display=inline&height=576&originHeight=1190&originWidth=1542&status=done&width=746)\n\nBTrace工作流程\n\nBTrace最终借Instruments实现class的替换。如上文所说，出于安全考虑，Instruments在使用上存在诸多的限制，BTrace也不例外。BTrace对JVM来说是“只读的”，因此BTrace脚本的限制如下：\n\n1. 不允许创建对象\n2. 不允许创建数组\n3. 不允许抛异常\n4. 不允许catch异常\n5. 不允许随意调用其他对象或者类的方法，只允许调用com.sun.btrace.BTraceUtils中提供的静态方法（一些数据处理和信息输出工具）\n6. 不允许改变类的属性\n7. 不允许有成员变量和方法，只允许存在**static public void**方法\n8. 不允许有内部类、嵌套类\n9. 不允许有同步方法和同步块\n10. 不允许有循环\n11. 不允许随意继承其他类（当然，java.lang.Object除外）\n12. 不允许实现接口\n13. 不允许使用assert\n14. 不允许使用Class对象\n\n如此多的限制，其实可以理解。BTrace要做的是，虽然修改了字节码，但是除了输出需要的信息外，对整个程序的正常运行并没有影响。\n\n<a name=\"Arthas\"></a>\n## Arthas\n\nBTrace脚本在使用上有一定的学习成本，如果能把一些常用的功能封装起来，对外直接提供简单的命令即可操作的话，那就再好不过了。阿里的工程师们早已想到这一点，就在去年（2018年9月份），阿里巴巴开源了自己的Java诊断工具——[Arthas](https://github.com/alibaba/arthas)。Arthas提供简单的命令行操作，功能强大。究其背后的技术原理，和本文中提到的大致无二。Arthas的文档很全面，想详细了解的话可以戳[这里](https://alibaba.github.io/arthas/)。\n\n本文旨在说明Java动态追踪技术的来龙去脉，掌握技术背后的原理之后，只要愿意，各位读者也可以开发出自己的“冰封王座”出来。\n\n<a name=\"60dbeb74\"></a>\n## 尾声：三生万物\n\n现在，让我们试着站在更高的地方“俯瞰”这些问题。\n\nJava的Instruments给运行时的动态追踪留下了希望，Attach API则给运行时动态追踪提供了“出入口”，ASM则大大方便了“人类”操作Java字节码的操作。\n\n基于Instruments和Attach API前辈们创造出了诸如JProfiler、Jvisualvm、BTrace、Arthas这样的工具。以ASM为基础发展出了cglib、动态代理，继而是应用广泛的Spring AOP。\n\nJava是静态语言，运行时不允许改变数据结构。然而，Java 5引入Instruments，Java 6引入Attach API之后，事情开始变得不一样了。虽然存在诸多限制，然而，在前辈们的努力下，仅仅是利用预留的近似于“只读”的这一点点狭小的空间，仍然创造出了各种大放异彩的技术，极大地提高了软件开发人员定位问题的效率。\n\n计算机应该是人类有史以来最伟大的发明之一，从电磁感应磁生电，到高低电压模拟0和1的比特，再到二进制表示出几种基本类型，再到基本类型表示出无穷的对象，最后无穷的对象组合交互模拟现实生活乃至整个宇宙。\n\n两千五百年前，《道德经》有言：“道生一，一生二，二生三，三生万物。”\n\n两千五百年后，计算机的发展过程也大抵如此吧。\n\n<a name=\"fb9bfd82\"></a>\n## 作者简介\n\n- 高扬，2017年加入美团打车，负责美团打车结算系统的开发。\n",
    "body_draft": "",
    "body_html": "<h2 id=\"47f6f944\">引子</h2><p><br /></p><p>在遥远的希艾斯星球爪哇国塞沃城中，两名年轻的程序员正在为一件事情苦恼，程序出问题了，一时看不出问题出在哪里，于是有了以下对话：</p><p><br /></p><p>“Debug一下吧。”</p><p><br /></p><p>“线上机器，没开Debug端口。”</p><p><br /></p><p>“看日志，看看请求值和返回值分别是什么？”</p><p><br /></p><p>“那段代码没打印日志。”</p><p><br /></p><p>“改代码，加日志，重新发布一次。”</p><p><br /></p><p>“怀疑是线程池的问题，重启会破坏现场。”</p><p><br /></p><p>长达几十秒的沉默之后：“据说，排查问题的最高境界，就是只通过Review代码来发现问题。”</p><p><br /></p><p>比几十秒长几十倍的沉默之后：“我轮询了那段代码一十七遍之后，终于得出一个结论。”</p><p><br /></p><p>“结论是？”</p><p><br /></p><p>“我还没到达只通过Review代码就能发现问题的至高境界。”</p><p><br /></p><h2 id=\"46b7b012\">从JSP说起</h2><p><br /></p><p>对于大多数Java程序员来说，早期的时候，都会接触到一个叫做JSP（Java Server Pages）的技术。虽然这种技术，在前后端代码分离、前后端逻辑分离、前后端组织架构分离的今天来看，已经过时了，但是其中还是有一些有意思的东西，值得拿出来说一说。</p><p><br /></p><p>当时刚刚处于Java入门时期的我们，大多数精力似乎都放在了JSP的页面展示效果上了：</p><p><br /></p><p>“这个表格显示的行数不对”</p><p><br /></p><p>“原来是for循环写的有问题，改一下，刷新页面再试一遍”</p><p><br /></p><p>“嗯，好了，表格显示没问题了，但是，登录人的姓名没取到啊，是不是Sesstion获取有问题？”</p><p><br /></p><p>“有可能，我再改一下，一会儿再刷新试试”</p><p><br /></p><p>……</p><p><br /></p><p>在一遍一遍修改代码刷新浏览器页面重试的时候，我们自己也许并没有注意到一件很酷的事情：我们修改完代码，居然只是简单地刷新一遍浏览器页面，修改就生效了，整个过程并没有重启JVM。按照我们的常识，Java程序一般都是在启动时加载类文件，如果都像JSP这样修改完代码，不用重启就生效的话，那文章开头的问题就可以解决了啊：Java文件中加一段日志打印的代码，不重启就生效，既不破坏现场，又可以定位问题。忍不住试一试：修改、编译、替换class文件。额，不行，新改的代码并没有生效。那为什么偏偏JSP可以呢？让我们先来看看JSP的运行原理。</p><p><br /></p><p>当我们打开浏览器，请求访问一个JSP文件的时候，整个过程是这样的:</p><p><br /></p><p><img src=\"https://p1.meituan.net/travelcube/7fceed5036a40f4bd22ccf86629069c0118151.jpg#align=left&amp;display=inline&amp;height=389&amp;originHeight=782&amp;originWidth=1498&amp;status=done&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>JSP文件处理过程</p><p><br /></p><p>JSP文件修改过后，之所以能及时生效，是因为Web容器（Tomcat）会检查请求的JSP文件是否被更改过。如果发生过更改，那么就将JSP文件重新解析翻译成一个新的Sevlet类，并加载到JVM中。之后的请求，都会由这个新的Servet来处理。<strong><span style=\"color: #F5222D;\">这里有个问题，根据Java的类加载机制，在同一个ClassLoader中，类是不允许重复的。为了绕开这个限制，Web容器每次都会创建一个新的ClassLoader实例，来加载新编译的Servlet类。之后的请求都会由这个新的Servlet来处理，这样就实现了新旧JSP的切换。</span></strong></p><p><br /></p><p>HTTP服务是无状态的，所以JSP的场景基本上都是一次性消费，这种通过创建新的ClassLoader来“替换”class的做法行得通，但是对于其他应用，比如Spring框架，即便这样做了，对象多数是单例，对于内存中已经创建好的对象，我们无法通过这种创建新的ClassLoader实例的方法来修改对象行为。</p><p><br /></p><p>我就是想不重启应用加个日志打印，就这么难吗？</p><p><br /></p><h2 id=\"1125ee41\">Java对象行为</h2><p><br /></p><p>既然JSP的办法行不通，那我们来看看还有没有其他的办法。仔细想想，我们会发现，文章开头的问题本质上是动态改变内存中已存在对象的行为的问题。所以，我们得先弄清楚JVM中和对象行为有关的地方在哪里，有没有更改的可能性。</p><p><br /></p><p>我们都知道，对象使用两种东西来描述事物：行为和属性。举个例子：</p><p><br /></p><pre data-lang=\"java\"><code>public class Person{\n\n  private int age;\n\n  private String name;\n\n  public void speak(String str) {\n\n    System.out.println(str);\n\n }\n\n public Person(int age, String name) {\n\n    this.age = age;\n\n    this.name = name;\n\n }\n\n}</code></pre><p><br /></p><p>上面Person类中age和name是属性，speak是行为。对象是类的事例，每个对象的属性都属于对象本身，但是每个对象的行为却是公共的。举个例子，比如我们现在基于Person类创建了两个对象，personA和personB：</p><p><br /></p><pre data-lang=\"java\"><code>Person personA = new Person(43, &quot;lixunhuan&quot;);\n\npersonA.speak(&quot;我是李寻欢&quot;);\n\nPerson personB = new Person(23, &quot;afei&quot;);\n\npersonB.speak(&quot;我是阿飞&quot;);</code></pre><p><br /></p><p>personA和personB有各自的姓名和年龄，但是有共同的行为：speak。想象一下，如果我们是Java语言的设计者，我们会怎么存储对象的行为和属性呢？</p><p><br /></p><p>“很简单，属性跟着对象走，每个对象都存一份。行为是公共的东西，抽离出来，单独放到一个地方。”</p><p><br /></p><p>“咦？抽离出公共的部分，跟代码复用好像啊。”</p><p><br /></p><p>“大道至简，很多东西本来都是殊途同归。”</p><p><br /></p><p>也就是说，第一步我们首先得找到存储对象行为的这个公共的地方。一番搜索之后，我们发现这样一段描述：</p><p><br /></p><blockquote><p>Method area is created on virtual machine startup, shared among all Java virtual machine threads and it is logically part of heap area. It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors.</p></blockquote><p><br /></p><p>Java的对象行为（方法、函数）是存储在方法区的。</p><p><br /></p><p>“方法区中的数据从哪来？”</p><p><br /></p><p>“方法区中的数据是类加载时从class文件中提取出来的。”</p><p><br /></p><p>“class文件从哪来？”</p><p><br /></p><p>“从Java或者其他符合JVM规范的源代码中编译而来。”</p><p><br /></p><p>“源代码从哪来？”</p><p><br /></p><p>“废话，当然是手写！”</p><p><br /></p><p>“倒着推，手写没问题，编译没问题，至于加载……有没有办法加载一个已经加载过的类呢？如果有的话，我们就能修改字节码中目标方法所在的区域，然后重新加载这个类，这样方法区中的对象行为（方法）就被改变了，而且不改变对象的属性，也不影响已经存在对象的状态，那么就可以搞定这个问题了。可是，这岂不是违背了JVM的类加载原理？毕竟我们不想改变ClassLoader。”</p><p><br /></p><p>“少年，可以去看看<code>java.lang.instrument.Instrumentation</code>。”</p><p><br /></p><h2 id=\"java.lang.instrument.Instrumentation\">java.lang.instrument.Instrumentation</h2><p><br /></p><p>看完文档之后，我们发现这么两个接口：redefineClasses和retransformClasses。一个是重新定义class，一个是修改class。这两个大同小异，看reDefineClasses的说明：</p><p><br /></p><blockquote><p>This method is used to replace the definition of a class without reference to the existing class file bytes, as one might do when recompiling from source for fix-and-continue debugging. Where the existing class file bytes are to be transformed (for example in bytecode instrumentation) retransformClasses should be used.</p></blockquote><p><br /></p><p>都是替换已经存在的class文件，redefineClasses是自己提供字节码文件替换掉已存在的class文件，retransformClasses是在已存在的字节码文件上修改后再替换之。</p><p><br /></p><p>当然，运行时直接替换类很不安全。比如新的class文件引用了一个不存在的类，或者把某个类的一个field给删除了等等，这些情况都会引发异常。所以如文档中所言，instrument存在诸多的限制：</p><p><br /></p><blockquote><p>The redefinition may change method bodies, the constant pool and attributes. The redefinition must not add, remove or rename fields or methods, change the signatures of methods, or change inheritance. These restrictions maybe be lifted in future versions. The class file bytes are not checked, verified and installed until after the transformations have been applied, if the resultant bytes are in error this method will throw an exception.</p></blockquote><p><br /></p><p>我们能做的基本上也就是简单修改方法内的一些行为，这对于我们开头的问题，打印一段日志来说，已经足够了。当然，我们除了通过reTransform来打印日志，还能做很多其他非常有用的事情，这个下文会进行介绍。</p><p><br /></p><p>那怎么得到我们需要的class文件呢？一个最简单的方法，是把修改后的Java文件重新编译一遍得到class文件，然后调用redefineClasses替换。但是对于没有（或者拿不到，或者不方便修改）源码的文件我们应该怎么办呢？其实对于JVM来说，不管是Java也好，Scala也好，任何一种符合JVM规范的语言的源代码，都可以编译成class文件。JVM的操作对象是class文件，而不是源码。所以，从这种意义上来讲，我们可以说“JVM跟语言无关”。既然如此，不管有没有源码，其实我们只需要修改class文件就行了。</p><p><br /></p><h2 id=\"30680ce1\">直接操作字节码</h2><p><br /></p><p>Java是软件开发人员能读懂的语言，class字节码是JVM能读懂的语言，class字节码最终会被JVM解释成机器能读懂的语言。无论哪种语言，都是人创造的。所以，理论上（实际上也确实如此）人能读懂上述任何一种语言，既然能读懂，自然能修改。只要我们愿意，我们完全可以跳过Java编译器，直接写字节码文件，只不过这并不符合时代的发展罢了，毕竟高级语言设计之始就是为我们人类所服务，其开发效率也比机器语言高很多。</p><p><br /></p><p>对于人类来说，字节码文件的可读性远远没有Java代码高。尽管如此，还是有一些杰出的程序员们创造出了可以用来直接编辑字节码的框架，提供接口可以让我们方便地操作字节码文件，进行注入修改类的方法，动态创造一个新的类等等操作。其中最著名的框架应该就是ASM了，cglib、Spring等框架中对于字节码的操作就建立在ASM之上。</p><p><br /></p><p>我们都知道，Spring的AOP是基于动态代理实现的，Spring会在运行时动态创建代理类，代理类中引用被代理类，在被代理的方法执行前后进行一些神秘的操作。那么，Spring是怎么在运行时创建代理类的呢？动态代理的美妙之处，就在于我们不必手动为每个需要被代理的类写代理类代码，Spring在运行时会根据需要动态地创造出一个类，这里创造的过程并非通过字符串写Java文件，然后编译成class文件，然后加载。Spring会直接“创造”一个class文件，然后加载，创造class文件的工具，就是ASM了。</p><p><br /></p><p>到这里，我们知道了用ASM框架直接操作class文件，在类中加一段打印日志的代码，然后调用retransformClasses就可以了。</p><p><br /></p><h2 id=\"BTrace\">BTrace</h2><p><br /></p><p>截止到目前，我们都是停留在理论描述的层面。那么如何进行实现呢？先来看几个问题：</p><p><br /></p><ol start=\"1\"><li>在我们的工程中，谁来做这个寻找字节码，修改字节码，然后reTransform的动作呢？我们并非先知，不可能知道未来有没有可能遇到文章开头的这种问题。考虑到性价比，我们也不可能在每个工程中都开发一段专门做这些修改字节码、重新加载字节码的代码。</li></ol><ol start=\"2\"><li>如果JVM不在本地，在远程呢？</li></ol><ol start=\"3\"><li>如果连ASM都不会用呢？能不能更通用一些，更“傻瓜”一些。</li></ol><p><br /></p><p>幸运的是，因为有BTrace的存在，我们不必自己写一套这样的工具了。什么是BTrace呢？<a href=\"https://github.com/btraceio/btrace\" target=\"_blank\">BTrace</a>已经开源，项目描述极其简短：</p><p><br /></p><blockquote><p>A safe, dynamic tracing tool for the Java platform.</p></blockquote><p><br /></p><p>BTrace是基于Java语言的一个安全的、可提供动态追踪服务的工具。BTrace基于ASM、Java Attach Api、Instruments开发，为用户提供了很多注解。依靠这些注解，我们可以编写BTrace脚本（简单的Java代码）达到我们想要的效果，而不必深陷于ASM对字节码的操作中不可自拔。</p><p><br /></p><p>看BTrace官方提供的一个简单例子：拦截所有java.io包中所有类中以read开头的方法，打印类名、方法名和参数名。当程序IO负载比较高的时候，就可以从输出的信息中看到是哪些类所引起，是不是很方便？</p><p><br /></p><pre data-lang=\"java\"><code>package com.sun.btrace.samples;\n\nimport com.sun.btrace.annotations.*;\nimport com.sun.btrace.AnyType;\nimport static com.sun.btrace.BTraceUtils.*;\n\n\n@BTrace public class ArgArray {\n    @OnMethod(\n        clazz=&quot;/java\\\\.io\\\\..*/&quot;,\n        method=&quot;/read.*/&quot;\n    )\n    public static void anyRead(@ProbeClassName String pcn, @ProbeMethodName String pmn, AnyType[] args) {\n        println(pcn);\n        println(pmn);\n        printArray(args);\n    }\n}</code></pre><p><br /></p><p>再来看另一个例子：每隔2秒打印截止到当前创建过的线程数。</p><p><br /></p><pre data-lang=\"java\"><code>package com.sun.btrace.samples;\n\nimport com.sun.btrace.annotations.*;\nimport static com.sun.btrace.BTraceUtils.*;\nimport com.sun.btrace.annotations.Export;\n\n \n@BTrace public class ThreadCounter {\n\n    \n    @Export private static long count;\n\n    @OnMethod(\n        clazz=&quot;java.lang.Thread&quot;,\n        method=&quot;start&quot;\n    ) \n    public static void onnewThread(@Self Thread t) {\n        \n        \n        count++;\n    }\n\n    @OnTimer(2000) \n    public static void ontimer() {\n        \n        \n        println(count);\n        \n        println(Counters.perfLong(&quot;btrace.com.sun.btrace.samples.ThreadCounter.count&quot;));\n    }\n}</code></pre><p><br /></p><p>看了上面的用法是不是有所启发？忍不住冒出来许多想法。比如查看HashMap什么时候会触发rehash，以及此时容器中有多少元素等等。</p><p><br /></p><p>有了BTrace，文章开头的问题可以得到完美的解决。至于BTrace具体有哪些功能，脚本怎么写，这些Git上BTrace工程中有大量的说明和举例，网上介绍BTrace用法的文章更是恒河沙数，这里就不再赘述了。</p><p><br /></p><p>我们明白了原理，又有好用的工具支持，剩下的就是发挥我们的创造力了，只需在合适的场景下合理地进行使用即可。</p><p><br /></p><p>既然BTrace能解决上面我们提到的所有问题，那么BTrace的架构是怎样的呢？</p><p><br /></p><p>BTrace主要有下面几个模块：</p><p><br /></p><ol start=\"1\"><li>BTrace脚本：利用BTrace定义的注解，我们可以很方便地根据需要进行脚本的开发。</li></ol><ol start=\"2\"><li>Compiler：将BTrace脚本编译成BTrace class文件。</li></ol><ol start=\"3\"><li>Client：将class文件发送到Agent。</li></ol><ol start=\"4\"><li>Agent：基于Java的Attach Api，Agent可以动态附着到一个运行的JVM上，然后开启一个BTrace Server，接收client发过来的BTrace脚本；解析脚本，然后根据脚本中的规则找到要修改的类；修改字节码后，调用Java Instrument的reTransform接口，完成对对象行为的修改并使之生效。</li></ol><p><br /></p><p>整个BTrace的架构大致如下：</p><p><br /></p><p><img src=\"https://p1.meituan.net/travelcube/25f19ea854450ce3964d20ae778f621a178594.jpg#align=left&amp;display=inline&amp;height=576&amp;originHeight=1190&amp;originWidth=1542&amp;status=done&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>BTrace工作流程</p><p><br /></p><p>BTrace最终借Instruments实现class的替换。如上文所说，出于安全考虑，Instruments在使用上存在诸多的限制，BTrace也不例外。BTrace对JVM来说是“只读的”，因此BTrace脚本的限制如下：</p><p><br /></p><ol start=\"1\"><li>不允许创建对象</li></ol><ol start=\"2\"><li>不允许创建数组</li></ol><ol start=\"3\"><li>不允许抛异常</li></ol><ol start=\"4\"><li>不允许catch异常</li></ol><ol start=\"5\"><li>不允许随意调用其他对象或者类的方法，只允许调用com.sun.btrace.BTraceUtils中提供的静态方法（一些数据处理和信息输出工具）</li></ol><ol start=\"6\"><li>不允许改变类的属性</li></ol><ol start=\"7\"><li>不允许有成员变量和方法，只允许存在<strong>static public void</strong>方法</li></ol><ol start=\"8\"><li>不允许有内部类、嵌套类</li></ol><ol start=\"9\"><li>不允许有同步方法和同步块</li></ol><ol start=\"10\"><li>不允许有循环</li></ol><ol start=\"11\"><li>不允许随意继承其他类（当然，java.lang.Object除外）</li></ol><ol start=\"12\"><li>不允许实现接口</li></ol><ol start=\"13\"><li>不允许使用assert</li></ol><ol start=\"14\"><li>不允许使用Class对象</li></ol><p><br /></p><p>如此多的限制，其实可以理解。BTrace要做的是，虽然修改了字节码，但是除了输出需要的信息外，对整个程序的正常运行并没有影响。</p><p><br /></p><h2 id=\"Arthas\">Arthas</h2><p><br /></p><p>BTrace脚本在使用上有一定的学习成本，如果能把一些常用的功能封装起来，对外直接提供简单的命令即可操作的话，那就再好不过了。阿里的工程师们早已想到这一点，就在去年（2018年9月份），阿里巴巴开源了自己的Java诊断工具——<a href=\"https://github.com/alibaba/arthas\" target=\"_blank\">Arthas</a>。Arthas提供简单的命令行操作，功能强大。究其背后的技术原理，和本文中提到的大致无二。Arthas的文档很全面，想详细了解的话可以戳<a href=\"https://alibaba.github.io/arthas/\" target=\"_blank\">这里</a>。</p><p><br /></p><p>本文旨在说明Java动态追踪技术的来龙去脉，掌握技术背后的原理之后，只要愿意，各位读者也可以开发出自己的“冰封王座”出来。</p><p><br /></p><h2 id=\"60dbeb74\">尾声：三生万物</h2><p><br /></p><p>现在，让我们试着站在更高的地方“俯瞰”这些问题。</p><p><br /></p><p>Java的Instruments给运行时的动态追踪留下了希望，Attach API则给运行时动态追踪提供了“出入口”，ASM则大大方便了“人类”操作Java字节码的操作。</p><p><br /></p><p>基于Instruments和Attach API前辈们创造出了诸如JProfiler、Jvisualvm、BTrace、Arthas这样的工具。以ASM为基础发展出了cglib、动态代理，继而是应用广泛的Spring AOP。</p><p><br /></p><p>Java是静态语言，运行时不允许改变数据结构。然而，Java 5引入Instruments，Java 6引入Attach API之后，事情开始变得不一样了。虽然存在诸多限制，然而，在前辈们的努力下，仅仅是利用预留的近似于“只读”的这一点点狭小的空间，仍然创造出了各种大放异彩的技术，极大地提高了软件开发人员定位问题的效率。</p><p><br /></p><p>计算机应该是人类有史以来最伟大的发明之一，从电磁感应磁生电，到高低电压模拟0和1的比特，再到二进制表示出几种基本类型，再到基本类型表示出无穷的对象，最后无穷的对象组合交互模拟现实生活乃至整个宇宙。</p><p><br /></p><p>两千五百年前，《道德经》有言：“道生一，一生二，二生三，三生万物。”</p><p><br /></p><p>两千五百年后，计算机的发展过程也大抵如此吧。</p><p><br /></p><h2 id=\"fb9bfd82\">作者简介</h2><p><br /></p><ul><li>高扬，2017年加入美团打车，负责美团打车结算系统的开发。</li></ul>",
    "body_lake": "<!doctype lake><h2 id=\"47f6f944\">引子</h2><p><br /></p><p>在遥远的希艾斯星球爪哇国塞沃城中，两名年轻的程序员正在为一件事情苦恼，程序出问题了，一时看不出问题出在哪里，于是有了以下对话：</p><p><br /></p><p>“Debug一下吧。”</p><p><br /></p><p>“线上机器，没开Debug端口。”</p><p><br /></p><p>“看日志，看看请求值和返回值分别是什么？”</p><p><br /></p><p>“那段代码没打印日志。”</p><p><br /></p><p>“改代码，加日志，重新发布一次。”</p><p><br /></p><p>“怀疑是线程池的问题，重启会破坏现场。”</p><p><br /></p><p>长达几十秒的沉默之后：“据说，排查问题的最高境界，就是只通过Review代码来发现问题。”</p><p><br /></p><p>比几十秒长几十倍的沉默之后：“我轮询了那段代码一十七遍之后，终于得出一个结论。”</p><p><br /></p><p>“结论是？”</p><p><br /></p><p>“我还没到达只通过Review代码就能发现问题的至高境界。”</p><p><br /></p><h2 id=\"46b7b012\">从JSP说起</h2><p><br /></p><p>对于大多数Java程序员来说，早期的时候，都会接触到一个叫做JSP（Java Server Pages）的技术。虽然这种技术，在前后端代码分离、前后端逻辑分离、前后端组织架构分离的今天来看，已经过时了，但是其中还是有一些有意思的东西，值得拿出来说一说。</p><p><br /></p><p>当时刚刚处于Java入门时期的我们，大多数精力似乎都放在了JSP的页面展示效果上了：</p><p><br /></p><p>“这个表格显示的行数不对”</p><p><br /></p><p>“原来是for循环写的有问题，改一下，刷新页面再试一遍”</p><p><br /></p><p>“嗯，好了，表格显示没问题了，但是，登录人的姓名没取到啊，是不是Sesstion获取有问题？”</p><p><br /></p><p>“有可能，我再改一下，一会儿再刷新试试”</p><p><br /></p><p>……</p><p><br /></p><p>在一遍一遍修改代码刷新浏览器页面重试的时候，我们自己也许并没有注意到一件很酷的事情：我们修改完代码，居然只是简单地刷新一遍浏览器页面，修改就生效了，整个过程并没有重启JVM。按照我们的常识，Java程序一般都是在启动时加载类文件，如果都像JSP这样修改完代码，不用重启就生效的话，那文章开头的问题就可以解决了啊：Java文件中加一段日志打印的代码，不重启就生效，既不破坏现场，又可以定位问题。忍不住试一试：修改、编译、替换class文件。额，不行，新改的代码并没有生效。那为什么偏偏JSP可以呢？让我们先来看看JSP的运行原理。</p><p><br /></p><p>当我们打开浏览器，请求访问一个JSP文件的时候，整个过程是这样的:</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fp1.meituan.net%2Ftravelcube%2F7fceed5036a40f4bd22ccf86629069c0118151.jpg%22%2C%22originWidth%22%3A1498%2C%22originHeight%22%3A782%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A746%2C%22height%22%3A389%7D\"></card></p><p><br /></p><p>JSP文件处理过程</p><p><br /></p><p>JSP文件修改过后，之所以能及时生效，是因为Web容器（Tomcat）会检查请求的JSP文件是否被更改过。如果发生过更改，那么就将JSP文件重新解析翻译成一个新的Sevlet类，并加载到JVM中。之后的请求，都会由这个新的Servet来处理。<strong><span style=\"color: #F5222D;\">这里有个问题，根据Java的类加载机制，在同一个ClassLoader中，类是不允许重复的。为了绕开这个限制，Web容器每次都会创建一个新的ClassLoader实例，来加载新编译的Servlet类。之后的请求都会由这个新的Servlet来处理，这样就实现了新旧JSP的切换。</span></strong></p><p><br /></p><p>HTTP服务是无状态的，所以JSP的场景基本上都是一次性消费，这种通过创建新的ClassLoader来“替换”class的做法行得通，但是对于其他应用，比如Spring框架，即便这样做了，对象多数是单例，对于内存中已经创建好的对象，我们无法通过这种创建新的ClassLoader实例的方法来修改对象行为。</p><p><br /></p><p>我就是想不重启应用加个日志打印，就这么难吗？</p><p><br /></p><h2 id=\"1125ee41\">Java对象行为</h2><p><br /></p><p>既然JSP的办法行不通，那我们来看看还有没有其他的办法。仔细想想，我们会发现，文章开头的问题本质上是动态改变内存中已存在对象的行为的问题。所以，我们得先弄清楚JVM中和对象行为有关的地方在哪里，有没有更改的可能性。</p><p><br /></p><p>我们都知道，对象使用两种东西来描述事物：行为和属性。举个例子：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Person%7B%5Cn%5Cn%20%20private%20int%20age%3B%5Cn%5Cn%20%20private%20String%20name%3B%5Cn%5Cn%20%20public%20void%20speak(String%20str)%20%7B%5Cn%5Cn%20%20%20%20System.out.println(str)%3B%5Cn%5Cn%20%7D%5Cn%5Cn%20public%20Person(int%20age%2C%20String%20name)%20%7B%5Cn%5Cn%20%20%20%20this.age%20%3D%20age%3B%5Cn%5Cn%20%20%20%20this.name%20%3D%20name%3B%5Cn%5Cn%20%7D%5Cn%5Cn%7D%22%7D\"></card><p><br /></p><p>上面Person类中age和name是属性，speak是行为。对象是类的事例，每个对象的属性都属于对象本身，但是每个对象的行为却是公共的。举个例子，比如我们现在基于Person类创建了两个对象，personA和personB：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22Person%20personA%20%3D%20new%20Person(43%2C%20%5C%22lixunhuan%5C%22)%3B%5Cn%5CnpersonA.speak(%5C%22%E6%88%91%E6%98%AF%E6%9D%8E%E5%AF%BB%E6%AC%A2%5C%22)%3B%5Cn%5CnPerson%20personB%20%3D%20new%20Person(23%2C%20%5C%22afei%5C%22)%3B%5Cn%5CnpersonB.speak(%5C%22%E6%88%91%E6%98%AF%E9%98%BF%E9%A3%9E%5C%22)%3B%22%7D\"></card><p><br /></p><p>personA和personB有各自的姓名和年龄，但是有共同的行为：speak。想象一下，如果我们是Java语言的设计者，我们会怎么存储对象的行为和属性呢？</p><p><br /></p><p>“很简单，属性跟着对象走，每个对象都存一份。行为是公共的东西，抽离出来，单独放到一个地方。”</p><p><br /></p><p>“咦？抽离出公共的部分，跟代码复用好像啊。”</p><p><br /></p><p>“大道至简，很多东西本来都是殊途同归。”</p><p><br /></p><p>也就是说，第一步我们首先得找到存储对象行为的这个公共的地方。一番搜索之后，我们发现这样一段描述：</p><p><br /></p><blockquote><p>Method area is created on virtual machine startup, shared among all Java virtual machine threads and it is logically part of heap area. It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors.</p></blockquote><p><br /></p><p>Java的对象行为（方法、函数）是存储在方法区的。</p><p><br /></p><p>“方法区中的数据从哪来？”</p><p><br /></p><p>“方法区中的数据是类加载时从class文件中提取出来的。”</p><p><br /></p><p>“class文件从哪来？”</p><p><br /></p><p>“从Java或者其他符合JVM规范的源代码中编译而来。”</p><p><br /></p><p>“源代码从哪来？”</p><p><br /></p><p>“废话，当然是手写！”</p><p><br /></p><p>“倒着推，手写没问题，编译没问题，至于加载……有没有办法加载一个已经加载过的类呢？如果有的话，我们就能修改字节码中目标方法所在的区域，然后重新加载这个类，这样方法区中的对象行为（方法）就被改变了，而且不改变对象的属性，也不影响已经存在对象的状态，那么就可以搞定这个问题了。可是，这岂不是违背了JVM的类加载原理？毕竟我们不想改变ClassLoader。”</p><p><br /></p><p>“少年，可以去看看<code>java.lang.instrument.Instrumentation</code>。”</p><p><br /></p><h2 id=\"java.lang.instrument.Instrumentation\">java.lang.instrument.Instrumentation</h2><p><br /></p><p>看完文档之后，我们发现这么两个接口：redefineClasses和retransformClasses。一个是重新定义class，一个是修改class。这两个大同小异，看reDefineClasses的说明：</p><p><br /></p><blockquote><p>This method is used to replace the definition of a class without reference to the existing class file bytes, as one might do when recompiling from source for fix-and-continue debugging. Where the existing class file bytes are to be transformed (for example in bytecode instrumentation) retransformClasses should be used.</p></blockquote><p><br /></p><p>都是替换已经存在的class文件，redefineClasses是自己提供字节码文件替换掉已存在的class文件，retransformClasses是在已存在的字节码文件上修改后再替换之。</p><p><br /></p><p>当然，运行时直接替换类很不安全。比如新的class文件引用了一个不存在的类，或者把某个类的一个field给删除了等等，这些情况都会引发异常。所以如文档中所言，instrument存在诸多的限制：</p><p><br /></p><blockquote><p>The redefinition may change method bodies, the constant pool and attributes. The redefinition must not add, remove or rename fields or methods, change the signatures of methods, or change inheritance. These restrictions maybe be lifted in future versions. The class file bytes are not checked, verified and installed until after the transformations have been applied, if the resultant bytes are in error this method will throw an exception.</p></blockquote><p><br /></p><p>我们能做的基本上也就是简单修改方法内的一些行为，这对于我们开头的问题，打印一段日志来说，已经足够了。当然，我们除了通过reTransform来打印日志，还能做很多其他非常有用的事情，这个下文会进行介绍。</p><p><br /></p><p>那怎么得到我们需要的class文件呢？一个最简单的方法，是把修改后的Java文件重新编译一遍得到class文件，然后调用redefineClasses替换。但是对于没有（或者拿不到，或者不方便修改）源码的文件我们应该怎么办呢？其实对于JVM来说，不管是Java也好，Scala也好，任何一种符合JVM规范的语言的源代码，都可以编译成class文件。JVM的操作对象是class文件，而不是源码。所以，从这种意义上来讲，我们可以说“JVM跟语言无关”。既然如此，不管有没有源码，其实我们只需要修改class文件就行了。</p><p><br /></p><h2 id=\"30680ce1\">直接操作字节码</h2><p><br /></p><p>Java是软件开发人员能读懂的语言，class字节码是JVM能读懂的语言，class字节码最终会被JVM解释成机器能读懂的语言。无论哪种语言，都是人创造的。所以，理论上（实际上也确实如此）人能读懂上述任何一种语言，既然能读懂，自然能修改。只要我们愿意，我们完全可以跳过Java编译器，直接写字节码文件，只不过这并不符合时代的发展罢了，毕竟高级语言设计之始就是为我们人类所服务，其开发效率也比机器语言高很多。</p><p><br /></p><p>对于人类来说，字节码文件的可读性远远没有Java代码高。尽管如此，还是有一些杰出的程序员们创造出了可以用来直接编辑字节码的框架，提供接口可以让我们方便地操作字节码文件，进行注入修改类的方法，动态创造一个新的类等等操作。其中最著名的框架应该就是ASM了，cglib、Spring等框架中对于字节码的操作就建立在ASM之上。</p><p><br /></p><p>我们都知道，Spring的AOP是基于动态代理实现的，Spring会在运行时动态创建代理类，代理类中引用被代理类，在被代理的方法执行前后进行一些神秘的操作。那么，Spring是怎么在运行时创建代理类的呢？动态代理的美妙之处，就在于我们不必手动为每个需要被代理的类写代理类代码，Spring在运行时会根据需要动态地创造出一个类，这里创造的过程并非通过字符串写Java文件，然后编译成class文件，然后加载。Spring会直接“创造”一个class文件，然后加载，创造class文件的工具，就是ASM了。</p><p><br /></p><p>到这里，我们知道了用ASM框架直接操作class文件，在类中加一段打印日志的代码，然后调用retransformClasses就可以了。</p><p><br /></p><h2 id=\"BTrace\">BTrace</h2><p><br /></p><p>截止到目前，我们都是停留在理论描述的层面。那么如何进行实现呢？先来看几个问题：</p><p><br /></p><ol start=\"1\"><li>在我们的工程中，谁来做这个寻找字节码，修改字节码，然后reTransform的动作呢？我们并非先知，不可能知道未来有没有可能遇到文章开头的这种问题。考虑到性价比，我们也不可能在每个工程中都开发一段专门做这些修改字节码、重新加载字节码的代码。</li></ol><ol start=\"2\"><li>如果JVM不在本地，在远程呢？</li></ol><ol start=\"3\"><li>如果连ASM都不会用呢？能不能更通用一些，更“傻瓜”一些。</li></ol><p><br /></p><p>幸运的是，因为有BTrace的存在，我们不必自己写一套这样的工具了。什么是BTrace呢？<a href=\"https://github.com/btraceio/btrace\" target=\"_blank\">BTrace</a>已经开源，项目描述极其简短：</p><p><br /></p><blockquote><p>A safe, dynamic tracing tool for the Java platform.</p></blockquote><p><br /></p><p>BTrace是基于Java语言的一个安全的、可提供动态追踪服务的工具。BTrace基于ASM、Java Attach Api、Instruments开发，为用户提供了很多注解。依靠这些注解，我们可以编写BTrace脚本（简单的Java代码）达到我们想要的效果，而不必深陷于ASM对字节码的操作中不可自拔。</p><p><br /></p><p>看BTrace官方提供的一个简单例子：拦截所有java.io包中所有类中以read开头的方法，打印类名、方法名和参数名。当程序IO负载比较高的时候，就可以从输出的信息中看到是哪些类所引起，是不是很方便？</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.sun.btrace.samples%3B%5Cn%5Cnimport%20com.sun.btrace.annotations.*%3B%5Cnimport%20com.sun.btrace.AnyType%3B%5Cnimport%20static%20com.sun.btrace.BTraceUtils.*%3B%5Cn%5Cn%5Cn%40BTrace%20public%20class%20ArgArray%20%7B%5Cn%20%20%20%20%40OnMethod(%5Cn%20%20%20%20%20%20%20%20clazz%3D%5C%22%2Fjava%5C%5C%5C%5C.io%5C%5C%5C%5C..*%2F%5C%22%2C%5Cn%20%20%20%20%20%20%20%20method%3D%5C%22%2Fread.*%2F%5C%22%5Cn%20%20%20%20)%5Cn%20%20%20%20public%20static%20void%20anyRead(%40ProbeClassName%20String%20pcn%2C%20%40ProbeMethodName%20String%20pmn%2C%20AnyType%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20println(pcn)%3B%5Cn%20%20%20%20%20%20%20%20println(pmn)%3B%5Cn%20%20%20%20%20%20%20%20printArray(args)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>再来看另一个例子：每隔2秒打印截止到当前创建过的线程数。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.sun.btrace.samples%3B%5Cn%5Cnimport%20com.sun.btrace.annotations.*%3B%5Cnimport%20static%20com.sun.btrace.BTraceUtils.*%3B%5Cnimport%20com.sun.btrace.annotations.Export%3B%5Cn%5Cn%20%5Cn%40BTrace%20public%20class%20ThreadCounter%20%7B%5Cn%5Cn%20%20%20%20%5Cn%20%20%20%20%40Export%20private%20static%20long%20count%3B%5Cn%5Cn%20%20%20%20%40OnMethod(%5Cn%20%20%20%20%20%20%20%20clazz%3D%5C%22java.lang.Thread%5C%22%2C%5Cn%20%20%20%20%20%20%20%20method%3D%5C%22start%5C%22%5Cn%20%20%20%20)%20%5Cn%20%20%20%20public%20static%20void%20onnewThread(%40Self%20Thread%20t)%20%7B%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20count%2B%2B%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40OnTimer(2000)%20%5Cn%20%20%20%20public%20static%20void%20ontimer()%20%7B%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20println(count)%3B%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20println(Counters.perfLong(%5C%22btrace.com.sun.btrace.samples.ThreadCounter.count%5C%22))%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>看了上面的用法是不是有所启发？忍不住冒出来许多想法。比如查看HashMap什么时候会触发rehash，以及此时容器中有多少元素等等。</p><p><br /></p><p>有了BTrace，文章开头的问题可以得到完美的解决。至于BTrace具体有哪些功能，脚本怎么写，这些Git上BTrace工程中有大量的说明和举例，网上介绍BTrace用法的文章更是恒河沙数，这里就不再赘述了。</p><p><br /></p><p>我们明白了原理，又有好用的工具支持，剩下的就是发挥我们的创造力了，只需在合适的场景下合理地进行使用即可。</p><p><br /></p><p>既然BTrace能解决上面我们提到的所有问题，那么BTrace的架构是怎样的呢？</p><p><br /></p><p>BTrace主要有下面几个模块：</p><p><br /></p><ol start=\"1\"><li>BTrace脚本：利用BTrace定义的注解，我们可以很方便地根据需要进行脚本的开发。</li></ol><ol start=\"2\"><li>Compiler：将BTrace脚本编译成BTrace class文件。</li></ol><ol start=\"3\"><li>Client：将class文件发送到Agent。</li></ol><ol start=\"4\"><li>Agent：基于Java的Attach Api，Agent可以动态附着到一个运行的JVM上，然后开启一个BTrace Server，接收client发过来的BTrace脚本；解析脚本，然后根据脚本中的规则找到要修改的类；修改字节码后，调用Java Instrument的reTransform接口，完成对对象行为的修改并使之生效。</li></ol><p><br /></p><p>整个BTrace的架构大致如下：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fp1.meituan.net%2Ftravelcube%2F25f19ea854450ce3964d20ae778f621a178594.jpg%22%2C%22originWidth%22%3A1542%2C%22originHeight%22%3A1190%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A746%2C%22height%22%3A576%7D\"></card></p><p><br /></p><p>BTrace工作流程</p><p><br /></p><p>BTrace最终借Instruments实现class的替换。如上文所说，出于安全考虑，Instruments在使用上存在诸多的限制，BTrace也不例外。BTrace对JVM来说是“只读的”，因此BTrace脚本的限制如下：</p><p><br /></p><ol start=\"1\"><li>不允许创建对象</li></ol><ol start=\"2\"><li>不允许创建数组</li></ol><ol start=\"3\"><li>不允许抛异常</li></ol><ol start=\"4\"><li>不允许catch异常</li></ol><ol start=\"5\"><li>不允许随意调用其他对象或者类的方法，只允许调用com.sun.btrace.BTraceUtils中提供的静态方法（一些数据处理和信息输出工具）</li></ol><ol start=\"6\"><li>不允许改变类的属性</li></ol><ol start=\"7\"><li>不允许有成员变量和方法，只允许存在<strong>static public void</strong>方法</li></ol><ol start=\"8\"><li>不允许有内部类、嵌套类</li></ol><ol start=\"9\"><li>不允许有同步方法和同步块</li></ol><ol start=\"10\"><li>不允许有循环</li></ol><ol start=\"11\"><li>不允许随意继承其他类（当然，java.lang.Object除外）</li></ol><ol start=\"12\"><li>不允许实现接口</li></ol><ol start=\"13\"><li>不允许使用assert</li></ol><ol start=\"14\"><li>不允许使用Class对象</li></ol><p><br /></p><p>如此多的限制，其实可以理解。BTrace要做的是，虽然修改了字节码，但是除了输出需要的信息外，对整个程序的正常运行并没有影响。</p><p><br /></p><h2 id=\"Arthas\">Arthas</h2><p><br /></p><p>BTrace脚本在使用上有一定的学习成本，如果能把一些常用的功能封装起来，对外直接提供简单的命令即可操作的话，那就再好不过了。阿里的工程师们早已想到这一点，就在去年（2018年9月份），阿里巴巴开源了自己的Java诊断工具——<a href=\"https://github.com/alibaba/arthas\" target=\"_blank\">Arthas</a>。Arthas提供简单的命令行操作，功能强大。究其背后的技术原理，和本文中提到的大致无二。Arthas的文档很全面，想详细了解的话可以戳<a href=\"https://alibaba.github.io/arthas/\" target=\"_blank\">这里</a>。</p><p><br /></p><p>本文旨在说明Java动态追踪技术的来龙去脉，掌握技术背后的原理之后，只要愿意，各位读者也可以开发出自己的“冰封王座”出来。</p><p><br /></p><h2 id=\"60dbeb74\">尾声：三生万物</h2><p><br /></p><p>现在，让我们试着站在更高的地方“俯瞰”这些问题。</p><p><br /></p><p>Java的Instruments给运行时的动态追踪留下了希望，Attach API则给运行时动态追踪提供了“出入口”，ASM则大大方便了“人类”操作Java字节码的操作。</p><p><br /></p><p>基于Instruments和Attach API前辈们创造出了诸如JProfiler、Jvisualvm、BTrace、Arthas这样的工具。以ASM为基础发展出了cglib、动态代理，继而是应用广泛的Spring AOP。</p><p><br /></p><p>Java是静态语言，运行时不允许改变数据结构。然而，Java 5引入Instruments，Java 6引入Attach API之后，事情开始变得不一样了。虽然存在诸多限制，然而，在前辈们的努力下，仅仅是利用预留的近似于“只读”的这一点点狭小的空间，仍然创造出了各种大放异彩的技术，极大地提高了软件开发人员定位问题的效率。</p><p><br /></p><p>计算机应该是人类有史以来最伟大的发明之一，从电磁感应磁生电，到高低电压模拟0和1的比特，再到二进制表示出几种基本类型，再到基本类型表示出无穷的对象，最后无穷的对象组合交互模拟现实生活乃至整个宇宙。</p><p><br /></p><p>两千五百年前，《道德经》有言：“道生一，一生二，二生三，三生万物。”</p><p><br /></p><p>两千五百年后，计算机的发展过程也大抵如此吧。</p><p><br /></p><h2 id=\"fb9bfd82\">作者简介</h2><p><br /></p><ul><li>高扬，2017年加入美团打车，负责美团打车结算系统的开发。</li></ul>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-03-25T08:31:07.000Z",
    "deleted_at": null,
    "created_at": "2019-03-25T05:50:26.000Z",
    "updated_at": "2019-06-04T09:31:00.000Z",
    "published_at": "2019-03-25T08:31:07.000Z",
    "first_published_at": null,
    "word_count": 4621,
    "cover": null,
    "description": "引子在遥远的希艾斯星球爪哇国塞沃城中，两名年轻的程序员正在为一件事情苦恼，程序出问题了，一时看不出问题出在哪里，于是有了以下对话：“Debug一下吧。”“线上机器，没开Debug端口。”“看日志，看看请求值和返回值分别是什么？”“那段代码没打印日志。”“改代码，加日志，重新发布一次。”“怀疑是...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1386062,
    "slug": "c6c95b21-8a52-1a3e-db71-98bdafeaf377",
    "title": "Java后端技术",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "markdown",
    "body": "Tomcat相关的面试题出场的几率并不高，正式因为如此，很多人忽略了对Tomcat相关技能的掌握，下面这一篇文章最早发布在知识星球，整理了Tomcat相关的系统架构，介绍了Server、Service、Connector、Container之间的关系，各个模块的功能，可以说把这几个掌握住了，Tomcat相关的面试题你就不会有任何问题了！另外，在面试的时候你还要有意识无意识的往Tomcat这个地方引，就比如说常见的Spring MVC的执行流程，一个URL的完整调用链路，这些相关的题目你是可以再往Tomcat处理请求的这个过程去说的！掌握注Tomcat这些技能了，面试官一定会佩服你的！\n\n另外，知识星球已经精心整理了50+的高频面试题，并且每天保证更新！每一个知识点都会由浅入深的讲解，让你知道其一也要知道其二，有兴趣的看一下，希望对你能有帮助！\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/UtWdDgynLdYXstpJFpfibrYFW23o1t4svr8W5Chl3uRTJnVajLREneTiaic2K6Fx5IS6wicBTJBFVD5JibVWgs0AAmA/640?wx_fmt=jpeg)\n\n学了本节之后你应该明白的是：\n\n*   Server、Service、Connector、Container四大组件之间的关系和联系，以及他们的主要功能点；\n    \n*   Tomcat执行的整体架构，请求是如何被一步步处理的；\n    \n*   Engine、Host、Context、Wrapper相关的概念关系；\n    \n*   Container是如何处理请求的；\n    \n*   Tomcat用到的相关设计模式；\n    \n\n**一、Tomcat顶层架构**\n----------------\n\n俗话说，站在巨人的肩膀上看世界，一般学习的时候也是先总览一下整体，然后逐个部分个个击破，最后形成思路，了解具体细节，Tomcat的结构很复杂，但是 Tomcat 非常的模块化，找到了 Tomcat最核心的模块，问题才可以游刃而解，了解了Tomcat的整体架构对以后深入了解Tomcat来说至关重要！\n\n先上一张Tomcat的顶层结构图（图A），如下：\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVnmrFvicJUdktDMOjLftibX92hCrVU4l8BeXQddwHSzSjYYo3TGLMx6Bw/640)\n\nTomcat中最顶层的容器是Server，代表着整个服务器，从上图中可以看出，一个Server可以包含至少一个Service，用于具体提供服务。\n\nService主要包含两个部分：Connector和Container。从上图中可以看出 Tomcat 的心脏就是这两个组件，他们的作用如下：\n\n1、Connector用于处理连接相关的事情，并提供Socket与Request和Response相关的转化; \n\n2、Container用于封装和管理Servlet，以及具体处理Request请求；\n\n**一个Tomcat中只有一个Server，一个Server可以包含多个Service，一个Service只有一个Container，但是可以有多个Connectors，这是因为一个服务可以有多个连接，如同时提供Http和Https链接，**也可以提供向相同协议不同端口的连接,示意图如下（Engine、Host、Context下边会说到）：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eV3liaby3t0N9CLiak7yHAJRLLtfDWzLRhWOlkicav8icmHZZ9vhibibw2SNIw/640)\n\n**多个 Connector 和一个 Container 就形成了一个 Service，有了 Service 就可以对外提供服务了，但是 Service 还要一个生存的环境，必须要有人能够给她生命、掌握其生死大权，那就非 Server 莫属了**！所以整个 Tomcat 的生命周期由 Server 控制。\n\n另外，上述的包含关系或者说是父子关系，都可以在tomcat的conf目录下的`server.xml`配置文件中看出，下图是删除了注释内容之后的一个完整的`server.xml`配置文件（Tomcat版本为8.0）\n\n![](https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVkg8tZohjJBocicx6vO5VrJz2eaibfxBDU1qtIAgxZoFNma9LicH961Azg/640)\n\n详细的配置文件文件内容可以到Tomcat官网查看：\n\nhttp://tomcat.apache.org/tomcat-8.0-doc/index.html\n\n上边的配置文件，还可以通过下边的一张结构图更清楚的理解：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVVnWgr1aWBsKCvPibeLWaVm5wAxR4TZJiaEEyRicQsicYyM2SYYwKRsR72Q/640)\n\nServer标签设置的端口号为8005，shutdown=”SHUTDOWN” ，表示在8005端口监听“SHUTDOWN”命令，如果接收到了就会关闭Tomcat。一个Server有一个Service，当然还可以进行配置，一个Service有多个，Service左边的内容都属于Container的，Service下边是Connector。\n\n**二、Tomcat顶层架构小结：**\n-------------------\n\n（1）Tomcat中只有一个Server，一个Server可以有多个Service，一个Service可以有多个Connector和一个Container；   \n（2） Server掌管着整个Tomcat的生死大权；   \n（4）Service 是对外提供服务的；   \n（5）Connector用于接受请求并将请求封装成Request和Response来具体处理；   \n（6）Container用于封装和管理Servlet，以及具体处理request请求；\n\n知道了整个Tomcat顶层的分层架构和各个组件之间的关系以及作用，对于绝大多数的开发人员来说Server和Service对我们来说确实很远，而我们开发中绝大部分进行配置的内容是属于Connector和Container的，所以接下来介绍一下Connector和Container。\n\n**三、Connector和Container的微妙关系**\n------------------------------\n\n由上述内容我们大致可以知道一个请求发送到Tomcat之后，首先经过Service然后会交给我们的Connector，Connector用于接收请求并将接收的请求封装为Request和Response来具体处理，Request和Response封装完之后再交由Container进行处理，Container处理完请求之后再返回给Connector，最后在由Connector通过Socket将处理的结果返回给客户端，这样整个请求的就处理完了！\n\nConnector最底层使用的是Socket来进行连接的，Request和Response是按照HTTP协议来封装的，所以Connector同时需要实现TCP/IP协议和HTTP协议！\n\nTomcat既然处理请求，那么肯定需要先接收到这个请求，接收请求这个东西我们首先就需要看一下Connector！\n\n**四、Connector架构分析**\n-------------------\n\nConnector用于接受请求并将请求封装成Request和Response，然后交给Container进行处理，Container处理完之后在交给Connector返回给客户端。\n\n因此，我们可以把Connector分为四个方面进行理解：\n\n（1）Connector如何接受请求的？ \n\n（2）如何将请求封装成Request和Response的？ \n\n（3）封装完之后的Request和Response如何交给Container进行处理的？ \n\n（4）Container处理完之后如何交给Connector并返回给客户端的？\n\n首先看一下Connector的结构图（图B），如下所示：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVeYEclGpQPpq18BPx7z4o731iaXdZHx2ESnC0CgyQEBWia78PbuIOsUtg/640)\n\nConnector就是使用ProtocolHandler来处理请求的，不同的ProtocolHandler代表不同的连接类型，比如：Http11Protocol使用的是普通Socket来连接的，Http11NioProtocol使用的是NioSocket来连接的。\n\n其中ProtocolHandler由包含了三个部件：Endpoint、Processor、Adapter。\n\n（1）Endpoint用来处理底层Socket的网络连接，Processor用于将Endpoint接收到的Socket封装成Request，Adapter用于将Request交给Container进行具体的处理。\n\n（2）Endpoint由于是处理底层的Socket网络连接，因此Endpoint是用来实现TCP/IP协议的，而Processor用来实现HTTP协议的，Adapter将请求适配到Servlet容器进行具体的处理。\n\n（3）Endpoint的抽象实现AbstractEndpoint里面定义的Acceptor和AsyncTimeout两个内部类和一个Handler接口。Acceptor用于监听请求，AsyncTimeout用于检查异步Request的超时，Handler用于处理接收到的Socket，在内部调用Processor进行处理。\n\n至此，我们应该很轻松的回答（1）（2）（3）的问题了，但是（4）还是不知道，那么我们就来看一下Container是如何进行处理的以及处理完之后是如何将处理完的结果返回给Connector的？\n\n**五、Container架构分析**\n-------------------\n\nContainer用于封装和管理Servlet，以及具体处理Request请求，在Connector内部包含了4个子容器，结构图如下（图C）：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVGIzOn5mxkVBQCQ0FDoBzbpsSUFwCvBpHtDmpBVF087HjnnficUXBjGw/640)\n\n4个子容器的作用分别是：\n\n（1）Engine：引擎，用来管理多个站点，一个Service最多只能有一个Engine； \n\n（2）Host：代表一个站点，也可以叫虚拟主机，通过配置Host就可以添加站点； \n\n（3）Context：代表一个应用程序，对应着平时开发的一套程序，或者一个WEB-INF目录以及下面的web.xml文件； \n\n（4）Wrapper：每一Wrapper封装着一个Servlet；\n\n下面找一个Tomcat的文件目录对照一下，如下图所示：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVzG6ScAiaicp62YI1Co6lOgyNVslAibJc7IHNibVib1S4K06D7bmq10icho8A/640)\n\nContext和Host的区别是Context表示一个应用，我们的Tomcat中默认的配置下webapps下的每一个文件夹目录都是一个Context，其中ROOT目录中存放着主应用，其他目录存放着子应用，而整个webapps就是一个Host站点。\n\n我们访问应用Context的时候，如果是ROOT下的则直接使用域名就可以访问，例如：www.ledouit.com,如果是Host（webapps）下的其他应用，则可以使用www.ledouit.com/docs进行访问，当然默认指定的根应用（ROOT）是可以进行设定的，只不过Host站点下默认的主营用是ROOT目录下的。\n\n看到这里我们知道Container是什么，但是还是不知道Container是如何进行处理的以及处理完之后是如何将处理完的结果返回给Connector的？别急！下边就开始探讨一下Container是如何进行处理的！\n\n**六、Container如何处理请求的**\n----------------------\n\nContainer处理请求是使用Pipeline-Valve管道来处理的！（Valve是阀门之意）\n\nPipeline-Valve是责任链模式，责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理，每个处理者负责做自己相应的处理，处理完之后将处理后的请求返回，再让下一个处理着继续处理。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eV05rnYJouVYYVYRA1HecPAQq665tNOc8ScURxoGHuFcADkk8SwVhcBA/640)\n\n但是！Pipeline-Valve使用的责任链模式和普通的责任链模式有些不同！区别主要有以下两点：\n\n（1）每个Pipeline都有特定的Valve，而且是在管道的最后一个执行，这个Valve叫做BaseValve，BaseValve是不可删除的；\n\n（2）在上层容器的管道的BaseValve中会调用下层容器的管道。\n\n我们知道Container包含四个子容器，而这四个子容器对应的BaseValve分别在：StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve。\n\nPipeline的处理流程图如下（图D）：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdbS6ribibqjHPC195DmZX0NBvfyQ2Dk9X4pQiakBQ7XYtDjQwUZpXqRibYzjRmHVRecm4epZW0d7ibITvg/640)\n\n（1）Connector在接收到请求后会首先调用最顶层容器的Pipeline来处理，这里的最顶层容器的Pipeline就是EnginePipeline（Engine的管道）；\n\n（2）在Engine的管道中依次会执行EngineValve1、EngineValve2等等，最后会执行StandardEngineValve，在StandardEngineValve中会调用Host管道，然后再依次执行Host的HostValve1、HostValve2等，最后在执行StandardHostValve，然后再依次调用Context的管道和Wrapper的管道，最后执行到StandardWrapperValve。\n\n（3）当执行到StandardWrapperValve的时候，会在StandardWrapperValve中创建FilterChain，并调用其doFilter方法来处理请求，这个FilterChain包含着我们配置的与请求相匹配的Filter和Servlet，其doFilter方法会依次调用所有的Filter的doFilter方法和Servlet的service方法，这样请求就得到了处理！\n\n（4）当所有的Pipeline-Valve都执行完之后，并且处理完了具体的请求，这个时候就可以将返回的结果交给Connector了，Connector在通过Socket的方式将结果返回给客户端。\n\n**七、总结**\n--------\n\n至此，我们已经对Tomcat的整体架构有了大致的了解，从图A、B、C、D可以看出来每一个组件的基本要素和作用。我们在脑海里应该有一个大概的轮廓了！如果你面试的时候，让你简单的聊一下Tomcat，上面的内容你能脱口而出吗？当你能够脱口而出的时候，这位面试官一定会对你刮目相看的！\n\n**热门内容：**  \n\n1、[IDEA一定要懂的30个快捷键！](http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488558&idx=1&sn=4b7b62ea5bb4c08a8735014a8644e077&chksm=e9c5ed9fdeb26489ae527baf9222fbb0126baf466e4a153ffe0f6b772be05a517a0656772f44&scene=21#wechat_redirect)\n\n2、[Dubbo面试18问！这些你都会吗？](http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488553&idx=1&sn=b5802508e51caf332c7e319b59feb8a3&chksm=e9c5ed98deb2648e552b57843b491a6090c4ff6a42eaf44f3108e49b901d9a8d897f47454f1f&scene=21#wechat_redirect)\n\n3、[狗屎一样的代码！快，重构我！](http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488509&idx=1&sn=8be2883dc27168fed77e21c8f6ab4a83&chksm=e9c5ea4cdeb2635a2755709e032d2f9359d3bce7b4dfe61b2e7ba10e934a70905f8c09d8ada9&scene=21#wechat_redirect)\n\n4、[2019年超详细的Spring Boot知识清单](https://mp.weixin.qq.com/s?__biz=MzUxOTAxODc2Mg==&mid=2247484315&idx=1&sn=8887407ad653da90df560ad1187fbb7b&scene=21#wechat_redirect)\n\n5、[你选择25k的996还是18k的965？](http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488507&idx=1&sn=9a522f7bfdd6d37a156b5cc6f61aa814&chksm=e9c5ea4adeb2635c9f7eabf83fea6f333f6333900d9b9a2bff258a683fea0784d86ccfe17df8&scene=21#wechat_redirect)\n\n6、[并不是所有的 Github 写在简历上都加分](https://mp.weixin.qq.com/s?__biz=MzUxOTAxODc2Mg==&mid=2247484287&idx=1&sn=401829455b5ec966074254f6be083a4e&scene=21#wechat_redirect)\n\n7、[你还在 Select \\* 吗？](http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488502&idx=1&sn=29c9f097027c18192ad3d83ed60bd402&chksm=e9c5ea47deb26351c77a1a503e88cbc8a5bf38318f1d7b6c53ed73c8d6f9879f97d5daaf6ce1&scene=21#wechat_redirect)\n\n8、[杭州互联网人的冬天](http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488498&idx=1&sn=58a3467469eb8f5f6f24456bf681f592&chksm=e9c5ea43deb263553f2f42f470d97be693d1587b9c9b576183ea5e863e703f896e47f6b9b1e4&scene=21#wechat_redirect)\n\n![](https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLda8TWB0rCPDRObrOHuCRKNtndsCNwbsMejpEvEwWTibrcy9xhLbFwbOCarFP5NrZTOZtzGFjeLh6yg/640?)",
    "body_draft": "",
    "body_html": "<p>Tomcat相关的面试题出场的几率并不高，正式因为如此，很多人忽略了对Tomcat相关技能的掌握，下面这一篇文章最早发布在知识星球，整理了Tomcat相关的系统架构，介绍了Server、Service、Connector、Container之间的关系，各个模块的功能，可以说把这几个掌握住了，Tomcat相关的面试题你就不会有任何问题了！另外，在面试的时候你还要有意识无意识的往Tomcat这个地方引，就比如说常见的Spring MVC的执行流程，一个URL的完整调用链路，这些相关的题目你是可以再往Tomcat处理请求的这个过程去说的！掌握注Tomcat这些技能了，面试官一定会佩服你的！</p><p><br /></p><p>另外，知识星球已经精心整理了50+的高频面试题，并且每天保证更新！每一个知识点都会由浅入深的讲解，让你知道其一也要知道其二，有兴趣的看一下，希望对你能有帮助！</p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/UtWdDgynLdYXstpJFpfibrYFW23o1t4svr8W5Chl3uRTJnVajLREneTiaic2K6Fx5IS6wicBTJBFVD5JibVWgs0AAmA/640?wx_fmt=jpeg#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>学了本节之后你应该明白的是：</p><p><br /></p><ul><li>\nServer、Service、Connector、Container四大组件之间的关系和联系，以及他们的主要功能点；\n</li></ul><ul><li>\nTomcat执行的整体架构，请求是如何被一步步处理的；\n</li></ul><ul><li>\nEngine、Host、Context、Wrapper相关的概念关系；\n</li></ul><ul><li>\nContainer是如何处理请求的；\n</li></ul><ul><li>\nTomcat用到的相关设计模式；\n</li></ul><p><br /></p><a name=\"-strong-一、Tomcat顶层架构--strong-\"></a><h2 id=\"8d97dfc3\"><strong>一、Tomcat顶层架构</strong></h2><p><br /></p><p>俗话说，站在巨人的肩膀上看世界，一般学习的时候也是先总览一下整体，然后逐个部分个个击破，最后形成思路，了解具体细节，Tomcat的结构很复杂，但是 Tomcat 非常的模块化，找到了 Tomcat最核心的模块，问题才可以游刃而解，了解了Tomcat的整体架构对以后深入了解Tomcat来说至关重要！</p><p><br /></p><p>先上一张Tomcat的顶层结构图（图A），如下：</p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVnmrFvicJUdktDMOjLftibX92hCrVU4l8BeXQddwHSzSjYYo3TGLMx6Bw/640#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>Tomcat中最顶层的容器是Server，代表着整个服务器，从上图中可以看出，一个Server可以包含至少一个Service，用于具体提供服务。</p><p><br /></p><p>Service主要包含两个部分：Connector和Container。从上图中可以看出 Tomcat 的心脏就是这两个组件，他们的作用如下：</p><p><br /></p><p>1、Connector用于处理连接相关的事情，并提供Socket与Request和Response相关的转化;</p><p><br /></p><p>2、Container用于封装和管理Servlet，以及具体处理Request请求；</p><p><br /></p><p><strong>一个Tomcat中只有一个Server，一个Server可以包含多个Service，一个Service只有一个Container，但是可以有多个Connectors，这是因为一个服务可以有多个连接，如同时提供Http和Https链接，</strong>也可以提供向相同协议不同端口的连接,示意图如下（Engine、Host、Context下边会说到）：</p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eV3liaby3t0N9CLiak7yHAJRLLtfDWzLRhWOlkicav8icmHZZ9vhibibw2SNIw/640#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p><strong>多个 Connector 和一个 Container 就形成了一个 Service，有了 Service 就可以对外提供服务了，但是 Service 还要一个生存的环境，必须要有人能够给她生命、掌握其生死大权，那就非 Server 莫属了</strong>！所以整个 Tomcat 的生命周期由 Server 控制。</p><p><br /></p><p>另外，上述的包含关系或者说是父子关系，都可以在tomcat的conf目录下的<code>server.xml</code>配置文件中看出，下图是删除了注释内容之后的一个完整的<code>server.xml</code>配置文件（Tomcat版本为8.0）</p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVkg8tZohjJBocicx6vO5VrJz2eaibfxBDU1qtIAgxZoFNma9LicH961Azg/640#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>详细的配置文件文件内容可以到Tomcat官网查看：</p><p><br /></p><p><a href=\"http://tomcat.apache.org/tomcat-8.0-doc/index.html\" target=\"_blank\">http://tomcat.apache.org/tomcat-8.0-doc/index.html</a></p><p><br /></p><p>上边的配置文件，还可以通过下边的一张结构图更清楚的理解：</p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVVnWgr1aWBsKCvPibeLWaVm5wAxR4TZJiaEEyRicQsicYyM2SYYwKRsR72Q/640#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>Server标签设置的端口号为8005，shutdown=”SHUTDOWN” ，表示在8005端口监听“SHUTDOWN”命令，如果接收到了就会关闭Tomcat。一个Server有一个Service，当然还可以进行配置，一个Service有多个，Service左边的内容都属于Container的，Service下边是Connector。</p><p><br /></p><a name=\"-strong-二、Tomcat顶层架构小结：--strong-\"></a><h2 id=\"98124906\"><strong>二、Tomcat顶层架构小结：</strong></h2><p><br /></p><p>（1）Tomcat中只有一个Server，一个Server可以有多个Service，一个Service可以有多个Connector和一个Container； <br />\n（2） Server掌管着整个Tomcat的生死大权； <br />\n（4）Service 是对外提供服务的； <br />\n（5）Connector用于接受请求并将请求封装成Request和Response来具体处理； <br />\n（6）Container用于封装和管理Servlet，以及具体处理request请求；</p><p><br /></p><p>知道了整个Tomcat顶层的分层架构和各个组件之间的关系以及作用，对于绝大多数的开发人员来说Server和Service对我们来说确实很远，而我们开发中绝大部分进行配置的内容是属于Connector和Container的，所以接下来介绍一下Connector和Container。</p><p><br /></p><a name=\"-strong-三、Connector和Container的微妙关系--strong-\"></a><h2 id=\"996575b9\"><strong>三、Connector和Container的微妙关系</strong></h2><p><br /></p><p>由上述内容我们大致可以知道一个请求发送到Tomcat之后，首先经过Service然后会交给我们的Connector，Connector用于接收请求并将接收的请求封装为Request和Response来具体处理，Request和Response封装完之后再交由Container进行处理，Container处理完请求之后再返回给Connector，最后在由Connector通过Socket将处理的结果返回给客户端，这样整个请求的就处理完了！</p><p><br /></p><p>Connector最底层使用的是Socket来进行连接的，Request和Response是按照HTTP协议来封装的，所以Connector同时需要实现TCP/IP协议和HTTP协议！</p><p><br /></p><p>Tomcat既然处理请求，那么肯定需要先接收到这个请求，接收请求这个东西我们首先就需要看一下Connector！</p><p><br /></p><a name=\"-strong-四、Connector架构分析--strong-\"></a><h2 id=\"4cdfdebf\"><strong>四、Connector架构分析</strong></h2><p><br /></p><p>Connector用于接受请求并将请求封装成Request和Response，然后交给Container进行处理，Container处理完之后在交给Connector返回给客户端。</p><p><br /></p><p>因此，我们可以把Connector分为四个方面进行理解：</p><p><br /></p><p>（1）Connector如何接受请求的？</p><p><br /></p><p>（2）如何将请求封装成Request和Response的？</p><p><br /></p><p>（3）封装完之后的Request和Response如何交给Container进行处理的？</p><p><br /></p><p>（4）Container处理完之后如何交给Connector并返回给客户端的？</p><p><br /></p><p>首先看一下Connector的结构图（图B），如下所示：</p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVeYEclGpQPpq18BPx7z4o731iaXdZHx2ESnC0CgyQEBWia78PbuIOsUtg/640#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>Connector就是使用ProtocolHandler来处理请求的，不同的ProtocolHandler代表不同的连接类型，比如：Http11Protocol使用的是普通Socket来连接的，Http11NioProtocol使用的是NioSocket来连接的。</p><p><br /></p><p>其中ProtocolHandler由包含了三个部件：Endpoint、Processor、Adapter。</p><p><br /></p><p>（1）Endpoint用来处理底层Socket的网络连接，Processor用于将Endpoint接收到的Socket封装成Request，Adapter用于将Request交给Container进行具体的处理。</p><p><br /></p><p>（2）Endpoint由于是处理底层的Socket网络连接，因此Endpoint是用来实现TCP/IP协议的，而Processor用来实现HTTP协议的，Adapter将请求适配到Servlet容器进行具体的处理。</p><p><br /></p><p>（3）Endpoint的抽象实现AbstractEndpoint里面定义的Acceptor和AsyncTimeout两个内部类和一个Handler接口。Acceptor用于监听请求，AsyncTimeout用于检查异步Request的超时，Handler用于处理接收到的Socket，在内部调用Processor进行处理。</p><p><br /></p><p>至此，我们应该很轻松的回答（1）（2）（3）的问题了，但是（4）还是不知道，那么我们就来看一下Container是如何进行处理的以及处理完之后是如何将处理完的结果返回给Connector的？</p><p><br /></p><a name=\"-strong-五、Container架构分析--strong-\"></a><h2 id=\"ab87875b\"><strong>五、Container架构分析</strong></h2><p><br /></p><p>Container用于封装和管理Servlet，以及具体处理Request请求，在Connector内部包含了4个子容器，结构图如下（图C）：</p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVGIzOn5mxkVBQCQ0FDoBzbpsSUFwCvBpHtDmpBVF087HjnnficUXBjGw/640#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>4个子容器的作用分别是：</p><p><br /></p><p>（1）Engine：引擎，用来管理多个站点，一个Service最多只能有一个Engine；</p><p><br /></p><p>（2）Host：代表一个站点，也可以叫虚拟主机，通过配置Host就可以添加站点；</p><p><br /></p><p>（3）Context：代表一个应用程序，对应着平时开发的一套程序，或者一个WEB-INF目录以及下面的web.xml文件；</p><p><br /></p><p>（4）Wrapper：每一Wrapper封装着一个Servlet；</p><p><br /></p><p>下面找一个Tomcat的文件目录对照一下，如下图所示：</p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eVzG6ScAiaicp62YI1Co6lOgyNVslAibJc7IHNibVib1S4K06D7bmq10icho8A/640#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>Context和Host的区别是Context表示一个应用，我们的Tomcat中默认的配置下webapps下的每一个文件夹目录都是一个Context，其中ROOT目录中存放着主应用，其他目录存放着子应用，而整个webapps就是一个Host站点。</p><p><br /></p><p>我们访问应用Context的时候，如果是ROOT下的则直接使用域名就可以访问，例如：www.ledouit.com,如果是Host（webapps）下的其他应用，则可以使用www.ledouit.com/docs进行访问，当然默认指定的根应用（ROOT）是可以进行设定的，只不过Host站点下默认的主营用是ROOT目录下的。</p><p><br /></p><p>看到这里我们知道Container是什么，但是还是不知道Container是如何进行处理的以及处理完之后是如何将处理完的结果返回给Connector的？别急！下边就开始探讨一下Container是如何进行处理的！</p><p><br /></p><a name=\"-strong-六、Container如何处理请求的--strong-\"></a><h2 id=\"2a0fd1f9\"><strong>六、Container如何处理请求的</strong></h2><p><br /></p><p>Container处理请求是使用Pipeline-Valve管道来处理的！（Valve是阀门之意）</p><p><br /></p><p>Pipeline-Valve是责任链模式，责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理，每个处理者负责做自己相应的处理，处理完之后将处理后的请求返回，再让下一个处理着继续处理。</p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdZlz44rysyrVpFqrW1Yc0eV05rnYJouVYYVYRA1HecPAQq665tNOc8ScURxoGHuFcADkk8SwVhcBA/640#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>但是！Pipeline-Valve使用的责任链模式和普通的责任链模式有些不同！区别主要有以下两点：</p><p><br /></p><p>（1）每个Pipeline都有特定的Valve，而且是在管道的最后一个执行，这个Valve叫做BaseValve，BaseValve是不可删除的；</p><p><br /></p><p>（2）在上层容器的管道的BaseValve中会调用下层容器的管道。</p><p><br /></p><p>我们知道Container包含四个子容器，而这四个子容器对应的BaseValve分别在：StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve。</p><p><br /></p><p>Pipeline的处理流程图如下（图D）：</p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLdbS6ribibqjHPC195DmZX0NBvfyQ2Dk9X4pQiakBQ7XYtDjQwUZpXqRibYzjRmHVRecm4epZW0d7ibITvg/640#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>（1）Connector在接收到请求后会首先调用最顶层容器的Pipeline来处理，这里的最顶层容器的Pipeline就是EnginePipeline（Engine的管道）；</p><p><br /></p><p>（2）在Engine的管道中依次会执行EngineValve1、EngineValve2等等，最后会执行StandardEngineValve，在StandardEngineValve中会调用Host管道，然后再依次执行Host的HostValve1、HostValve2等，最后在执行StandardHostValve，然后再依次调用Context的管道和Wrapper的管道，最后执行到StandardWrapperValve。</p><p><br /></p><p>（3）当执行到StandardWrapperValve的时候，会在StandardWrapperValve中创建FilterChain，并调用其doFilter方法来处理请求，这个FilterChain包含着我们配置的与请求相匹配的Filter和Servlet，其doFilter方法会依次调用所有的Filter的doFilter方法和Servlet的service方法，这样请求就得到了处理！</p><p><br /></p><p>（4）当所有的Pipeline-Valve都执行完之后，并且处理完了具体的请求，这个时候就可以将返回的结果交给Connector了，Connector在通过Socket的方式将结果返回给客户端。</p><p><br /></p><a name=\"-strong-七、总结--strong-\"></a><h2 id=\"4b884351\"><strong>七、总结</strong></h2><p><br /></p><p>至此，我们已经对Tomcat的整体架构有了大致的了解，从图A、B、C、D可以看出来每一个组件的基本要素和作用。我们在脑海里应该有一个大概的轮廓了！如果你面试的时候，让你简单的聊一下Tomcat，上面的内容你能脱口而出吗？当你能够脱口而出的时候，这位面试官一定会对你刮目相看的！</p><p><br /></p><p><strong>热门内容：</strong></p><p><br /></p><p>1、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&amp;mid=2247488558&amp;idx=1&amp;sn=4b7b62ea5bb4c08a8735014a8644e077&amp;chksm=e9c5ed9fdeb26489ae527baf9222fbb0126baf466e4a153ffe0f6b772be05a517a0656772f44&amp;scene=21#wechat_redirect\" target=\"_blank\">IDEA一定要懂的30个快捷键！</a></p><p><br /></p><p>2、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&amp;mid=2247488553&amp;idx=1&amp;sn=b5802508e51caf332c7e319b59feb8a3&amp;chksm=e9c5ed98deb2648e552b57843b491a6090c4ff6a42eaf44f3108e49b901d9a8d897f47454f1f&amp;scene=21#wechat_redirect\" target=\"_blank\">Dubbo面试18问！这些你都会吗？</a></p><p><br /></p><p>3、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&amp;mid=2247488509&amp;idx=1&amp;sn=8be2883dc27168fed77e21c8f6ab4a83&amp;chksm=e9c5ea4cdeb2635a2755709e032d2f9359d3bce7b4dfe61b2e7ba10e934a70905f8c09d8ada9&amp;scene=21#wechat_redirect\" target=\"_blank\">狗屎一样的代码！快，重构我！</a></p><p><br /></p><p>4、<a href=\"https://mp.weixin.qq.com/s?__biz=MzUxOTAxODc2Mg==&amp;mid=2247484315&amp;idx=1&amp;sn=8887407ad653da90df560ad1187fbb7b&amp;scene=21#wechat_redirect\" target=\"_blank\">2019年超详细的Spring Boot知识清单</a></p><p><br /></p><p>5、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&amp;mid=2247488507&amp;idx=1&amp;sn=9a522f7bfdd6d37a156b5cc6f61aa814&amp;chksm=e9c5ea4adeb2635c9f7eabf83fea6f333f6333900d9b9a2bff258a683fea0784d86ccfe17df8&amp;scene=21#wechat_redirect\" target=\"_blank\">你选择25k的996还是18k的965？</a></p><p><br /></p><p>6、<a href=\"https://mp.weixin.qq.com/s?__biz=MzUxOTAxODc2Mg==&amp;mid=2247484287&amp;idx=1&amp;sn=401829455b5ec966074254f6be083a4e&amp;scene=21#wechat_redirect\" target=\"_blank\">并不是所有的 Github 写在简历上都加分</a></p><p><br /></p><p>7、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&amp;mid=2247488502&amp;idx=1&amp;sn=29c9f097027c18192ad3d83ed60bd402&amp;chksm=e9c5ea47deb26351c77a1a503e88cbc8a5bf38318f1d7b6c53ed73c8d6f9879f97d5daaf6ce1&amp;scene=21#wechat_redirect\" target=\"_blank\">你还在 Select * 吗？</a></p><p><br /></p><p>8、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&amp;mid=2247488498&amp;idx=1&amp;sn=58a3467469eb8f5f6f24456bf681f592&amp;chksm=e9c5ea43deb263553f2f42f470d97be693d1587b9c9b576183ea5e863e703f896e47f6b9b1e4&amp;scene=21#wechat_redirect\" target=\"_blank\">杭州互联网人的冬天</a></p><p><br /></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/UtWdDgynLda8TWB0rCPDRObrOHuCRKNtndsCNwbsMejpEvEwWTibrcy9xhLbFwbOCarFP5NrZTOZtzGFjeLh6yg/640?#alt=\" style=\"max-width: 600px;\" /></p>",
    "body_lake": "<!doctype lake><p>Tomcat相关的面试题出场的几率并不高，正式因为如此，很多人忽略了对Tomcat相关技能的掌握，下面这一篇文章最早发布在知识星球，整理了Tomcat相关的系统架构，介绍了Server、Service、Connector、Container之间的关系，各个模块的功能，可以说把这几个掌握住了，Tomcat相关的面试题你就不会有任何问题了！另外，在面试的时候你还要有意识无意识的往Tomcat这个地方引，就比如说常见的Spring MVC的执行流程，一个URL的完整调用链路，这些相关的题目你是可以再往Tomcat处理请求的这个过程去说的！掌握注Tomcat这些技能了，面试官一定会佩服你的！</p><p><br /></p><p>另外，知识星球已经精心整理了50+的高频面试题，并且每天保证更新！每一个知识点都会由浅入深的讲解，让你知道其一也要知道其二，有兴趣的看一下，希望对你能有帮助！</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FUtWdDgynLdYXstpJFpfibrYFW23o1t4svr8W5Chl3uRTJnVajLREneTiaic2K6Fx5IS6wicBTJBFVD5JibVWgs0AAmA%2F640%3Fwx_fmt%3Djpeg%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>学了本节之后你应该明白的是：</p><p><br /></p><ul><li>\nServer、Service、Connector、Container四大组件之间的关系和联系，以及他们的主要功能点；\n</li></ul><ul><li>\nTomcat执行的整体架构，请求是如何被一步步处理的；\n</li></ul><ul><li>\nEngine、Host、Context、Wrapper相关的概念关系；\n</li></ul><ul><li>\nContainer是如何处理请求的；\n</li></ul><ul><li>\nTomcat用到的相关设计模式；\n</li></ul><p><br /></p><a name=\"-strong-一、Tomcat顶层架构--strong-\"></a><h2 id=\"8d97dfc3\"><strong>一、Tomcat顶层架构</strong></h2><p><br /></p><p>俗话说，站在巨人的肩膀上看世界，一般学习的时候也是先总览一下整体，然后逐个部分个个击破，最后形成思路，了解具体细节，Tomcat的结构很复杂，但是 Tomcat 非常的模块化，找到了 Tomcat最核心的模块，问题才可以游刃而解，了解了Tomcat的整体架构对以后深入了解Tomcat来说至关重要！</p><p><br /></p><p>先上一张Tomcat的顶层结构图（图A），如下：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FUtWdDgynLdZlz44rysyrVpFqrW1Yc0eVnmrFvicJUdktDMOjLftibX92hCrVU4l8BeXQddwHSzSjYYo3TGLMx6Bw%2F640%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>Tomcat中最顶层的容器是Server，代表着整个服务器，从上图中可以看出，一个Server可以包含至少一个Service，用于具体提供服务。</p><p><br /></p><p>Service主要包含两个部分：Connector和Container。从上图中可以看出 Tomcat 的心脏就是这两个组件，他们的作用如下：</p><p><br /></p><p>1、Connector用于处理连接相关的事情，并提供Socket与Request和Response相关的转化;</p><p><br /></p><p>2、Container用于封装和管理Servlet，以及具体处理Request请求；</p><p><br /></p><p><strong>一个Tomcat中只有一个Server，一个Server可以包含多个Service，一个Service只有一个Container，但是可以有多个Connectors，这是因为一个服务可以有多个连接，如同时提供Http和Https链接，</strong>也可以提供向相同协议不同端口的连接,示意图如下（Engine、Host、Context下边会说到）：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FUtWdDgynLdZlz44rysyrVpFqrW1Yc0eV3liaby3t0N9CLiak7yHAJRLLtfDWzLRhWOlkicav8icmHZZ9vhibibw2SNIw%2F640%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p><strong>多个 Connector 和一个 Container 就形成了一个 Service，有了 Service 就可以对外提供服务了，但是 Service 还要一个生存的环境，必须要有人能够给她生命、掌握其生死大权，那就非 Server 莫属了</strong>！所以整个 Tomcat 的生命周期由 Server 控制。</p><p><br /></p><p>另外，上述的包含关系或者说是父子关系，都可以在tomcat的conf目录下的<code>server.xml</code>配置文件中看出，下图是删除了注释内容之后的一个完整的<code>server.xml</code>配置文件（Tomcat版本为8.0）</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FUtWdDgynLdZlz44rysyrVpFqrW1Yc0eVkg8tZohjJBocicx6vO5VrJz2eaibfxBDU1qtIAgxZoFNma9LicH961Azg%2F640%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>详细的配置文件文件内容可以到Tomcat官网查看：</p><p><br /></p><p><a href=\"http://tomcat.apache.org/tomcat-8.0-doc/index.html\" target=\"_blank\">http://tomcat.apache.org/tomcat-8.0-doc/index.html</a></p><p><br /></p><p>上边的配置文件，还可以通过下边的一张结构图更清楚的理解：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FUtWdDgynLdZlz44rysyrVpFqrW1Yc0eVVnWgr1aWBsKCvPibeLWaVm5wAxR4TZJiaEEyRicQsicYyM2SYYwKRsR72Q%2F640%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>Server标签设置的端口号为8005，shutdown=”SHUTDOWN” ，表示在8005端口监听“SHUTDOWN”命令，如果接收到了就会关闭Tomcat。一个Server有一个Service，当然还可以进行配置，一个Service有多个，Service左边的内容都属于Container的，Service下边是Connector。</p><p><br /></p><a name=\"-strong-二、Tomcat顶层架构小结：--strong-\"></a><h2 id=\"98124906\"><strong>二、Tomcat顶层架构小结：</strong></h2><p><br /></p><p>（1）Tomcat中只有一个Server，一个Server可以有多个Service，一个Service可以有多个Connector和一个Container； <br />\n（2） Server掌管着整个Tomcat的生死大权； <br />\n（4）Service 是对外提供服务的； <br />\n（5）Connector用于接受请求并将请求封装成Request和Response来具体处理； <br />\n（6）Container用于封装和管理Servlet，以及具体处理request请求；</p><p><br /></p><p>知道了整个Tomcat顶层的分层架构和各个组件之间的关系以及作用，对于绝大多数的开发人员来说Server和Service对我们来说确实很远，而我们开发中绝大部分进行配置的内容是属于Connector和Container的，所以接下来介绍一下Connector和Container。</p><p><br /></p><a name=\"-strong-三、Connector和Container的微妙关系--strong-\"></a><h2 id=\"996575b9\"><strong>三、Connector和Container的微妙关系</strong></h2><p><br /></p><p>由上述内容我们大致可以知道一个请求发送到Tomcat之后，首先经过Service然后会交给我们的Connector，Connector用于接收请求并将接收的请求封装为Request和Response来具体处理，Request和Response封装完之后再交由Container进行处理，Container处理完请求之后再返回给Connector，最后在由Connector通过Socket将处理的结果返回给客户端，这样整个请求的就处理完了！</p><p><br /></p><p>Connector最底层使用的是Socket来进行连接的，Request和Response是按照HTTP协议来封装的，所以Connector同时需要实现TCP/IP协议和HTTP协议！</p><p><br /></p><p>Tomcat既然处理请求，那么肯定需要先接收到这个请求，接收请求这个东西我们首先就需要看一下Connector！</p><p><br /></p><a name=\"-strong-四、Connector架构分析--strong-\"></a><h2 id=\"4cdfdebf\"><strong>四、Connector架构分析</strong></h2><p><br /></p><p>Connector用于接受请求并将请求封装成Request和Response，然后交给Container进行处理，Container处理完之后在交给Connector返回给客户端。</p><p><br /></p><p>因此，我们可以把Connector分为四个方面进行理解：</p><p><br /></p><p>（1）Connector如何接受请求的？</p><p><br /></p><p>（2）如何将请求封装成Request和Response的？</p><p><br /></p><p>（3）封装完之后的Request和Response如何交给Container进行处理的？</p><p><br /></p><p>（4）Container处理完之后如何交给Connector并返回给客户端的？</p><p><br /></p><p>首先看一下Connector的结构图（图B），如下所示：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FUtWdDgynLdZlz44rysyrVpFqrW1Yc0eVeYEclGpQPpq18BPx7z4o731iaXdZHx2ESnC0CgyQEBWia78PbuIOsUtg%2F640%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>Connector就是使用ProtocolHandler来处理请求的，不同的ProtocolHandler代表不同的连接类型，比如：Http11Protocol使用的是普通Socket来连接的，Http11NioProtocol使用的是NioSocket来连接的。</p><p><br /></p><p>其中ProtocolHandler由包含了三个部件：Endpoint、Processor、Adapter。</p><p><br /></p><p>（1）Endpoint用来处理底层Socket的网络连接，Processor用于将Endpoint接收到的Socket封装成Request，Adapter用于将Request交给Container进行具体的处理。</p><p><br /></p><p>（2）Endpoint由于是处理底层的Socket网络连接，因此Endpoint是用来实现TCP/IP协议的，而Processor用来实现HTTP协议的，Adapter将请求适配到Servlet容器进行具体的处理。</p><p><br /></p><p>（3）Endpoint的抽象实现AbstractEndpoint里面定义的Acceptor和AsyncTimeout两个内部类和一个Handler接口。Acceptor用于监听请求，AsyncTimeout用于检查异步Request的超时，Handler用于处理接收到的Socket，在内部调用Processor进行处理。</p><p><br /></p><p>至此，我们应该很轻松的回答（1）（2）（3）的问题了，但是（4）还是不知道，那么我们就来看一下Container是如何进行处理的以及处理完之后是如何将处理完的结果返回给Connector的？</p><p><br /></p><a name=\"-strong-五、Container架构分析--strong-\"></a><h2 id=\"ab87875b\"><strong>五、Container架构分析</strong></h2><p><br /></p><p>Container用于封装和管理Servlet，以及具体处理Request请求，在Connector内部包含了4个子容器，结构图如下（图C）：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FUtWdDgynLdZlz44rysyrVpFqrW1Yc0eVGIzOn5mxkVBQCQ0FDoBzbpsSUFwCvBpHtDmpBVF087HjnnficUXBjGw%2F640%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>4个子容器的作用分别是：</p><p><br /></p><p>（1）Engine：引擎，用来管理多个站点，一个Service最多只能有一个Engine；</p><p><br /></p><p>（2）Host：代表一个站点，也可以叫虚拟主机，通过配置Host就可以添加站点；</p><p><br /></p><p>（3）Context：代表一个应用程序，对应着平时开发的一套程序，或者一个WEB-INF目录以及下面的web.xml文件；</p><p><br /></p><p>（4）Wrapper：每一Wrapper封装着一个Servlet；</p><p><br /></p><p>下面找一个Tomcat的文件目录对照一下，如下图所示：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FUtWdDgynLdZlz44rysyrVpFqrW1Yc0eVzG6ScAiaicp62YI1Co6lOgyNVslAibJc7IHNibVib1S4K06D7bmq10icho8A%2F640%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>Context和Host的区别是Context表示一个应用，我们的Tomcat中默认的配置下webapps下的每一个文件夹目录都是一个Context，其中ROOT目录中存放着主应用，其他目录存放着子应用，而整个webapps就是一个Host站点。</p><p><br /></p><p>我们访问应用Context的时候，如果是ROOT下的则直接使用域名就可以访问，例如：www.ledouit.com,如果是Host（webapps）下的其他应用，则可以使用www.ledouit.com/docs进行访问，当然默认指定的根应用（ROOT）是可以进行设定的，只不过Host站点下默认的主营用是ROOT目录下的。</p><p><br /></p><p>看到这里我们知道Container是什么，但是还是不知道Container是如何进行处理的以及处理完之后是如何将处理完的结果返回给Connector的？别急！下边就开始探讨一下Container是如何进行处理的！</p><p><br /></p><a name=\"-strong-六、Container如何处理请求的--strong-\"></a><h2 id=\"2a0fd1f9\"><strong>六、Container如何处理请求的</strong></h2><p><br /></p><p>Container处理请求是使用Pipeline-Valve管道来处理的！（Valve是阀门之意）</p><p><br /></p><p>Pipeline-Valve是责任链模式，责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理，每个处理者负责做自己相应的处理，处理完之后将处理后的请求返回，再让下一个处理着继续处理。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FUtWdDgynLdZlz44rysyrVpFqrW1Yc0eV05rnYJouVYYVYRA1HecPAQq665tNOc8ScURxoGHuFcADkk8SwVhcBA%2F640%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>但是！Pipeline-Valve使用的责任链模式和普通的责任链模式有些不同！区别主要有以下两点：</p><p><br /></p><p>（1）每个Pipeline都有特定的Valve，而且是在管道的最后一个执行，这个Valve叫做BaseValve，BaseValve是不可删除的；</p><p><br /></p><p>（2）在上层容器的管道的BaseValve中会调用下层容器的管道。</p><p><br /></p><p>我们知道Container包含四个子容器，而这四个子容器对应的BaseValve分别在：StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve。</p><p><br /></p><p>Pipeline的处理流程图如下（图D）：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FUtWdDgynLdbS6ribibqjHPC195DmZX0NBvfyQ2Dk9X4pQiakBQ7XYtDjQwUZpXqRibYzjRmHVRecm4epZW0d7ibITvg%2F640%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>（1）Connector在接收到请求后会首先调用最顶层容器的Pipeline来处理，这里的最顶层容器的Pipeline就是EnginePipeline（Engine的管道）；</p><p><br /></p><p>（2）在Engine的管道中依次会执行EngineValve1、EngineValve2等等，最后会执行StandardEngineValve，在StandardEngineValve中会调用Host管道，然后再依次执行Host的HostValve1、HostValve2等，最后在执行StandardHostValve，然后再依次调用Context的管道和Wrapper的管道，最后执行到StandardWrapperValve。</p><p><br /></p><p>（3）当执行到StandardWrapperValve的时候，会在StandardWrapperValve中创建FilterChain，并调用其doFilter方法来处理请求，这个FilterChain包含着我们配置的与请求相匹配的Filter和Servlet，其doFilter方法会依次调用所有的Filter的doFilter方法和Servlet的service方法，这样请求就得到了处理！</p><p><br /></p><p>（4）当所有的Pipeline-Valve都执行完之后，并且处理完了具体的请求，这个时候就可以将返回的结果交给Connector了，Connector在通过Socket的方式将结果返回给客户端。</p><p><br /></p><a name=\"-strong-七、总结--strong-\"></a><h2 id=\"4b884351\"><strong>七、总结</strong></h2><p><br /></p><p>至此，我们已经对Tomcat的整体架构有了大致的了解，从图A、B、C、D可以看出来每一个组件的基本要素和作用。我们在脑海里应该有一个大概的轮廓了！如果你面试的时候，让你简单的聊一下Tomcat，上面的内容你能脱口而出吗？当你能够脱口而出的时候，这位面试官一定会对你刮目相看的！</p><p><br /></p><p><strong>热门内容：</strong></p><p><br /></p><p>1、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488558&idx=1&sn=4b7b62ea5bb4c08a8735014a8644e077&chksm=e9c5ed9fdeb26489ae527baf9222fbb0126baf466e4a153ffe0f6b772be05a517a0656772f44&scene=21#wechat_redirect\" target=\"_blank\">IDEA一定要懂的30个快捷键！</a></p><p><br /></p><p>2、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488553&idx=1&sn=b5802508e51caf332c7e319b59feb8a3&chksm=e9c5ed98deb2648e552b57843b491a6090c4ff6a42eaf44f3108e49b901d9a8d897f47454f1f&scene=21#wechat_redirect\" target=\"_blank\">Dubbo面试18问！这些你都会吗？</a></p><p><br /></p><p>3、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488509&idx=1&sn=8be2883dc27168fed77e21c8f6ab4a83&chksm=e9c5ea4cdeb2635a2755709e032d2f9359d3bce7b4dfe61b2e7ba10e934a70905f8c09d8ada9&scene=21#wechat_redirect\" target=\"_blank\">狗屎一样的代码！快，重构我！</a></p><p><br /></p><p>4、<a href=\"https://mp.weixin.qq.com/s?__biz=MzUxOTAxODc2Mg==&mid=2247484315&idx=1&sn=8887407ad653da90df560ad1187fbb7b&scene=21#wechat_redirect\" target=\"_blank\">2019年超详细的Spring Boot知识清单</a></p><p><br /></p><p>5、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488507&idx=1&sn=9a522f7bfdd6d37a156b5cc6f61aa814&chksm=e9c5ea4adeb2635c9f7eabf83fea6f333f6333900d9b9a2bff258a683fea0784d86ccfe17df8&scene=21#wechat_redirect\" target=\"_blank\">你选择25k的996还是18k的965？</a></p><p><br /></p><p>6、<a href=\"https://mp.weixin.qq.com/s?__biz=MzUxOTAxODc2Mg==&mid=2247484287&idx=1&sn=401829455b5ec966074254f6be083a4e&scene=21#wechat_redirect\" target=\"_blank\">并不是所有的 Github 写在简历上都加分</a></p><p><br /></p><p>7、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488502&idx=1&sn=29c9f097027c18192ad3d83ed60bd402&chksm=e9c5ea47deb26351c77a1a503e88cbc8a5bf38318f1d7b6c53ed73c8d6f9879f97d5daaf6ce1&scene=21#wechat_redirect\" target=\"_blank\">你还在 Select * 吗？</a></p><p><br /></p><p>8、<a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488498&idx=1&sn=58a3467469eb8f5f6f24456bf681f592&chksm=e9c5ea43deb263553f2f42f470d97be693d1587b9c9b576183ea5e863e703f896e47f6b9b1e4&scene=21#wechat_redirect\" target=\"_blank\">杭州互联网人的冬天</a></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FUtWdDgynLda8TWB0rCPDRObrOHuCRKNtndsCNwbsMejpEvEwWTibrcy9xhLbFwbOCarFP5NrZTOZtzGFjeLh6yg%2F640%3F%22%2C%22alt%22%3A%22%22%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-03-18T03:02:56.000Z",
    "deleted_at": null,
    "created_at": "2019-03-18T03:02:56.000Z",
    "updated_at": "2019-03-18T03:02:56.000Z",
    "published_at": "2019-03-18T03:02:56.000Z",
    "first_published_at": null,
    "word_count": 2959,
    "cover": null,
    "description": "Tomcat相关的面试题出场的几率并不高，正式因为如此，很多人忽略了对Tomcat相关技能的掌握，下面这一篇文章最早发布在知识星球，整理了Tomcat相关的系统架构，介绍了Server、Service、Connector、Container之间的关系，各个模块的功能，可以说把这几个掌握住了，T...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1374643,
    "slug": "a514c8cd-bb82-ca78-4228-b175a289e1e2",
    "title": "面试官最爱的volatile关键字 - 掘金",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "在Java相关的岗位面试中，很多面试官都喜欢考察面试者对Java并发的了解程度，而以**volatile**关键字作为一个小的切入点，往往可以一问到底，把Java内存模型（JMM），Java并发编程的一些特性都牵扯出来，深入地话还可以考察JVM底层实现以及操作系统的相关知识。\n\n下面我们以一次假想的面试过程，来深入了解下volitile关键字吧！\n\n<a name=\"8fd431e9\"></a>\n## 面试官: Java并发这块了解的怎么样？说说你对volatile关键字的理解\n\n就我理解的而言，被volatile修饰的共享变量，就具有了以下两点特性：\n\n1 . 保证了不同线程对该变量操作的内存可见性;\n\n2 . 禁止指令重排序\n\n<a name=\"94428d3f\"></a>\n## 面试官: 能不能详细说下什么是内存可见性，什么又是重排序呢？\n\n这个聊起来可就多了，我还是从Java内存模型说起吧。\n\nJava虚拟机规范试图定义一种Java内存模型（JMM）,来屏蔽掉各种硬件和操作系统的内存访问差异，让Java程序在各种平台上都能达到一致的内存访问效果。简单来说，由于CPU执行指令的速度是很快的，但是内存访问的速度就慢了很多，相差的不是一个数量级，所以搞处理器的那群大佬们又在CPU里加了好几层高速缓存。\n\n在Java内存模型里，对上述的优化又进行了一波抽象。JMM规定所有变量都是存在主存中的，类似于上面提到的普通内存，每个线程又包含自己的工作内存，方便理解就可以看成CPU上的寄存器或者高速缓存。所以线程的操作都是以工作内存为主，它们只能访问自己的工作内存，且工作前后都要把值在同步回主内存。\n\n这么说得我自己都有些不清楚了，拿张纸画一下：\n\n![](https://user-gold-cdn.xitu.io/2017/12/9/1603a6fae545a200?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&display=inline&height=439&originHeight=480&originWidth=816&status=done&width=746)\n\n在线程执行时，首先会从主存中read变量值，再load到工作内存中的副本中，然后再传给处理器执行，执行完毕后再给工作内存中的副本赋值，随后工作内存再把值传回给主存，主存中的值才更新。\n\n使用工作内存和主存，虽然加快的速度，但是也带来了一些问题。比如看下面一个例子：\n\n```\ni = i + 1;\n```\n\n假设i初值为0，当只有一个线程执行它时，结果肯定得到1，当两个线程执行时，会得到结果2吗？这倒不一定了。可能存在这种情况：\n\n```\n线程1： load i from 主存    // i = 0\n        i + 1  // i = 1\n线程2： load i from主存  // 因为线程1还没将i的值写回主存，所以i还是0\n        i +  1 //i = 1\n线程1:  save i to 主存\n线程2： save i to 主存\n```\n\n如果两个线程按照上面的执行流程，那么i最后的值居然是1了。如果最后的写回生效的慢，你再读取i的值，都可能是0，这就是缓存不一致问题。\n\n下面就要提到你刚才问到的问题了，JMM主要就是围绕着如何在并发过程中如何处理原子性、可见性和有序性这3个特征来建立的，通过解决这三个问题，可以解除缓存不一致的问题。而volatile跟可见性和有序性都有关。\n\n<a name=\"2abbbb2d\"></a>\n## 面试官：那你具体说说这三个特性呢？\n\n**1 . 原子性(Atomicity)：** Java中，对基本数据类型的读取和赋值操作是原子性操作，所谓原子性操作就是指这些操作是不可中断的，要做一定做完，要么就没有执行。 比如：\n\n```\ni = 2;\nj = i;\ni++;\ni = i + 1；\n```\n\n上面4个操作中，`i=2`是读取操作，必定是原子性操作，`j=i`你以为是原子性操作，其实吧，分为两步，一是读取i的值，然后再赋值给j,这就是2步操作了，称不上原子操作，`i++`和`i = i + 1`其实是等效的，读取i的值，加1，再写回主存，那就是3步操作了。所以上面的举例中，最后的值可能出现多种情况，就是因为满足不了原子性。\n\n这么说来，只有简单的读取，赋值是原子操作，还只能是用数字赋值，用变量的话还多了一步读取变量值的操作。有个例外是，虚拟机规范中允许对64位数据类型(long和double)，分为2次32为的操作来处理，但是最新JDK实现还是实现了原子操作的。\n\nJMM只实现了基本的原子性，像上面`i++`那样的操作，必须借助于`synchronized`和`Lock`来保证整块代码的原子性了。线程在释放锁之前，必然会把`i`的值刷回到主存的。\n\n**2 . 可见性(Visibility)：**\n\n说到可见性，Java就是利用volatile来提供可见性的。 当一个变量被volatile修饰时，那么对它的修改会立刻刷新到主存，当其它线程需要读取该变量时，会去内存中读取新值。而普通变量则不能保证这一点。\n\n其实通过synchronized和Lock也能够保证可见性，线程在释放锁之前，会把共享变量值都刷回主存，但是synchronized和Lock的开销都更大。\n\n**3 . 有序性（Ordering）**\n\nJMM是允许编译器和处理器对指令重排序的，但是规定了as-if-serial语义，即不管怎么重排序，程序的执行结果不能改变。比如下面的程序段：\n\n```\ndouble pi = 3.14;    //A\ndouble r = 1;        //B\ndouble s= pi * r * r;//C\n```\n\n上面的语句，可以按照`A->B->C`执行，结果为3.14,但是也可以按照`B->A->C`的顺序执行，因为A、B是两句独立的语句，而C则依赖于A、B，所以A、B可以重排序，但是C却不能排到A、B的前面。JMM保证了重排序不会影响到单线程的执行，但是在多线程中却容易出问题。\n\n比如这样的代码:\n\n```\nint a = 0;\nbool flag = false;\n\npublic void write() {\n    a = 2;              //1\n    flag = true;        //2\n}\n\npublic void multiply() {\n    if (flag) {         //3\n        int ret = a * a;//4\n    }\n    \n}\n```\n\n假如有两个线程执行上述代码段，线程1先执行write，随后线程2再执行multiply，最后ret的值一定是4吗？结果不一定：\n\n![](https://user-gold-cdn.xitu.io/2017/12/9/1603ac14eb04b21e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&display=inline&height=586&originHeight=586&originWidth=623&status=done&width=623)\n\n如图所示，write方法里的1和2做了重排序，线程1先对flag赋值为true，随后执行到线程2，ret直接计算出结果，再到线程1，这时候a才赋值为2,很明显迟了一步。\n\n这时候可以为flag加上volatile关键字，禁止重排序，可以确保程序的“有序性”，也可以上重量级的synchronized和Lock来保证有序性,它们能保证那一块区域里的代码都是一次性执行完毕的。\n\n另外，JMM具备一些先天的**有序性**,即不需要通过任何手段就可以保证的有序性，通常称为**happens-before**原则。`<<JSR-133：Java Memory Model and Thread Specification>>`定义了如下happens-before规则：\n\n> 1. **程序顺序规则**： 一个线程中的每个操作，happens-before于该线程中的任意后续操作\n> 2. **监视器锁规则**：对一个线程的解锁，happens-before于随后对这个线程的加锁\n> 3. **volatile变量规则**： 对一个volatile域的写，happens-before于后续对这个volatile域的读\n> 4. **传递性**：如果A happens-before B ,且 B happens-before C, 那么 A happens-before C\n> 5. **start()规则**： 如果线程A执行操作`ThreadB_start()`(启动线程B) , 那么A线程的`ThreadB_start()`happens-before 于B中的任意操作\n> 6. **join()原则**： 如果A执行`ThreadB.join()`并且成功返回，那么线程B中的任意操作happens-before于线程A从`ThreadB.join()`操作成功返回。\n> 7. **interrupt()原则**： 对线程`interrupt()`方法的调用先行发生于被中断线程代码检测到中断事件的发生，可以通过`Thread.interrupted()`方法检测是否有中断发生\n> 8. **finalize()原则**：一个对象的初始化完成先行发生于它的`finalize()`方法的开始\n\n\n第1条规则程序顺序规则是说在一个线程里，所有的操作都是按顺序的，但是在JMM里其实只要执行结果一样，是允许重排序的，这边的happens-before强调的重点也是单线程执行结果的正确性，但是无法保证多线程也是如此。\n\n第2条规则监视器规则其实也好理解，就是在加锁之前，确定这个锁之前已经被释放了，才能继续加锁。\n\n第3条规则，就适用到所讨论的volatile，如果一个线程先去写一个变量，另外一个线程再去读，那么写入操作一定在读操作之前。\n\n第4条规则，就是happens-before的传递性。\n\n后面几条就不再一一赘述了。\n\n<a name=\"c22bb887\"></a>\n## 面试官：volatile关键字如何满足并发编程的三大特性的？\n\n那就要重提volatile变量规则： 对一个volatile域的写，happens-before于后续对这个volatile域的读。 这条再拎出来说，其实就是如果一个变量声明成是volatile的，那么当我读变量时，总是能读到它的最新值，这里最新值是指不管其它哪个线程对该变量做了写操作，都会立刻被更新到主存里，我也能从主存里读到这个刚写入的值。也就是说volatile关键字可以保证可见性以及有序性。\n\n继续拿上面的一段代码举例：\n\n```\nint a = 0;\nbool flag = false;\n\npublic void write() {\n   a = 2;              //1\n   flag = true;        //2\n}\n\npublic void multiply() {\n   if (flag) {         //3\n       int ret = a * a;//4\n   }\n   \n}\n```\n\n这段代码不仅仅受到重排序的困扰，即使1、2没有重排序。3也不会那么顺利的执行的。假设还是线程1先执行`write`操作，线程2再执行`multiply`操作，由于线程1是在工作内存里把flag赋值为1，不一定立刻写回主存，所以线程2执行时，`multiply`再从主存读flag值，仍然可能为false，那么括号里的语句将不会执行。\n\n如果改成下面这样：\n\n```\nint a = 0;\nvolatile bool flag = false;\n\npublic void write() {\n   a = 2;              //1\n   flag = true;        //2\n}\n\npublic void multiply() {\n   if (flag) {         //3\n       int ret = a * a;//4\n   }\n}\n```\n\n那么线程1先执行`write`,线程2再执行`multiply`。根据happens-before原则，这个过程会满足以下3类规则：\n\n1. 程序顺序规则：1 happens-before 2; 3 happens-before 4; (volatile限制了指令重排序，所以1 在2 之前执行)\n2. volatile规则：2 happens-before 3\n3. 传递性规则：1 happens-before 4\n\n从内存语义上来看\n\n**当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存**\n\n**当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效，线程接下来将从主内存中读取共享变量。**\n\n<a name=\"b45fdb60\"></a>\n## 面试官：volatile的两点内存语义能保证可见性和有序性，但是能保证原子性吗？\n\n首先我回答是不能保证原子性，要是说能保证，也只是对单个volatile变量的读/写具有原子性，但是对于类似volatile++这样的复合操作就无能为力了，比如下面的例子：\n\n```\npublic class Test {\n    public volatile int inc = 0;\n \n    public void increase() {\n        inc++;\n    }\n \n    public static void main(String[] args) {\n        final Test test = new Test();\n        for(int i=0;i<10;i++){\n            new Thread(){\n                public void run() {\n                    for(int j=0;j<1000;j++)\n                        test.increase();\n                };\n            }.start();\n        }\n \n        while(Thread.activeCount()>1)  //保证前面的线程都执行完\n            Thread.yield();\n        System.out.println(test.inc);\n}\n```\n\n按道理来说结果是10000，但是运行下很可能是个小于10000的值。有人可能会说volatile不是保证了可见性啊，一个线程对inc的修改，另外一个线程应该立刻看到啊！可是这里的操作inc++是个复合操作啊，包括读取inc的值，对其自增，然后再写回主存。\n\n假设线程A，读取了inc的值为10，这时候被阻塞了，因为没有对变量进行修改，触发不了volatile规则。\n\n线程B此时也读读inc的值，主存里inc的值依旧为10，做自增，然后立刻就被写回主存了，为11。\n\n此时又轮到线程A执行，由于工作内存里保存的是10，所以继续做自增，再写回主存，11又被写了一遍。所以虽然两个线程执行了两次increase()，结果却只加了一次。\n\n有人说，**volatile不是会使缓存行无效的吗**？但是这里线程A读取到线程B也进行操作之前，并没有修改inc值，所以线程B读取的时候，还是读的10。\n\n又有人说，线程B将11写回主存，**不会把线程A的缓存行设为无效吗**？但是线程A的读取操作已经做过了啊，只有在做读取操作时，发现自己缓存行无效，才会去读主存的值，所以这里线程A只能继续做自增了。\n\n综上所述，在这种复合操作的情景下，原子性的功能是维持不了了。但是volatile在上面那种设置flag值的例子里，由于对flag的读/写操作都是单步的，所以还是能保证原子性的。\n\n要想保证原子性，只能借助于synchronized,Lock以及并发包下的atomic的原子操作类了，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。\n\n<a name=\"c71242b4\"></a>\n## 面试官：说的还可以，那你知道volatile底层的实现机制？\n\n如果把加入volatile关键字的代码和未加入volatile关键字的代码都生成汇编代码，会发现加入volatile关键字的代码会多出一个lock前缀指令。\n\nlock前缀指令实际相当于一个内存屏障，内存屏障提供了以下功能：\n\n> 1 . 重排序时不能把后面的指令重排序到内存屏障之前的位置\n> 2 . 使得本CPU的Cache写入内存\n> 3 . 写入动作也会引起别的CPU或者别的内核无效化其Cache，相当于让新写入的值对别的线程可见。\n\n\n<a name=\"d66555f0\"></a>\n## 面试官： 你在哪里会使用到volatile，举两个例子呢？\n\n1. 状态量标记，就如上面对flag的标记，我重新提一下：\n<br />int a = 0;<br />\nvolatile bool flag = false;\n<br />public void write() {<br />\na = 2;              //1<br />\nflag = true;        //2<br />\n}\n<br />public void multiply() {<br />\nif (flag) {         //3<br />\nint ret = a * a;//4<br />\n}<br />\n}\n\n这种对变量的读写操作，标记为volatile可以保证修改对线程立刻可见。比synchronized,Lock有一定的效率提升。\n\n2.单例模式的实现，典型的双重检查锁定（DCL）\n\n```\nclass Singleton{\n    private volatile static Singleton instance = null;\n \n    private Singleton() {\n \n    }\n \n    public static Singleton getInstance() {\n        if(instance==null) {\n            synchronized (Singleton.class) {\n                if(instance==null)\n                    instance = new Singleton();\n            }\n        }\n        return instance;\n    }\n}\n```\n\n这是一种懒汉的单例模式，使用时才创建对象，而且为了避免初始化操作的指令重排序，给instance加上了volatile。\n\n<a name=\"b8389362\"></a>\n## 面试官： 来给我们说说几种单例模式的写法吧，还有上面这种用法，你再详细说说呢？\n\n好吧，这又是一个话题了，volatile的问题终于问完了。。。看看你掌握了没\n",
    "body_draft": "",
    "body_html": "<p>在Java相关的岗位面试中，很多面试官都喜欢考察面试者对Java并发的了解程度，而以<strong>volatile</strong>关键字作为一个小的切入点，往往可以一问到底，把Java内存模型（JMM），Java并发编程的一些特性都牵扯出来，深入地话还可以考察JVM底层实现以及操作系统的相关知识。</p><p><br /></p><p>下面我们以一次假想的面试过程，来深入了解下volitile关键字吧！</p><p><br /></p><h2 id=\"8fd431e9\">面试官: Java并发这块了解的怎么样？说说你对volatile关键字的理解</h2><p><br /></p><p>就我理解的而言，被volatile修饰的共享变量，就具有了以下两点特性：</p><p><br /></p><p>1 . 保证了不同线程对该变量操作的内存可见性;</p><p><br /></p><p>2 . 禁止指令重排序</p><p><br /></p><h2 id=\"94428d3f\">面试官: 能不能详细说下什么是内存可见性，什么又是重排序呢？</h2><p><br /></p><p>这个聊起来可就多了，我还是从Java内存模型说起吧。</p><p><br /></p><p>Java虚拟机规范试图定义一种Java内存模型（JMM）,来屏蔽掉各种硬件和操作系统的内存访问差异，让Java程序在各种平台上都能达到一致的内存访问效果。简单来说，由于CPU执行指令的速度是很快的，但是内存访问的速度就慢了很多，相差的不是一个数量级，所以搞处理器的那群大佬们又在CPU里加了好几层高速缓存。</p><p><br /></p><p>在Java内存模型里，对上述的优化又进行了一波抽象。JMM规定所有变量都是存在主存中的，类似于上面提到的普通内存，每个线程又包含自己的工作内存，方便理解就可以看成CPU上的寄存器或者高速缓存。所以线程的操作都是以工作内存为主，它们只能访问自己的工作内存，且工作前后都要把值在同步回主内存。</p><p><br /></p><p>这么说得我自己都有些不清楚了，拿张纸画一下：</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2017/12/9/1603a6fae545a200?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&amp;display=inline&amp;height=439&amp;originHeight=480&amp;originWidth=816&amp;status=done&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>在线程执行时，首先会从主存中read变量值，再load到工作内存中的副本中，然后再传给处理器执行，执行完毕后再给工作内存中的副本赋值，随后工作内存再把值传回给主存，主存中的值才更新。</p><p><br /></p><p>使用工作内存和主存，虽然加快的速度，但是也带来了一些问题。比如看下面一个例子：</p><p><br /></p><pre><code>i = i + 1;</code></pre><p><br /></p><p>假设i初值为0，当只有一个线程执行它时，结果肯定得到1，当两个线程执行时，会得到结果2吗？这倒不一定了。可能存在这种情况：</p><p><br /></p><pre><code>线程1： load i from 主存    // i = 0\n        i + 1  // i = 1\n线程2： load i from主存  // 因为线程1还没将i的值写回主存，所以i还是0\n        i +  1 //i = 1\n线程1:  save i to 主存\n线程2： save i to 主存</code></pre><p><br /></p><p>如果两个线程按照上面的执行流程，那么i最后的值居然是1了。如果最后的写回生效的慢，你再读取i的值，都可能是0，这就是缓存不一致问题。</p><p><br /></p><p>下面就要提到你刚才问到的问题了，JMM主要就是围绕着如何在并发过程中如何处理原子性、可见性和有序性这3个特征来建立的，通过解决这三个问题，可以解除缓存不一致的问题。而volatile跟可见性和有序性都有关。</p><p><br /></p><h2 id=\"2abbbb2d\">面试官：那你具体说说这三个特性呢？</h2><p><br /></p><p><strong>1 . 原子性(Atomicity)：</strong> Java中，对基本数据类型的读取和赋值操作是原子性操作，所谓原子性操作就是指这些操作是不可中断的，要做一定做完，要么就没有执行。 比如：</p><p><br /></p><pre><code>i = 2;\nj = i;\ni++;\ni = i + 1；</code></pre><p><br /></p><p>上面4个操作中，<code>i=2</code>是读取操作，必定是原子性操作，<code>j=i</code>你以为是原子性操作，其实吧，分为两步，一是读取i的值，然后再赋值给j,这就是2步操作了，称不上原子操作，<code>i++</code>和<code>i = i + 1</code>其实是等效的，读取i的值，加1，再写回主存，那就是3步操作了。所以上面的举例中，最后的值可能出现多种情况，就是因为满足不了原子性。</p><p><br /></p><p>这么说来，只有简单的读取，赋值是原子操作，还只能是用数字赋值，用变量的话还多了一步读取变量值的操作。有个例外是，虚拟机规范中允许对64位数据类型(long和double)，分为2次32为的操作来处理，但是最新JDK实现还是实现了原子操作的。</p><p><br /></p><p>JMM只实现了基本的原子性，像上面<code>i++</code>那样的操作，必须借助于<code>synchronized</code>和<code>Lock</code>来保证整块代码的原子性了。线程在释放锁之前，必然会把<code>i</code>的值刷回到主存的。</p><p><br /></p><p><strong>2 . 可见性(Visibility)：</strong></p><p><br /></p><p>说到可见性，Java就是利用volatile来提供可见性的。 当一个变量被volatile修饰时，那么对它的修改会立刻刷新到主存，当其它线程需要读取该变量时，会去内存中读取新值。而普通变量则不能保证这一点。</p><p><br /></p><p>其实通过synchronized和Lock也能够保证可见性，线程在释放锁之前，会把共享变量值都刷回主存，但是synchronized和Lock的开销都更大。</p><p><br /></p><p><strong>3 . 有序性（Ordering）</strong></p><p><br /></p><p>JMM是允许编译器和处理器对指令重排序的，但是规定了as-if-serial语义，即不管怎么重排序，程序的执行结果不能改变。比如下面的程序段：</p><p><br /></p><pre><code>double pi = 3.14;    //A\ndouble r = 1;        //B\ndouble s= pi * r * r;//C</code></pre><p><br /></p><p>上面的语句，可以按照<code>A-&gt;B-&gt;C</code>执行，结果为3.14,但是也可以按照<code>B-&gt;A-&gt;C</code>的顺序执行，因为A、B是两句独立的语句，而C则依赖于A、B，所以A、B可以重排序，但是C却不能排到A、B的前面。<span style=\"color: #F5222D;\">JMM保证了重排序不会影响到单线程的执行，但是在多线程中却容易出问题。</span></p><p><br /></p><p>比如这样的代码:</p><p><br /></p><pre><code>int a = 0;\nbool flag = false;\n\npublic void write() {\n    a = 2;              //1\n    flag = true;        //2\n}\n\npublic void multiply() {\n    if (flag) {         //3\n        int ret = a * a;//4\n    }\n    \n}</code></pre><p><br /></p><p>假如有两个线程执行上述代码段，线程1先执行write，随后线程2再执行multiply，最后ret的值一定是4吗？结果不一定：</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2017/12/9/1603ac14eb04b21e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&amp;display=inline&amp;height=586&amp;originHeight=586&amp;originWidth=623&amp;status=done&amp;width=623\" style=\"max-width: 600px; width: 623px;\" /></p><p><br /></p><p>如图所示，write方法里的1和2做了重排序，线程1先对flag赋值为true，随后执行到线程2，ret直接计算出结果，再到线程1，这时候a才赋值为2,很明显迟了一步。</p><p><br /></p><p>这时候可以为flag加上volatile关键字，禁止重排序，可以确保程序的“有序性”，也可以上重量级的synchronized和Lock来保证有序性,它们能保证那一块区域里的代码都是一次性执行完毕的。</p><p><br /></p><p>另外，JMM具备一些先天的<strong>有序性</strong>,即不需要通过任何手段就可以保证的有序性，通常称为<strong>happens-before</strong>原则。<code>&lt;&lt;JSR-133：Java Memory Model and Thread Specification&gt;&gt;</code>定义了如下happens-before规则：</p><p><br /></p><blockquote><ol start=\"1\"><li><strong>程序顺序规则</strong>： 一个线程中的每个操作，happens-before于该线程中的任意后续操作</li></ol><ol start=\"2\"><li><strong>监视器锁规则</strong>：对一个线程的解锁，happens-before于随后对这个线程的加锁</li></ol><ol start=\"3\"><li><strong>volatile变量规则</strong>： 对一个volatile域的写，happens-before于后续对这个volatile域的读</li></ol><ol start=\"4\"><li><strong>传递性</strong>：如果A happens-before B ,且 B happens-before C, 那么 A happens-before C</li></ol><ol start=\"5\"><li><strong>start()规则</strong>： 如果线程A执行操作<code>ThreadB_start()</code>(启动线程B) , 那么A线程的<code>ThreadB_start()</code>happens-before 于B中的任意操作</li></ol><ol start=\"6\"><li><strong>join()原则</strong>： 如果A执行<code>ThreadB.join()</code>并且成功返回，那么线程B中的任意操作happens-before于线程A从<code>ThreadB.join()</code>操作成功返回。</li></ol><ol start=\"7\"><li><strong>interrupt()原则</strong>： 对线程<code>interrupt()</code>方法的调用先行发生于被中断线程代码检测到中断事件的发生，可以通过<code>Thread.interrupted()</code>方法检测是否有中断发生</li></ol><ol start=\"8\"><li><strong>finalize()原则</strong>：一个对象的初始化完成先行发生于它的<code>finalize()</code>方法的开始</li></ol></blockquote><p><br /></p><p>第1条规则程序顺序规则是说在一个线程里，所有的操作都是按顺序的，但是在JMM里其实只要执行结果一样，是允许重排序的，这边的happens-before强调的重点也是单线程执行结果的正确性，但是无法保证多线程也是如此。</p><p><br /></p><p>第2条规则监视器规则其实也好理解，就是在加锁之前，确定这个锁之前已经被释放了，才能继续加锁。</p><p><br /></p><p>第3条规则，就适用到所讨论的volatile，如果一个线程先去写一个变量，另外一个线程再去读，那么写入操作一定在读操作之前。</p><p><br /></p><p>第4条规则，就是happens-before的传递性。</p><p><br /></p><p>后面几条就不再一一赘述了。</p><p><br /></p><h2 id=\"c22bb887\">面试官：volatile关键字如何满足并发编程的三大特性的？</h2><p><br /></p><p>那就要重提volatile变量规则： 对一个volatile域的写，happens-before于后续对这个volatile域的读。 这条再拎出来说，其实就是如果一个变量声明成是volatile的，那么当我读变量时，总是能读到它的最新值，这里最新值是指不管其它哪个线程对该变量做了写操作，都会立刻被更新到主存里，我也能从主存里读到这个刚写入的值。也就是说volatile关键字可以保证可见性以及有序性。</p><p><br /></p><p>继续拿上面的一段代码举例：</p><p><br /></p><pre><code>int a = 0;\nbool flag = false;\n\npublic void write() {\n   a = 2;              //1\n   flag = true;        //2\n}\n\npublic void multiply() {\n   if (flag) {         //3\n       int ret = a * a;//4\n   }\n   \n}</code></pre><p><br /></p><p>这段代码不仅仅受到重排序的困扰，即使1、2没有重排序。3也不会那么顺利的执行的。假设还是线程1先执行<code>write</code>操作，线程2再执行<code>multiply</code>操作，由于线程1是在工作内存里把flag赋值为1，不一定立刻写回主存，所以线程2执行时，<code>multiply</code>再从主存读flag值，仍然可能为false，那么括号里的语句将不会执行。</p><p><br /></p><p>如果改成下面这样：</p><p><br /></p><pre><code>int a = 0;\nvolatile bool flag = false;\n\npublic void write() {\n   a = 2;              //1\n   flag = true;        //2\n}\n\npublic void multiply() {\n   if (flag) {         //3\n       int ret = a * a;//4\n   }\n}</code></pre><p><br /></p><p>那么线程1先执行<code>write</code>,线程2再执行<code>multiply</code>。根据happens-before原则，这个过程会满足以下3类规则：</p><p><br /></p><ol start=\"1\"><li>程序顺序规则：1 happens-before 2; 3 happens-before 4; (volatile限制了指令重排序，所以1 在2 之前执行)</li></ol><ol start=\"2\"><li>volatile规则：2 happens-before 3</li></ol><ol start=\"3\"><li>传递性规则：1 happens-before 4</li></ol><p><br /></p><p>从内存语义上来看</p><p><br /></p><p><strong>当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存</strong></p><p><br /></p><p><strong>当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效，线程接下来将从主内存中读取共享变量。</strong></p><p><br /></p><h2 id=\"b45fdb60\">面试官：volatile的两点内存语义能保证可见性和有序性，但是能保证原子性吗？</h2><p><br /></p><p>首先我回答是不能保证原子性，要是说能保证，也只是对单个volatile变量的读/写具有原子性，但是对于类似volatile++这样的复合操作就无能为力了，比如下面的例子：</p><p><br /></p><pre><code>public class Test {\n    public volatile int inc = 0;\n \n    public void increase() {\n        inc++;\n    }\n \n    public static void main(String[] args) {\n        final Test test = new Test();\n        for(int i=0;i&lt;10;i++){\n            new Thread(){\n                public void run() {\n                    for(int j=0;j&lt;1000;j++)\n                        test.increase();\n                };\n            }.start();\n        }\n \n        while(Thread.activeCount()&gt;1)  //保证前面的线程都执行完\n            Thread.yield();\n        System.out.println(test.inc);\n}</code></pre><p><br /></p><p>按道理来说结果是10000，但是运行下很可能是个小于10000的值。有人可能会说volatile不是保证了可见性啊，一个线程对inc的修改，另外一个线程应该立刻看到啊！可是这里的操作inc++是个复合操作啊，包括读取inc的值，对其自增，然后再写回主存。</p><p><br /></p><p>假设线程A，读取了inc的值为10，这时候被阻塞了，因为没有对变量进行修改，触发不了volatile规则。</p><p><br /></p><p>线程B此时也读读inc的值，主存里inc的值依旧为10，做自增，然后立刻就被写回主存了，为11。</p><p><br /></p><p>此时又轮到线程A执行，由于工作内存里保存的是10，所以继续做自增，再写回主存，11又被写了一遍。所以虽然两个线程执行了两次increase()，结果却只加了一次。</p><p><br /></p><p>有人说，<strong>volatile不是会使缓存行无效的吗</strong>？但是这里线程A读取到线程B也进行操作之前，并没有修改inc值，所以线程B读取的时候，还是读的10。</p><p><br /></p><p>又有人说，线程B将11写回主存，<strong>不会把线程A的缓存行设为无效吗</strong>？但是线程A的读取操作已经做过了啊，只有在做读取操作时，发现自己缓存行无效，才会去读主存的值，所以这里线程A只能继续做自增了。</p><p><br /></p><p>综上所述，在这种复合操作的情景下，原子性的功能是维持不了了。但是volatile在上面那种设置flag值的例子里，由于对flag的读/写操作都是单步的，所以还是能保证原子性的。</p><p><br /></p><p>要想保证原子性，只能借助于synchronized,Lock以及并发包下的atomic的原子操作类了，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。</p><p><br /></p><h2 id=\"c71242b4\">面试官：说的还可以，那你知道volatile底层的实现机制？</h2><p><br /></p><p>如果把加入volatile关键字的代码和未加入volatile关键字的代码都生成汇编代码，会发现加入volatile关键字的代码会多出一个lock前缀指令。</p><p><br /></p><p>lock前缀指令实际相当于一个内存屏障，内存屏障提供了以下功能：</p><p><br /></p><blockquote><p>1 . 重排序时不能把后面的指令重排序到内存屏障之前的位置</p><p>2 . 使得本CPU的Cache写入内存</p><p>3 . 写入动作也会引起别的CPU或者别的内核无效化其Cache，相当于让新写入的值对别的线程可见。</p></blockquote><p><br /></p><h2 id=\"d66555f0\">面试官： 你在哪里会使用到volatile，举两个例子呢？</h2><p><br /></p><ol start=\"1\"><li>状态量标记，就如上面对flag的标记，我重新提一下：\n<br />int a = 0;<br />\nvolatile bool flag = false;\n<br />public void write() {<br />\na = 2;              //1<br />\nflag = true;        //2<br />\n}\n<br />public void multiply() {<br />\nif (flag) {         //3<br />\nint ret = a * a;//4<br />\n}<br />\n}</li></ol><p>这种对变量的读写操作，标记为volatile可以保证修改对线程立刻可见。比synchronized,Lock有一定的效率提升。</p><p><br /></p><p>2.单例模式的实现，典型的双重检查锁定（DCL）</p><p><br /></p><pre><code>class Singleton{\n    private volatile static Singleton instance = null;\n \n    private Singleton() {\n \n    }\n \n    public static Singleton getInstance() {\n        if(instance==null) {\n            synchronized (Singleton.class) {\n                if(instance==null)\n                    instance = new Singleton();\n            }\n        }\n        return instance;\n    }\n}</code></pre><p><br /></p><p>这是一种懒汉的单例模式，使用时才创建对象，而且为了避免初始化操作的指令重排序，给instance加上了volatile。</p><p><br /></p><h2 id=\"b8389362\">面试官： 来给我们说说几种单例模式的写法吧，还有上面这种用法，你再详细说说呢？</h2><p><br /></p><p>好吧，这又是一个话题了，volatile的问题终于问完了。。。看看你掌握了没</p>",
    "body_lake": "<!doctype lake><p>在Java相关的岗位面试中，很多面试官都喜欢考察面试者对Java并发的了解程度，而以<strong>volatile</strong>关键字作为一个小的切入点，往往可以一问到底，把Java内存模型（JMM），Java并发编程的一些特性都牵扯出来，深入地话还可以考察JVM底层实现以及操作系统的相关知识。</p><p><br /></p><p>下面我们以一次假想的面试过程，来深入了解下volitile关键字吧！</p><p><br /></p><h2 id=\"8fd431e9\">面试官: Java并发这块了解的怎么样？说说你对volatile关键字的理解</h2><p><br /></p><p>就我理解的而言，被volatile修饰的共享变量，就具有了以下两点特性：</p><p><br /></p><p>1 . 保证了不同线程对该变量操作的内存可见性;</p><p><br /></p><p>2 . 禁止指令重排序</p><p><br /></p><h2 id=\"94428d3f\">面试官: 能不能详细说下什么是内存可见性，什么又是重排序呢？<cursor /></h2><p><br /></p><p>这个聊起来可就多了，我还是从Java内存模型说起吧。</p><p><br /></p><p>Java虚拟机规范试图定义一种Java内存模型（JMM）,来屏蔽掉各种硬件和操作系统的内存访问差异，让Java程序在各种平台上都能达到一致的内存访问效果。简单来说，由于CPU执行指令的速度是很快的，但是内存访问的速度就慢了很多，相差的不是一个数量级，所以搞处理器的那群大佬们又在CPU里加了好几层高速缓存。</p><p><br /></p><p>在Java内存模型里，对上述的优化又进行了一波抽象。JMM规定所有变量都是存在主存中的，类似于上面提到的普通内存，每个线程又包含自己的工作内存，方便理解就可以看成CPU上的寄存器或者高速缓存。所以线程的操作都是以工作内存为主，它们只能访问自己的工作内存，且工作前后都要把值在同步回主内存。</p><p><br /></p><p>这么说得我自己都有些不清楚了，拿张纸画一下：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2017%2F12%2F9%2F1603a6fae545a200%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%22%2C%22originWidth%22%3A816%2C%22originHeight%22%3A480%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A746%2C%22height%22%3A439%7D\"></card></p><p><br /></p><p>在线程执行时，首先会从主存中read变量值，再load到工作内存中的副本中，然后再传给处理器执行，执行完毕后再给工作内存中的副本赋值，随后工作内存再把值传回给主存，主存中的值才更新。</p><p><br /></p><p>使用工作内存和主存，虽然加快的速度，但是也带来了一些问题。比如看下面一个例子：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22i%20%3D%20i%20%2B%201%3B%22%7D\"></card><p><br /></p><p>假设i初值为0，当只有一个线程执行它时，结果肯定得到1，当两个线程执行时，会得到结果2吗？这倒不一定了。可能存在这种情况：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E7%BA%BF%E7%A8%8B1%EF%BC%9A%20load%20i%20from%20%E4%B8%BB%E5%AD%98%20%20%20%20%2F%2F%20i%20%3D%200%5Cn%20%20%20%20%20%20%20%20i%20%2B%201%20%20%2F%2F%20i%20%3D%201%5Cn%E7%BA%BF%E7%A8%8B2%EF%BC%9A%20load%20i%20from%E4%B8%BB%E5%AD%98%20%20%2F%2F%20%E5%9B%A0%E4%B8%BA%E7%BA%BF%E7%A8%8B1%E8%BF%98%E6%B2%A1%E5%B0%86i%E7%9A%84%E5%80%BC%E5%86%99%E5%9B%9E%E4%B8%BB%E5%AD%98%EF%BC%8C%E6%89%80%E4%BB%A5i%E8%BF%98%E6%98%AF0%5Cn%20%20%20%20%20%20%20%20i%20%2B%20%201%20%2F%2Fi%20%3D%201%5Cn%E7%BA%BF%E7%A8%8B1%3A%20%20save%20i%20to%20%E4%B8%BB%E5%AD%98%5Cn%E7%BA%BF%E7%A8%8B2%EF%BC%9A%20save%20i%20to%20%E4%B8%BB%E5%AD%98%22%7D\"></card><p><br /></p><p>如果两个线程按照上面的执行流程，那么i最后的值居然是1了。如果最后的写回生效的慢，你再读取i的值，都可能是0，这就是缓存不一致问题。</p><p><br /></p><p>下面就要提到你刚才问到的问题了，JMM主要就是围绕着如何在并发过程中如何处理原子性、可见性和有序性这3个特征来建立的，通过解决这三个问题，可以解除缓存不一致的问题。而volatile跟可见性和有序性都有关。</p><p><br /></p><h2 id=\"2abbbb2d\">面试官：那你具体说说这三个特性呢？</h2><p><br /></p><p><strong>1 . 原子性(Atomicity)：</strong> Java中，对基本数据类型的读取和赋值操作是原子性操作，所谓原子性操作就是指这些操作是不可中断的，要做一定做完，要么就没有执行。 比如：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22i%20%3D%202%3B%5Cnj%20%3D%20i%3B%5Cni%2B%2B%3B%5Cni%20%3D%20i%20%2B%201%EF%BC%9B%22%7D\"></card><p><br /></p><p>上面4个操作中，<code>i=2</code>是读取操作，必定是原子性操作，<code>j=i</code>你以为是原子性操作，其实吧，分为两步，一是读取i的值，然后再赋值给j,这就是2步操作了，称不上原子操作，<code>i++</code>和<code>i = i + 1</code>其实是等效的，读取i的值，加1，再写回主存，那就是3步操作了。所以上面的举例中，最后的值可能出现多种情况，就是因为满足不了原子性。</p><p><br /></p><p>这么说来，只有简单的读取，赋值是原子操作，还只能是用数字赋值，用变量的话还多了一步读取变量值的操作。有个例外是，虚拟机规范中允许对64位数据类型(long和double)，分为2次32为的操作来处理，但是最新JDK实现还是实现了原子操作的。</p><p><br /></p><p>JMM只实现了基本的原子性，像上面<code>i++</code>那样的操作，必须借助于<code>synchronized</code>和<code>Lock</code>来保证整块代码的原子性了。线程在释放锁之前，必然会把<code>i</code>的值刷回到主存的。</p><p><br /></p><p><strong>2 . 可见性(Visibility)：</strong></p><p><br /></p><p>说到可见性，Java就是利用volatile来提供可见性的。 当一个变量被volatile修饰时，那么对它的修改会立刻刷新到主存，当其它线程需要读取该变量时，会去内存中读取新值。而普通变量则不能保证这一点。</p><p><br /></p><p>其实通过synchronized和Lock也能够保证可见性，线程在释放锁之前，会把共享变量值都刷回主存，但是synchronized和Lock的开销都更大。</p><p><br /></p><p><strong>3 . 有序性（Ordering）</strong></p><p><br /></p><p>JMM是允许编译器和处理器对指令重排序的，但是规定了as-if-serial语义，即不管怎么重排序，程序的执行结果不能改变。比如下面的程序段：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22double%20pi%20%3D%203.14%3B%20%20%20%20%2F%2FA%5Cndouble%20r%20%3D%201%3B%20%20%20%20%20%20%20%20%2F%2FB%5Cndouble%20s%3D%20pi%20*%20r%20*%20r%3B%2F%2FC%22%7D\"></card><p><br /></p><p>上面的语句，可以按照<code>A-&gt;B-&gt;C</code>执行，结果为3.14,但是也可以按照<code>B-&gt;A-&gt;C</code>的顺序执行，因为A、B是两句独立的语句，而C则依赖于A、B，所以A、B可以重排序，但是C却不能排到A、B的前面。<span style=\"color: #F5222D;\">JMM保证了重排序不会影响到单线程的执行，但是在多线程中却容易出问题。</span></p><p><br /></p><p>比如这样的代码:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22int%20a%20%3D%200%3B%5Cnbool%20flag%20%3D%20false%3B%5Cn%5Cnpublic%20void%20write()%20%7B%5Cn%20%20%20%20a%20%3D%202%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F1%5Cn%20%20%20%20flag%20%3D%20true%3B%20%20%20%20%20%20%20%20%2F%2F2%5Cn%7D%5Cn%5Cnpublic%20void%20multiply()%20%7B%5Cn%20%20%20%20if%20(flag)%20%7B%20%20%20%20%20%20%20%20%20%2F%2F3%5Cn%20%20%20%20%20%20%20%20int%20ret%20%3D%20a%20*%20a%3B%2F%2F4%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%5Cn%7D%22%7D\"></card><p><br /></p><p>假如有两个线程执行上述代码段，线程1先执行write，随后线程2再执行multiply，最后ret的值一定是4吗？结果不一定：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2017%2F12%2F9%2F1603ac14eb04b21e%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%22%2C%22originWidth%22%3A623%2C%22originHeight%22%3A586%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A623%2C%22height%22%3A586%7D\"></card></p><p><br /></p><p>如图所示，write方法里的1和2做了重排序，线程1先对flag赋值为true，随后执行到线程2，ret直接计算出结果，再到线程1，这时候a才赋值为2,很明显迟了一步。</p><p><br /></p><p>这时候可以为flag加上volatile关键字，禁止重排序，可以确保程序的“有序性”，也可以上重量级的synchronized和Lock来保证有序性,它们能保证那一块区域里的代码都是一次性执行完毕的。</p><p><br /></p><p>另外，JMM具备一些先天的<strong>有序性</strong>,即不需要通过任何手段就可以保证的有序性，通常称为<strong>happens-before</strong>原则。<code>&lt;&lt;JSR-133：Java Memory Model and Thread Specification&gt;&gt;</code>定义了如下happens-before规则：</p><p><br /></p><blockquote><ol start=\"1\"><li><strong>程序顺序规则</strong>： 一个线程中的每个操作，happens-before于该线程中的任意后续操作</li></ol><ol start=\"2\"><li><strong>监视器锁规则</strong>：对一个线程的解锁，happens-before于随后对这个线程的加锁</li></ol><ol start=\"3\"><li><strong>volatile变量规则</strong>： 对一个volatile域的写，happens-before于后续对这个volatile域的读</li></ol><ol start=\"4\"><li><strong>传递性</strong>：如果A happens-before B ,且 B happens-before C, 那么 A happens-before C</li></ol><ol start=\"5\"><li><strong>start()规则</strong>： 如果线程A执行操作<code>ThreadB_start()</code>(启动线程B) , 那么A线程的<code>ThreadB_start()</code>happens-before 于B中的任意操作</li></ol><ol start=\"6\"><li><strong>join()原则</strong>： 如果A执行<code>ThreadB.join()</code>并且成功返回，那么线程B中的任意操作happens-before于线程A从<code>ThreadB.join()</code>操作成功返回。</li></ol><ol start=\"7\"><li><strong>interrupt()原则</strong>： 对线程<code>interrupt()</code>方法的调用先行发生于被中断线程代码检测到中断事件的发生，可以通过<code>Thread.interrupted()</code>方法检测是否有中断发生</li></ol><ol start=\"8\"><li><strong>finalize()原则</strong>：一个对象的初始化完成先行发生于它的<code>finalize()</code>方法的开始</li></ol></blockquote><p><br /></p><p>第1条规则程序顺序规则是说在一个线程里，所有的操作都是按顺序的，但是在JMM里其实只要执行结果一样，是允许重排序的，这边的happens-before强调的重点也是单线程执行结果的正确性，但是无法保证多线程也是如此。</p><p><br /></p><p>第2条规则监视器规则其实也好理解，就是在加锁之前，确定这个锁之前已经被释放了，才能继续加锁。</p><p><br /></p><p>第3条规则，就适用到所讨论的volatile，如果一个线程先去写一个变量，另外一个线程再去读，那么写入操作一定在读操作之前。</p><p><br /></p><p>第4条规则，就是happens-before的传递性。</p><p><br /></p><p>后面几条就不再一一赘述了。</p><p><br /></p><h2 id=\"c22bb887\">面试官：volatile关键字如何满足并发编程的三大特性的？</h2><p><br /></p><p>那就要重提volatile变量规则： 对一个volatile域的写，happens-before于后续对这个volatile域的读。 这条再拎出来说，其实就是如果一个变量声明成是volatile的，那么当我读变量时，总是能读到它的最新值，这里最新值是指不管其它哪个线程对该变量做了写操作，都会立刻被更新到主存里，我也能从主存里读到这个刚写入的值。也就是说volatile关键字可以保证可见性以及有序性。</p><p><br /></p><p>继续拿上面的一段代码举例：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22int%20a%20%3D%200%3B%5Cnbool%20flag%20%3D%20false%3B%5Cn%5Cnpublic%20void%20write()%20%7B%5Cn%20%20%20a%20%3D%202%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F1%5Cn%20%20%20flag%20%3D%20true%3B%20%20%20%20%20%20%20%20%2F%2F2%5Cn%7D%5Cn%5Cnpublic%20void%20multiply()%20%7B%5Cn%20%20%20if%20(flag)%20%7B%20%20%20%20%20%20%20%20%20%2F%2F3%5Cn%20%20%20%20%20%20%20int%20ret%20%3D%20a%20*%20a%3B%2F%2F4%5Cn%20%20%20%7D%5Cn%20%20%20%5Cn%7D%22%7D\"></card><p><br /></p><p>这段代码不仅仅受到重排序的困扰，即使1、2没有重排序。3也不会那么顺利的执行的。假设还是线程1先执行<code>write</code>操作，线程2再执行<code>multiply</code>操作，由于线程1是在工作内存里把flag赋值为1，不一定立刻写回主存，所以线程2执行时，<code>multiply</code>再从主存读flag值，仍然可能为false，那么括号里的语句将不会执行。</p><p><br /></p><p>如果改成下面这样：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22int%20a%20%3D%200%3B%5Cnvolatile%20bool%20flag%20%3D%20false%3B%5Cn%5Cnpublic%20void%20write()%20%7B%5Cn%20%20%20a%20%3D%202%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F1%5Cn%20%20%20flag%20%3D%20true%3B%20%20%20%20%20%20%20%20%2F%2F2%5Cn%7D%5Cn%5Cnpublic%20void%20multiply()%20%7B%5Cn%20%20%20if%20(flag)%20%7B%20%20%20%20%20%20%20%20%20%2F%2F3%5Cn%20%20%20%20%20%20%20int%20ret%20%3D%20a%20*%20a%3B%2F%2F4%5Cn%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>那么线程1先执行<code>write</code>,线程2再执行<code>multiply</code>。根据happens-before原则，这个过程会满足以下3类规则：</p><p><br /></p><ol start=\"1\"><li>程序顺序规则：1 happens-before 2; 3 happens-before 4; (volatile限制了指令重排序，所以1 在2 之前执行)</li></ol><ol start=\"2\"><li>volatile规则：2 happens-before 3</li></ol><ol start=\"3\"><li>传递性规则：1 happens-before 4</li></ol><p><br /></p><p>从内存语义上来看</p><p><br /></p><p><strong>当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存</strong></p><p><br /></p><p><strong>当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效，线程接下来将从主内存中读取共享变量。</strong></p><p><br /></p><h2 id=\"b45fdb60\">面试官：volatile的两点内存语义能保证可见性和有序性，但是能保证原子性吗？</h2><p><br /></p><p>首先我回答是不能保证原子性，要是说能保证，也只是对单个volatile变量的读/写具有原子性，但是对于类似volatile++这样的复合操作就无能为力了，比如下面的例子：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22public%20class%20Test%20%7B%5Cn%20%20%20%20public%20volatile%20int%20inc%20%3D%200%3B%5Cn%20%5Cn%20%20%20%20public%20void%20increase()%20%7B%5Cn%20%20%20%20%20%20%20%20inc%2B%2B%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20final%20Test%20test%20%3D%20new%20Test()%3B%5Cn%20%20%20%20%20%20%20%20for(int%20i%3D0%3Bi%3C10%3Bi%2B%2B)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20new%20Thread()%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20void%20run()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for(int%20j%3D0%3Bj%3C1000%3Bj%2B%2B)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20test.increase()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D.start()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%20%20%20%20while(Thread.activeCount()%3E1)%20%20%2F%2F%E4%BF%9D%E8%AF%81%E5%89%8D%E9%9D%A2%E7%9A%84%E7%BA%BF%E7%A8%8B%E9%83%BD%E6%89%A7%E8%A1%8C%E5%AE%8C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Thread.yield()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(test.inc)%3B%5Cn%7D%22%7D\"></card><p><br /></p><p>按道理来说结果是10000，但是运行下很可能是个小于10000的值。有人可能会说volatile不是保证了可见性啊，一个线程对inc的修改，另外一个线程应该立刻看到啊！可是这里的操作inc++是个复合操作啊，包括读取inc的值，对其自增，然后再写回主存。</p><p><br /></p><p>假设线程A，读取了inc的值为10，这时候被阻塞了，因为没有对变量进行修改，触发不了volatile规则。</p><p><br /></p><p>线程B此时也读读inc的值，主存里inc的值依旧为10，做自增，然后立刻就被写回主存了，为11。</p><p><br /></p><p>此时又轮到线程A执行，由于工作内存里保存的是10，所以继续做自增，再写回主存，11又被写了一遍。所以虽然两个线程执行了两次increase()，结果却只加了一次。</p><p><br /></p><p>有人说，<strong>volatile不是会使缓存行无效的吗</strong>？但是这里线程A读取到线程B也进行操作之前，并没有修改inc值，所以线程B读取的时候，还是读的10。</p><p><br /></p><p>又有人说，线程B将11写回主存，<strong>不会把线程A的缓存行设为无效吗</strong>？但是线程A的读取操作已经做过了啊，只有在做读取操作时，发现自己缓存行无效，才会去读主存的值，所以这里线程A只能继续做自增了。</p><p><br /></p><p>综上所述，在这种复合操作的情景下，原子性的功能是维持不了了。但是volatile在上面那种设置flag值的例子里，由于对flag的读/写操作都是单步的，所以还是能保证原子性的。</p><p><br /></p><p>要想保证原子性，只能借助于synchronized,Lock以及并发包下的atomic的原子操作类了，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。</p><p><br /></p><h2 id=\"c71242b4\">面试官：说的还可以，那你知道volatile底层的实现机制？</h2><p><br /></p><p>如果把加入volatile关键字的代码和未加入volatile关键字的代码都生成汇编代码，会发现加入volatile关键字的代码会多出一个lock前缀指令。</p><p><br /></p><p>lock前缀指令实际相当于一个内存屏障，内存屏障提供了以下功能：</p><p><br /></p><blockquote><p>1 . 重排序时不能把后面的指令重排序到内存屏障之前的位置</p><p>2 . 使得本CPU的Cache写入内存</p><p>3 . 写入动作也会引起别的CPU或者别的内核无效化其Cache，相当于让新写入的值对别的线程可见。</p></blockquote><p><br /></p><h2 id=\"d66555f0\">面试官： 你在哪里会使用到volatile，举两个例子呢？</h2><p><br /></p><ol start=\"1\"><li>状态量标记，就如上面对flag的标记，我重新提一下：\n<br />int a = 0;<br />\nvolatile bool flag = false;\n<br />public void write() {<br />\na = 2;              //1<br />\nflag = true;        //2<br />\n}\n<br />public void multiply() {<br />\nif (flag) {         //3<br />\nint ret = a * a;//4<br />\n}<br />\n}</li></ol><p>这种对变量的读写操作，标记为volatile可以保证修改对线程立刻可见。比synchronized,Lock有一定的效率提升。</p><p><br /></p><p>2.单例模式的实现，典型的双重检查锁定（DCL）</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22class%20Singleton%7B%5Cn%20%20%20%20private%20volatile%20static%20Singleton%20instance%20%3D%20null%3B%5Cn%20%5Cn%20%20%20%20private%20Singleton()%20%7B%5Cn%20%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20public%20static%20Singleton%20getInstance()%20%7B%5Cn%20%20%20%20%20%20%20%20if(instance%3D%3Dnull)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20synchronized%20(Singleton.class)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(instance%3D%3Dnull)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20instance%20%3D%20new%20Singleton()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20instance%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>这是一种懒汉的单例模式，使用时才创建对象，而且为了避免初始化操作的指令重排序，给instance加上了volatile。</p><p><br /></p><h2 id=\"b8389362\">面试官： 来给我们说说几种单例模式的写法吧，还有上面这种用法，你再详细说说呢？</h2><p><br /></p><p>好吧，这又是一个话题了，volatile的问题终于问完了。。。看看你掌握了没</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-03-15T06:36:17.000Z",
    "deleted_at": null,
    "created_at": "2019-03-15T06:19:59.000Z",
    "updated_at": "2019-03-15T06:36:17.000Z",
    "published_at": "2019-03-15T06:36:17.000Z",
    "first_published_at": null,
    "word_count": 4005,
    "cover": null,
    "description": "在Java相关的岗位面试中，很多面试官都喜欢考察面试者对Java并发的了解程度，而以volatile关键字作为一个小的切入点，往往可以一问到底，把Java内存模型（JMM），Java并发编程的一些特性都牵扯出来，深入地话还可以考察JVM底层实现以及操作系统的相关知识。下面我们以一次假想的面试过...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1372842,
    "slug": "00319c12-c244-4802-4211-5801b61f5fab",
    "title": "实例分析MySQL下的四种事务隔离级别 - 后端 - 掘金",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "数据库事务有四种隔离级别：\n\n- 未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据。\n- 提交读(Read Committed)：只能读取到已经提交的数据，Oracle等多数数据库默认都是该级别。\n- 可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻读。\n- 串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞。\n\n上面这样的教科书式定义第一次接触事务隔离概念的朋友看了可能会一脸懵逼，下面我们就通过具体的实例来解释四个隔离级别。\n\n首先我们创建一个user表：\n\n```\nCREATE TABLE user (\n    `id` int(11) NOT NULL AUTO_INCREMENT,\n    `name` varchar(255) NOT NULL,\n    PRIMARY KEY (`id`),\n    UNIQUE `uniq_name` USING BTREE (name)\n) ENGINE=`InnoDB` AUTO_INCREMENT=10 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\n```\n\n<a name=\"815c458e\"></a>\n## 读未提交隔离级别\n\n我们先将事务的隔离级别设置为`read uncommitted`：\n\n```\nmysql> set session transaction isolation level read uncommitted;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select @@session.tx_isolation;\n+------------------------+\n| @@session.tx_isolation |\n+------------------------+\n| READ-UNCOMMITTED       |\n+------------------------+\n1 row in set (0.00 sec)\n```\n\n在下面我们开了两个终端分别用来模拟事务一和事务二，p.s: 操作一和操作二的意思是按照时间顺序来执行的。\n\n**事务1**\n\n```\nmysql> start transaction; # 操作1\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into user(name) values('ziwenxie'); # 操作3\nQuery OK, 1 row affected (0.05 sec)\n```\n\n**事务2**\n\n```\nmysql> start transaction; # 操作2\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user; # 操作4\n+----+----------+\n| id | name     |\n+----+----------+\n| 10 | ziwenxie |\n+----+----------+\n1 row in set (0.00 sec)\n```\n\n从上面的执行结果可以和清晰的看出来，在read uncommited级别下面我们在事务一中可能会读取到事务二中没有commit的数据，这就是脏读。\n\n<a name=\"3fdc691d\"></a>\n## 读提交隔离级别\n\n通过设置隔离级别为`committed`可以解决上面的脏读问题。\n\n```\nmysql> set session transaction isolation level read committed;\n```\n\n**事务一**\n\n```\nmysql> start transaction; # 操作一\nQuery OK, 0 rows affected (0.00 sec)\n\n\nmysql> select * from user; # 操作三\n+----+----------+\n| id | name     |\n+----+----------+\n| 10 | ziwenxie |\n+----+----------+\n1 row in set (0.00 sec)\n\nmysql> select * from user; # 操作五，操作四的修改并没有影响到事务一\n+----+----------+\n| id | name     |\n+----+----------+\n| 10 | ziwenxie |\n+----+----------+\n1 row in set (0.00 sec)\n\nmysql> select * from user; # 操作七\n\n+----+------+\n| id | name |\n+----+------+\n| 10 | lisi |\n+----+------+\n1 row in set (0.00 sec)\n\nmysql> commit; # 操作八\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n**事务二**\n\n```\nmysql> start transaction; # 操作二\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> update user set name='lisi' where id=10; # 操作四\nQuery OK, 1 row affected (0.06 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> commit; # 操作六\nQuery OK, 0 rows affected (0.08 sec)\n```\n\n虽然脏读的问题解决了，但是注意在事务一的操作七中，事务二在操作六commit后会造成事务一在同一个transaction中两次读取到的数据不同，这就是不可重复读问题，使用第三个事务隔离级别repeatable read可以解决这个问题。\n\n<a name=\"4716d740\"></a>\n## 可重复读隔离级别\n\nMySQL的Innodb存储引擎默认的事务隔离级别就是可重复读隔离级别，所以我们不用进行多余的设置。\n\n**事务一**\n\n```\nmysql> start tansactoin; # 操作一\n\nmysql> select * from user; # 操作五\n+----+----------+\n| id | name     |\n+----+----------+\n| 10 | ziwenxie |\n+----+----------+\n1 row in set (0.00 sec)\n\nmysql> commit; # 操作六\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user; # 操作七\n+----+------+\n| id | name |\n+----+------+\n| 10 | lisi |\n+----+------+\n1 row in set (0.00 sec)\n```\n\n**事务二**\n\n```\nmysql> start tansactoin; # 操作二\n\nmysql> update user set name='lisi' where id=10; # 操作三\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> commit; # 操作四\n```\n\n在事务一的操作五中我们并没有读取到事务二在操作三中的update，只有在commit之后才能读到更新后的数据。\n\n<a name=\"924b55a7\"></a>\n### Innodb解决了幻读么\n\n实际上RR级别是可能产生幻读，InnoDB引擎官方称中利用MVCC多版本并发控制解决了这个问题，下面我们验证一下Innodb真的解决了幻读了么？\n\n为了方便展示，我修改了一下上面的user表：\n\n```\nmysql> alter table user add salary int(11);\nQuery OK, 0 rows affected (0.51 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> delete from user;\nQuery OK, 1 rows affected (0.07 sec)\n\nmysql> insert into user(name, salary) value('ziwenxie', 88888888);\nQuery OK, 1 row affected (0.07 sec)\n\nmysql> select * from user;\n+----+----------+----------+\n| id | name     | salary   |\n+----+----------+----------+\n| 10 | ziwenxie | 88888888 |\n+----+----------+----------+\n1 row in set (0.00 sec)\n```\n\n**事务一**\n\n```\nmysql> start transaction;  # 操作一\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user; # 操作三\n+----+----------+----------+\n| id | name     | salary   |\n+----+----------+----------+\n| 10 | ziwenxie | 88888888 |\n+----+----------+----------+\n1 row in set (0.00 sec)\n\nmysql> update user set salary='4444'; # 操作六，竟然影响了两行，不是说解决了幻读么？\nQuery OK, 2 rows affected (0.00 sec)\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> select * from user; # 操作七， Innodb并没有完全解决幻读\n+----+----------+--------+\n| id | name     | salary |\n+----+----------+--------+\n| 10 | ziwenxie |   4444 |\n| 11 | zhangsan |   4444 |\n+----+----------+--------+\n2 rows in set (0.00 sec)\n\nmysql> commit; # 操作八\nQuery OK, 0 rows affected (0.04 sec)\n```\n\n**事务二**\n\n```\nmysql> start transaction; # 操作二\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into user(name, salary) value('zhangsan', '666666'); # 操作四\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> commit; # 操作五\nQuery OK, 0 rows affected (0.04 sec)\n```\n\n从上面的例子可以看出，Innodb并没有如官方所说解决幻读，不过上面这样的场景中也不是很常见不用过多的担心。\n\n<a name=\"76a4df16\"></a>\n## 串行化隔离级别\n\n所有事务串行执行，最高隔离级别，不会出现幻读性能会很差，实际开发中很少使用到。\n\n<a name=\"2432b575\"></a>\n### 备注\n\n- 脏读：读到了其他会话还未提交的更新\n- 幻读：读取到其他会话的新增或者删除，侧重于数量的改变\n- 不可重复读：同一个会话中两次执行相同的语句得到的结果不同\n\n<a name=\"Contact\"></a>\n## Contact\n\nGitHub: [github.com/ziwenxie](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fziwenxie)<br />\nBlog: [www.ziwenxie.site](https://link.juejin.im/?target=https%3A%2F%2Fwww.ziwenxie.site)\n\n> 本文同步发于我的[个人博客](https://link.juejin.im/?target=https%3A%2F%2Fwww.ziwenxie.site%2F2017%2F08%2F08%2Fmysql-transaction-isolation%2F)，转载请声明博客出处 ![](https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/1f603.svg#align=left&display=inline&height=18&originHeight=150&originWidth=150&status=done&width=18)\n\n",
    "body_draft": "",
    "body_html": "<p>数据库事务有四种隔离级别：</p><ul><li>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据。</li></ul><ul><li>提交读(Read Committed)：只能读取到已经提交的数据，Oracle等多数数据库默认都是该级别。</li></ul><ul><li>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻读。</li></ul><ul><li>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞。</li></ul><p><br /></p><p>上面这样的教科书式定义第一次接触事务隔离概念的朋友看了可能会一脸懵逼，下面我们就通过具体的实例来解释四个隔离级别。</p><p><br /></p><p>首先我们创建一个user表：</p><p><br /></p><pre><code>CREATE TABLE user (\n    `id` int(11) NOT NULL AUTO_INCREMENT,\n    `name` varchar(255) NOT NULL,\n    PRIMARY KEY (`id`),\n    UNIQUE `uniq_name` USING BTREE (name)\n) ENGINE=`InnoDB` AUTO_INCREMENT=10 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre><p><br /></p><h2 id=\"815c458e\">读未提交隔离级别</h2><p><br /></p><p>我们先将事务的隔离级别设置为<code>read uncommitted</code>：</p><p><br /></p><pre><code>mysql&gt; set session transaction isolation level read uncommitted;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select @@session.tx_isolation;\n+------------------------+\n| @@session.tx_isolation |\n+------------------------+\n| READ-UNCOMMITTED       |\n+------------------------+\n1 row in set (0.00 sec)</code></pre><p><br /></p><p>在下面我们开了两个终端分别用来模拟事务一和事务二，p.s: 操作一和操作二的意思是按照时间顺序来执行的。</p><p><br /></p><p><strong>事务1</strong></p><p><br /></p><pre><code>mysql&gt; start transaction; # 操作1\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into user(name) values('ziwenxie'); # 操作3\nQuery OK, 1 row affected (0.05 sec)</code></pre><p><br /></p><p><strong>事务2</strong></p><p><br /></p><pre><code>mysql&gt; start transaction; # 操作2\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select * from user; # 操作4\n+----+----------+\n| id | name     |\n+----+----------+\n| 10 | ziwenxie |\n+----+----------+\n1 row in set (0.00 sec)</code></pre><p><br /></p><p>从上面的执行结果可以和清晰的看出来，在read uncommited级别下面我们在事务一中可能会读取到事务二中没有commit的数据，这就是脏读。</p><p><br /></p><h2 id=\"3fdc691d\">读提交隔离级别</h2><p><br /></p><p>通过设置隔离级别为<code>committed</code>可以解决上面的脏读问题。</p><p><br /></p><pre><code>mysql&gt; set session transaction isolation level read committed;</code></pre><p><br /></p><p><strong>事务一</strong></p><p><br /></p><pre><code>mysql&gt; start transaction; # 操作一\nQuery OK, 0 rows affected (0.00 sec)\n\n\nmysql&gt; select * from user; # 操作三\n+----+----------+\n| id | name     |\n+----+----------+\n| 10 | ziwenxie |\n+----+----------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from user; # 操作五，操作四的修改并没有影响到事务一\n+----+----------+\n| id | name     |\n+----+----------+\n| 10 | ziwenxie |\n+----+----------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from user; # 操作七\n\n+----+------+\n| id | name |\n+----+------+\n| 10 | lisi |\n+----+------+\n1 row in set (0.00 sec)\n\nmysql&gt; commit; # 操作八\nQuery OK, 0 rows affected (0.00 sec)</code></pre><p><br /></p><p><strong>事务二</strong></p><p><br /></p><pre><code>mysql&gt; start transaction; # 操作二\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; update user set name='lisi' where id=10; # 操作四\nQuery OK, 1 row affected (0.06 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; commit; # 操作六\nQuery OK, 0 rows affected (0.08 sec)</code></pre><p><br /></p><p>虽然脏读的问题解决了，但是注意在事务一的操作七中，事务二在操作六commit后会造成事务一在同一个transaction中两次读取到的数据不同，这就是不可重复读问题，使用第三个事务隔离级别repeatable read可以解决这个问题。</p><p><br /></p><h2 id=\"4716d740\">可重复读隔离级别</h2><p><br /></p><p>MySQL的Innodb存储引擎默认的事务隔离级别就是可重复读隔离级别，所以我们不用进行多余的设置。</p><p><br /></p><p><strong>事务一</strong></p><p><br /></p><pre><code>mysql&gt; start tansactoin; # 操作一\n\nmysql&gt; select * from user; # 操作五\n+----+----------+\n| id | name     |\n+----+----------+\n| 10 | ziwenxie |\n+----+----------+\n1 row in set (0.00 sec)\n\nmysql&gt; commit; # 操作六\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select * from user; # 操作七\n+----+------+\n| id | name |\n+----+------+\n| 10 | lisi |\n+----+------+\n1 row in set (0.00 sec)</code></pre><p><br /></p><p><strong>事务二</strong></p><p><br /></p><pre><code>mysql&gt; start tansactoin; # 操作二\n\nmysql&gt; update user set name='lisi' where id=10; # 操作三\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; commit; # 操作四</code></pre><p><br /></p><p>在事务一的操作五中我们并没有读取到事务二在操作三中的update，只有在commit之后才能读到更新后的数据。</p><p><br /></p><h3 id=\"924b55a7\">Innodb解决了幻读么</h3><p><br /></p><p>实际上RR级别是可能产生幻读，InnoDB引擎官方称中利用MVCC多版本并发控制解决了这个问题，下面我们验证一下Innodb真的解决了幻读了么？</p><p><br /></p><p>为了方便展示，我修改了一下上面的user表：</p><p><br /></p><pre><code>mysql&gt; alter table user add salary int(11);\nQuery OK, 0 rows affected (0.51 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql&gt; delete from user;\nQuery OK, 1 rows affected (0.07 sec)\n\nmysql&gt; insert into user(name, salary) value('ziwenxie', 88888888);\nQuery OK, 1 row affected (0.07 sec)\n\nmysql&gt; select * from user;\n+----+----------+----------+\n| id | name     | salary   |\n+----+----------+----------+\n| 10 | ziwenxie | 88888888 |\n+----+----------+----------+\n1 row in set (0.00 sec)</code></pre><p><br /></p><p><strong>事务一</strong></p><p><br /></p><pre><code>mysql&gt; start transaction;  # 操作一\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select * from user; # 操作三\n+----+----------+----------+\n| id | name     | salary   |\n+----+----------+----------+\n| 10 | ziwenxie | 88888888 |\n+----+----------+----------+\n1 row in set (0.00 sec)\n\nmysql&gt; update user set salary='4444'; # 操作六，竟然影响了两行，不是说解决了幻读么？\nQuery OK, 2 rows affected (0.00 sec)\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql&gt; select * from user; # 操作七， Innodb并没有完全解决幻读\n+----+----------+--------+\n| id | name     | salary |\n+----+----------+--------+\n| 10 | ziwenxie |   4444 |\n| 11 | zhangsan |   4444 |\n+----+----------+--------+\n2 rows in set (0.00 sec)\n\nmysql&gt; commit; # 操作八\nQuery OK, 0 rows affected (0.04 sec)</code></pre><p><br /></p><p><strong>事务二</strong></p><p><br /></p><pre><code>mysql&gt; start transaction; # 操作二\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into user(name, salary) value('zhangsan', '666666'); # 操作四\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; commit; # 操作五\nQuery OK, 0 rows affected (0.04 sec)</code></pre><p><br /></p><p>从上面的例子可以看出，Innodb并没有如官方所说解决幻读，不过上面这样的场景中也不是很常见不用过多的担心。</p><p><br /></p><h2 id=\"76a4df16\">串行化隔离级别</h2><p><br /></p><p>所有事务串行执行，最高隔离级别，不会出现幻读性能会很差，实际开发中很少使用到。</p><p><br /></p><h3 id=\"2432b575\">备注</h3><ul><li>脏读：读到了其他会话还未提交的更新</li><li>幻读：读取到其他会话的新增或者删除，侧重于数量的改变</li><li>不可重复读：同一个会话中两次执行相同的语句得到的结果不同</li></ul><p><br /></p><h2 id=\"Contact\">Contact</h2><p><br /></p><p>GitHub: <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fziwenxie\" target=\"_blank\">github.com/ziwenxie</a><br />\nBlog: <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.ziwenxie.site\" target=\"_blank\">www.ziwenxie.site</a></p><p><br /></p><blockquote><p>本文同步发于我的<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.ziwenxie.site%2F2017%2F08%2F08%2Fmysql-transaction-isolation%2F\" target=\"_blank\">个人博客</a>，转载请声明博客出处 <img src=\"https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/1f603.svg#align=left&amp;display=inline&amp;height=18&amp;originHeight=150&amp;originWidth=150&amp;status=done&amp;width=18\" style=\"max-width: 600px; width: 18px;\" /></p></blockquote>",
    "body_lake": "<!doctype lake><p>数据库事务有四种隔离级别：</p><ul><li>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据。</li></ul><ul><li>提交读(Read Committed)：只能读取到已经提交的数据，Oracle等多数数据库默认都是该级别。</li></ul><ul><li>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻读。</li></ul><ul><li>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞。</li></ul><p><br /></p><p>上面这样的教科书式定义第一次接触事务隔离概念的朋友看了可能会一脸懵逼，下面我们就通过具体的实例来解释四个隔离级别。</p><p><br /></p><p>首先我们创建一个user表：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22CREATE%20TABLE%20user%20(%5Cn%20%20%20%20%60id%60%20int(11)%20NOT%20NULL%20AUTO_INCREMENT%2C%5Cn%20%20%20%20%60name%60%20varchar(255)%20NOT%20NULL%2C%5Cn%20%20%20%20PRIMARY%20KEY%20(%60id%60)%2C%5Cn%20%20%20%20UNIQUE%20%60uniq_name%60%20USING%20BTREE%20(name)%5Cn)%20ENGINE%3D%60InnoDB%60%20AUTO_INCREMENT%3D10%20DEFAULT%20CHARACTER%20SET%20utf8%20COLLATE%20utf8_general_ci%3B%22%7D\"></card><p><br /></p><h2 id=\"815c458e\">读未提交隔离级别</h2><p><br /></p><p>我们先将事务的隔离级别设置为<code>read uncommitted</code>：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22mysql%3E%20set%20session%20transaction%20isolation%20level%20read%20uncommitted%3B%5CnQuery%20OK%2C%200%20rows%20affected%20(0.00%20sec)%5Cn%5Cnmysql%3E%20select%20%40%40session.tx_isolation%3B%5Cn%2B------------------------%2B%5Cn%7C%20%40%40session.tx_isolation%20%7C%5Cn%2B------------------------%2B%5Cn%7C%20READ-UNCOMMITTED%20%20%20%20%20%20%20%7C%5Cn%2B------------------------%2B%5Cn1%20row%20in%20set%20(0.00%20sec)%22%7D\"></card><p><br /></p><p>在下面我们开了两个终端分别用来模拟事务一和事务二，p.s: 操作一和操作二的意思是按照时间顺序来执行的。</p><p><br /></p><p><strong>事务1</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22mysql%3E%20start%20transaction%3B%20%23%20%E6%93%8D%E4%BD%9C1%5CnQuery%20OK%2C%200%20rows%20affected%20(0.00%20sec)%5Cn%5Cnmysql%3E%20insert%20into%20user(name)%20values('ziwenxie')%3B%20%23%20%E6%93%8D%E4%BD%9C3%5CnQuery%20OK%2C%201%20row%20affected%20(0.05%20sec)%22%7D\"></card><p><br /></p><p><strong>事务2</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22mysql%3E%20start%20transaction%3B%20%23%20%E6%93%8D%E4%BD%9C2%5CnQuery%20OK%2C%200%20rows%20affected%20(0.00%20sec)%5Cn%5Cnmysql%3E%20select%20*%20from%20user%3B%20%23%20%E6%93%8D%E4%BD%9C4%5Cn%2B----%2B----------%2B%5Cn%7C%20id%20%7C%20name%20%20%20%20%20%7C%5Cn%2B----%2B----------%2B%5Cn%7C%2010%20%7C%20ziwenxie%20%7C%5Cn%2B----%2B----------%2B%5Cn1%20row%20in%20set%20(0.00%20sec)%22%7D\"></card><p><br /></p><p>从上面的执行结果可以和清晰的看出来，在read uncommited级别下面我们在事务一中可能会读取到事务二中没有commit的数据，这就是脏读。</p><p><br /></p><h2 id=\"3fdc691d\">读提交隔离级别</h2><p><br /></p><p>通过设置隔离级别为<code>committed</code>可以解决上面的脏读问题。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22mysql%3E%20set%20session%20transaction%20isolation%20level%20read%20committed%3B%22%7D\"></card><p><br /></p><p><strong>事务一</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22mysql%3E%20start%20transaction%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%B8%80%5CnQuery%20OK%2C%200%20rows%20affected%20(0.00%20sec)%5Cn%5Cn%5Cnmysql%3E%20select%20*%20from%20user%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%B8%89%5Cn%2B----%2B----------%2B%5Cn%7C%20id%20%7C%20name%20%20%20%20%20%7C%5Cn%2B----%2B----------%2B%5Cn%7C%2010%20%7C%20ziwenxie%20%7C%5Cn%2B----%2B----------%2B%5Cn1%20row%20in%20set%20(0.00%20sec)%5Cn%5Cnmysql%3E%20select%20*%20from%20user%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%BA%94%EF%BC%8C%E6%93%8D%E4%BD%9C%E5%9B%9B%E7%9A%84%E4%BF%AE%E6%94%B9%E5%B9%B6%E6%B2%A1%E6%9C%89%E5%BD%B1%E5%93%8D%E5%88%B0%E4%BA%8B%E5%8A%A1%E4%B8%80%5Cn%2B----%2B----------%2B%5Cn%7C%20id%20%7C%20name%20%20%20%20%20%7C%5Cn%2B----%2B----------%2B%5Cn%7C%2010%20%7C%20ziwenxie%20%7C%5Cn%2B----%2B----------%2B%5Cn1%20row%20in%20set%20(0.00%20sec)%5Cn%5Cnmysql%3E%20select%20*%20from%20user%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%B8%83%5Cn%5Cn%2B----%2B------%2B%5Cn%7C%20id%20%7C%20name%20%7C%5Cn%2B----%2B------%2B%5Cn%7C%2010%20%7C%20lisi%20%7C%5Cn%2B----%2B------%2B%5Cn1%20row%20in%20set%20(0.00%20sec)%5Cn%5Cnmysql%3E%20commit%3B%20%23%20%E6%93%8D%E4%BD%9C%E5%85%AB%5CnQuery%20OK%2C%200%20rows%20affected%20(0.00%20sec)%22%7D\"></card><p><br /></p><p><strong>事务二</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22mysql%3E%20start%20transaction%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%BA%8C%5CnQuery%20OK%2C%200%20rows%20affected%20(0.00%20sec)%5Cn%5Cnmysql%3E%20update%20user%20set%20name%3D'lisi'%20where%20id%3D10%3B%20%23%20%E6%93%8D%E4%BD%9C%E5%9B%9B%5CnQuery%20OK%2C%201%20row%20affected%20(0.06%20sec)%5CnRows%20matched%3A%201%20%20Changed%3A%201%20%20Warnings%3A%200%5Cn%5Cnmysql%3E%20commit%3B%20%23%20%E6%93%8D%E4%BD%9C%E5%85%AD%5CnQuery%20OK%2C%200%20rows%20affected%20(0.08%20sec)%22%7D\"></card><p><br /></p><p>虽然脏读的问题解决了，但是注意在事务一的操作七中，事务二在操作六commit后会造成事务一在同一个transaction中两次读取到的数据不同，这就是不可重复读问题，使用第三个事务隔离级别repeatable read可以解决这个问题。</p><p><br /></p><h2 id=\"4716d740\">可重复读隔离级别</h2><p><br /></p><p>MySQL的Innodb存储引擎默认的事务隔离级别就是可重复读隔离级别，所以我们不用进行多余的设置。</p><p><br /></p><p><strong>事务一</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22mysql%3E%20start%20tansactoin%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%B8%80%5Cn%5Cnmysql%3E%20select%20*%20from%20user%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%BA%94%5Cn%2B----%2B----------%2B%5Cn%7C%20id%20%7C%20name%20%20%20%20%20%7C%5Cn%2B----%2B----------%2B%5Cn%7C%2010%20%7C%20ziwenxie%20%7C%5Cn%2B----%2B----------%2B%5Cn1%20row%20in%20set%20(0.00%20sec)%5Cn%5Cnmysql%3E%20commit%3B%20%23%20%E6%93%8D%E4%BD%9C%E5%85%AD%5CnQuery%20OK%2C%200%20rows%20affected%20(0.00%20sec)%5Cn%5Cnmysql%3E%20select%20*%20from%20user%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%B8%83%5Cn%2B----%2B------%2B%5Cn%7C%20id%20%7C%20name%20%7C%5Cn%2B----%2B------%2B%5Cn%7C%2010%20%7C%20lisi%20%7C%5Cn%2B----%2B------%2B%5Cn1%20row%20in%20set%20(0.00%20sec)%22%7D\"></card><p><br /></p><p><strong>事务二</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22mysql%3E%20start%20tansactoin%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%BA%8C%5Cn%5Cnmysql%3E%20update%20user%20set%20name%3D'lisi'%20where%20id%3D10%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%B8%89%5CnQuery%20OK%2C%201%20row%20affected%20(0.00%20sec)%5CnRows%20matched%3A%201%20%20Changed%3A%201%20%20Warnings%3A%200%5Cn%5Cnmysql%3E%20commit%3B%20%23%20%E6%93%8D%E4%BD%9C%E5%9B%9B%22%7D\"></card><p><br /></p><p>在事务一的操作五中我们并没有读取到事务二在操作三中的update，只有在commit之后才能读到更新后的数据。</p><p><br /></p><h3 id=\"924b55a7\">Innodb解决了幻读么</h3><p><br /></p><p>实际上RR级别是可能产生幻读，InnoDB引擎官方称中利用MVCC多版本并发控制解决了这个问题，下面我们验证一下Innodb真的解决了幻读了么？</p><p><br /></p><p>为了方便展示，我修改了一下上面的user表：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22mysql%3E%20alter%20table%20user%20add%20salary%20int(11)%3B%5CnQuery%20OK%2C%200%20rows%20affected%20(0.51%20sec)%5CnRecords%3A%200%20%20Duplicates%3A%200%20%20Warnings%3A%200%5Cn%5Cnmysql%3E%20delete%20from%20user%3B%5CnQuery%20OK%2C%201%20rows%20affected%20(0.07%20sec)%5Cn%5Cnmysql%3E%20insert%20into%20user(name%2C%20salary)%20value('ziwenxie'%2C%2088888888)%3B%5CnQuery%20OK%2C%201%20row%20affected%20(0.07%20sec)%5Cn%5Cnmysql%3E%20select%20*%20from%20user%3B%5Cn%2B----%2B----------%2B----------%2B%5Cn%7C%20id%20%7C%20name%20%20%20%20%20%7C%20salary%20%20%20%7C%5Cn%2B----%2B----------%2B----------%2B%5Cn%7C%2010%20%7C%20ziwenxie%20%7C%2088888888%20%7C%5Cn%2B----%2B----------%2B----------%2B%5Cn1%20row%20in%20set%20(0.00%20sec)%22%7D\"></card><p><br /></p><p><strong>事务一</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22mysql%3E%20start%20transaction%3B%20%20%23%20%E6%93%8D%E4%BD%9C%E4%B8%80%5CnQuery%20OK%2C%200%20rows%20affected%20(0.00%20sec)%5Cn%5Cnmysql%3E%20select%20*%20from%20user%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%B8%89%5Cn%2B----%2B----------%2B----------%2B%5Cn%7C%20id%20%7C%20name%20%20%20%20%20%7C%20salary%20%20%20%7C%5Cn%2B----%2B----------%2B----------%2B%5Cn%7C%2010%20%7C%20ziwenxie%20%7C%2088888888%20%7C%5Cn%2B----%2B----------%2B----------%2B%5Cn1%20row%20in%20set%20(0.00%20sec)%5Cn%5Cnmysql%3E%20update%20user%20set%20salary%3D'4444'%3B%20%23%20%E6%93%8D%E4%BD%9C%E5%85%AD%EF%BC%8C%E7%AB%9F%E7%84%B6%E5%BD%B1%E5%93%8D%E4%BA%86%E4%B8%A4%E8%A1%8C%EF%BC%8C%E4%B8%8D%E6%98%AF%E8%AF%B4%E8%A7%A3%E5%86%B3%E4%BA%86%E5%B9%BB%E8%AF%BB%E4%B9%88%EF%BC%9F%5CnQuery%20OK%2C%202%20rows%20affected%20(0.00%20sec)%5CnRows%20matched%3A%202%20%20Changed%3A%202%20%20Warnings%3A%200%5Cn%5Cnmysql%3E%20select%20*%20from%20user%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%B8%83%EF%BC%8C%20Innodb%E5%B9%B6%E6%B2%A1%E6%9C%89%E5%AE%8C%E5%85%A8%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB%5Cn%2B----%2B----------%2B--------%2B%5Cn%7C%20id%20%7C%20name%20%20%20%20%20%7C%20salary%20%7C%5Cn%2B----%2B----------%2B--------%2B%5Cn%7C%2010%20%7C%20ziwenxie%20%7C%20%20%204444%20%7C%5Cn%7C%2011%20%7C%20zhangsan%20%7C%20%20%204444%20%7C%5Cn%2B----%2B----------%2B--------%2B%5Cn2%20rows%20in%20set%20(0.00%20sec)%5Cn%5Cnmysql%3E%20commit%3B%20%23%20%E6%93%8D%E4%BD%9C%E5%85%AB%5CnQuery%20OK%2C%200%20rows%20affected%20(0.04%20sec)%22%7D\"></card><p><br /></p><p><strong>事务二</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22mysql%3E%20start%20transaction%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%BA%8C%5CnQuery%20OK%2C%200%20rows%20affected%20(0.00%20sec)%5Cn%5Cnmysql%3E%20insert%20into%20user(name%2C%20salary)%20value('zhangsan'%2C%20'666666')%3B%20%23%20%E6%93%8D%E4%BD%9C%E5%9B%9B%5CnQuery%20OK%2C%201%20row%20affected%20(0.00%20sec)%5Cn%5Cnmysql%3E%20commit%3B%20%23%20%E6%93%8D%E4%BD%9C%E4%BA%94%5CnQuery%20OK%2C%200%20rows%20affected%20(0.04%20sec)%22%7D\"></card><p><br /></p><p>从上面的例子可以看出，Innodb并没有如官方所说解决幻读，不过上面这样的场景中也不是很常见不用过多的担心。</p><p><br /></p><h2 id=\"76a4df16\">串行化隔离级别</h2><p><br /></p><p>所有事务串行执行，最高隔离级别，不会出现幻读性能会很差，实际开发中很少使用到。</p><p><br /></p><h3 id=\"2432b575\">备注</h3><ul><li>脏读：读到了其他会话还未提交的更新</li><li><cursor />幻读：读取到其他会话的新增或者删除，侧重于数量的改变</li><li>不可重复读：同一个会话中两次执行相同的语句得到的结果不同</li></ul><p><br /></p><h2 id=\"Contact\">Contact</h2><p><br /></p><p>GitHub: <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fziwenxie\" target=\"_blank\">github.com/ziwenxie</a><br />\nBlog: <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.ziwenxie.site\" target=\"_blank\">www.ziwenxie.site</a></p><p><br /></p><blockquote><p>本文同步发于我的<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.ziwenxie.site%2F2017%2F08%2F08%2Fmysql-transaction-isolation%2F\" target=\"_blank\">个人博客</a>，转载请声明博客出处 <card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fgw.alipayobjects.com%2Fos%2Flib%2Ftwemoji%2F11.2.0%2F2%2Fsvg%2F1f603.svg%22%2C%22originWidth%22%3A150%2C%22originHeight%22%3A150%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A18%2C%22height%22%3A18%7D\"></card></p></blockquote>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-03-15T06:17:16.000Z",
    "deleted_at": null,
    "created_at": "2019-03-15T01:37:09.000Z",
    "updated_at": "2019-06-24T06:29:02.000Z",
    "published_at": "2019-03-15T06:17:16.000Z",
    "first_published_at": null,
    "word_count": 1596,
    "cover": null,
    "description": "数据库事务有四种隔离级别：未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据。提交读(Read Committed)：只能读取到已经提交的数据，Oracle等多数数据库默认都是该级别。可重复读(Repeated Read)：可重复读。在同一个...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1303340,
    "slug": "7ea70724-0b63-760c-8b88-6a9ae95775b8",
    "title": "MySQL使用可重复读作为默认隔离级别的原因 - vinchen - 博客园",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "一般的DBMS系统，默认都会使用读提交（Read-Comitted，RC）作为默认隔离级别，如Oracle、SQL Server等，而MySQL却使用可重复读（Read-Repeatable，RR）。要知道，越高的隔离级别，能解决的数据一致性问题越多，理论上性能损耗更大，可并发性越低。隔离级别依次为\n\nSERIALIZABLE > RR > RC > Read-Uncommited\n\n在SQL标准中，前三种隔离级别分别解决了幻象读、不可重复读和脏读的问题。那么，为什么MySQL使用可重复读作为默认隔离级别呢？\n\nBinlog是MySQL的逻辑操作日志，广泛应用于复制和恢复。MySQL 5.1以前，Statement是Binlog的默认格式，即依次记录系统接受的SQL请求；5.1及以后，MySQL提供了Row和Mixed两个Binlog格式。\n\n从MySQL 5.1开始，如果打开语句级Binlog，就不支持RC和Read-Uncommited隔离级别。要想使用RC隔离级别，必须使用Mixed或Row格式。\n\nmysql> set tx_isolation='read-committed';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t1 values(1,1);\n\nERROR 1598 (HY000): Binary logging not possible. Message: Transaction level 'READ-COMMITTED' in InnoDB is not safe for binlog mode 'STATEMENT'\n\n那么，为什么RC隔离级别不支持语句级Binlog呢？我们关闭binlog，做以下测试。\n\n会话1\n\n会话2\n\nuse test;\n\n#初始化数据\n\ncreate table t1(c1 int, c2 int) engine=innodb;\n\ncreate table t2(c1 int, c2 int) engine=innodb;\n\ninsert into t1 values(1,1), (2,2);\n\ninsert into t2 values(1,1), (2,2);\n\n#设置隔离级别\n\nset tx_isolation='read-committed';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#连续更新两次\n\nmysql> Begin;\n\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> update t2 set c2 = 3 where c1 in (select c1 from t1);\n\nQuery OK, 2 rows affected (0.00 sec)\n\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> update t2 set c2 = 4 where c1 in (select c1 from t1);\n\nQuery OK, 1 row affected (0.00 sec)\n\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from t2;\n\n+------+------+\n\n| c1   | c2   |\n\n+------+------+\n\n|    1 |    4 |\n\n|    2 |    3 |\n\n+------+------+\n\n2 rows in set (0.00 sec)\n\nmysql> commit;\n\n#设置隔离级别\n\nset tx_isolation='read-committed';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#两次更新之间执行删除\n\nmysql> delete from t1 where c1 = 2;\n\nQuery OK, 1 row affected (0.03 sec)\n\n由以上测试知，RC隔离级别下，会话2执行时序在会话1事务的语句之间，并且会话2的操作影响了会话1的结果，这会对Binlog结果造成影响。\n\n由于Binlog中语句的顺序以commit为序，如果语句级Binlog允许，两会话的执行时序是\n\n#会话2\n\nset tx_isolation='read-committed';\n\ndelete from t1 where c1 = 2;\n\ncommit;\n\n#会话1\n\nset tx_isolation='read-committed';\n\nBegin;\n\nupdate t2 set c2 = 3 where c1 in (select c1 from t1);\n\nupdate t2 set c2 = 4 where c1 in (select c1 from t1);\n\nselect * from t2;\n\n+------+------+\n\n| c1   | c2   |\n\n+------+------+\n\n|    1 |    4 |\n\n|    2 |    2 |\n\n+------+------+\n\n2 rows in set (0.00 sec)\n\ncommit;\n\n由上可知，在MySQL 5.1及以上的RC隔离级别下，语句级Binlog在DR上执行的结果是不正确的！\n\n那么，MySQL 5.0呢？5.0允许RC下语句级Binlog，是不是说很容易产生DB/DR不一致呢？\n\n事实上，在5.0重复上述一个测试，并不存在这个问题，原因是5.0的RC与5.1的RR使用类似的并发和上锁机制，也就是说，MySQL 5.0的RC与5.1及以上的RC可能存在兼容性问题。\n\n下面看看RR是怎么解决这个问题的。\n\n导致RC隔离级别DB/DR不一致的原因是：RC不可重复读，而Binlog要求SQL串行化！\n\n在RR下，重复以上测试\n\n会话1\n\n会话2\n\nuse test;\n\n#初始化数据\n\ncreate table t1(c1 int, c2 int) engine=innodb;\n\ncreate table t2(c1 int, c2 int) engine=innodb;\n\ninsert into t1 values(1,1), (2,2);\n\ninsert into t2 values(1,1), (2,2);\n\n#设置隔离级别\n\nset tx_isolation='repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#连续更新两次\n\nmysql> Begin;\n\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> update t2 set c2 = 3 where c1 in (select c1 from t1);\n\nQuery OK, 2 rows affected (0.00 sec)\n\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> update t2 set c2 = 4 where c1 in (select c1 from t1);\n\nQuery OK, 2 rows affected (0.00 sec)\n\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> select * from t2;\n\n+------+------+\n\n| c1   | c2   |\n\n+------+------+\n\n|    1 |    4 |\n\n|    2 |    4 |\n\n+------+------+\n\n2 rows in set (0.00 sec)\n\nmysql> commit;\n\n#设置隔离级别\n\nset tx_isolation=' repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#两次更新之间执行删除\n\nmysql> delete from t1 where c1 = 2;\n\n--阻塞，直到会话1提交\n\nQuery OK, 1 row affected (18.94 sec)\n\n与RC隔离级别不同的是，在RR中，由于保证可重复读，会话2的delete语句会被会话1阻塞，直到会话1提交。\n\n在RR中，会话1语句update t2 set c2 = 3 where c1 in (select c1 from t1)会先在t1的记录上S锁（5.1的RC中不会上这个锁，但5.0的RC会），接着在t2的满足条件的记录上X锁。由于会话1没提交，会话2的delete语句需要等待会话1的S锁释放，于是阻塞。\n\n因此，在RR中，以上测试会话1、会话2的依次执行，与Binlog的顺序一致，从而保证DB/DR一致。\n\n<a name=\"d5zrtw\"></a>\n## [](#d5zrtw)幻象读\n\n除了保证可重复读，MySQL的RR还一定程度上避免了幻象读（幻象读是由于插入导致的新记录）。（为什么说一定程度呢？参考第3节可重复读和串行化的区别。）\n\n会话1\n\n会话2\n\nuse test;\n\n#初始化数据\n\ncreate table t1(c1 int primary key, c2 int) engine=innodb;\n\ncreate table t2(c1 int primary key, c2 int) engine=innodb;\n\ninsert into t1 values(1,1), (10,10);\n\ninsert into t2 values(1,1), (5,5), (10,10);\n\n#设置隔离级别\n\nset tx_isolation='repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#连续更新两次\n\nmysql> Begin;\n\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> update t2 set c2 = 20 where c1 in (select c1 from t1);\n\nQuery OK, 2 rows affected (0.00 sec)\n\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> delete from where c1 in (select c1 from t1);\n\nQuery OK, 2 rows affected (0.00 sec)\n\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> select * from t2;\n\n+------+------+\n\n| c1   | c2   |\n\n+------+------+\n\n|    5 |    5 |\n\n+------+------+\n\n2 rows in set (0.00 sec)\n\nmysql> commit;\n\n#设置隔离级别\n\nset tx_isolation=' repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#两次更新之间执行插入\n\nmysql> insert into t1 values(5,5);\n\n--阻塞，直到会话1提交\n\nQuery OK, 1 row affected (18.94 sec)\n\n由上述例子知，会话2的插入操作被阻塞了，原因是RR隔离级别中，除了记录锁外，还会上间隙锁(gap锁)。例如，对于表t1，update t2 set c2 = 20 where c1 in (select c1 from t1)以上的锁包括：\n\n(-∞, 1), 1, (1, 10), 10, (10, +∞)\n\n由于对t1做全表扫描，因此，所有记录和间隙都要上锁，其中(x,y)表示间隙锁，数字表示记录锁，全部都是S锁。会话2的insert操作插入5，位于间隙(1,10)，需要获得这个间隙的X锁，因此两操作互斥，会话2阻塞。\n\nSQL标准的RR并不要求避免幻象读，而InnoDB通过gap锁来避免幻象，从而实现SQL的可串行化，保证Binlog的一致性。\n\n要想取消gap lock，可使用参数[innodb_lock_unsafe_for_binlog](#sysvar_innodb_locks_unsafe_for_binlog)=1，默认为0。\n\nInnoDB的RR可以避免不可重复读和幻象读，那么与串行化有什么区别呢？\n\n会话1\n\n会话2\n\nuse test;\n\n#初始化数据\n\ncreate table t3(c1 int primary key, c2 int) engine=innodb;\n\n#设置隔离级别\n\nset tx_isolation='repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> Begin;\n\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> select * from t3 where c1 = 1;\n\nEmpty set (0.00 sec)\n\nmysql> select * from t3 where c1 = 1;\n\nEmpty set (0.00 sec)\n\nmysql> update t3 set c2 =2 where c1 = 1;\n\nQuery OK, 1 row affected (0.00 sec)\n\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from t3 where c1 = 1;\n\n+----+------+\n\n| c1 | c2   |\n\n+----+------+\n\n|  1 |    2 |\n\n+----+------+\n\n1 row in set (0.00 sec)\n\nmysql> commit;\n\n#设置隔离级别\n\nset tx_isolation=' repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t3 values(1,1);\n\nQuery OK, 1 row affected (0.05 sec)\n\n由上述会话1中，连续两次读不到数据，但更新却成功，并且更新后的相同读操作就能读到数据了，这算不算幻读呢？\n\n其实，RR隔离级别的防止幻象主要是针对写操作的，即只保证写操作的可串行化，因为只有写操作影响Binlog；而读操作是通过MVCC来保证一致性读（无幻象）。\n\n然而，可串行化隔离级别要求读写可串行化。使用可串行化重做以上测试。\n\n会话1\n\n会话2\n\nuse test;\n\n#初始化数据\n\ncreate table t3(c1 int primary key, c2 int) engine=innodb;\n\n#设置隔离级别\n\nset tx_isolation='SERIALIZABLE';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> Begin;\n\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> select * from t3 where c1 = 1;\n\nEmpty set (0.00 sec)\n\nmysql> select * from t3 where c1 = 1;\n\nEmpty set (0.00 sec)\n\nmysql> update t3 set c2 =2 where c1 = 1;\n\nQuery OK, 0 rows affected (0.00 sec)\n\nRows matched: 0  Changed: 0  Warnings: 0\n\nmysql> select * from t3 where c1 = 1;\n\nEmpty set (0.00 sec)\n\nmysql> commit;\n\n#设置隔离级别\n\nset tx_isolation='SERIALIZABLE';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t3 values(1,1);\n\n#阻塞，直到会话1提交\n\nQuery OK, 1 row affected (48.90 sec)\n\n设置为串行化后，会话2的插入操作被阻塞。由于在串行化下，查询操作不在使用MVCC来保证一致读，而是使用S锁来阻塞其他写操作。因此做到读写可串行化，然而换来就是并发性能的大大降低。\n\nMySQL使用可重复读来作为默认隔离级别的主要原因是语句级的Binlog。RR能提供SQL语句的写可串行化，保证了绝大部分情况（[不安全语句](http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html)除外）的DB/DR一致。\n\n另外，通过这个测试发现MySQL 5.0与5.1在RC下表现是不一样的，可能存在兼容性问题。\n\n[http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html](http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html)\n\n[http://dev.mysql.com/doc/refman/5.1/en/set-transaction.html](http://dev.mysql.com/doc/refman/5.1/en/set-transaction.html)\n\n[http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html](http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html)\n\n[http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_locks_unsafe_for_binlog](http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_locks_unsafe_for_binlog)\n\n[http://blog.bitfly.cn/post/mysql-innodb-phantom-read/](http://blog.bitfly.cn/post/mysql-innodb-phantom-read/)\n",
    "body_draft": "一般的DBMS系统，默认都会使用读提交（Read-Comitted，RC）作为默认隔离级别，如Oracle、SQL Server等，而MySQL却使用可重复读（Read-Repeatable，RR）。要知道，越高的隔离级别，能解决的数据一致性问题越多，理论上性能损耗更大，可并发性越低。隔离级别依次为\n\nSERIALIZABLE > RR > RC > Read-Uncommited\n\n在SQL标准中，前三种隔离级别分别解决了幻象读、不可重复读和脏读的问题。那么，为什么MySQL使用可重复读作为默认隔离级别呢？\n\nBinlog是MySQL的逻辑操作日志，广泛应用于复制和恢复。MySQL 5.1以前，Statement是Binlog的默认格式，即依次记录系统接受的SQL请求；5.1及以后，MySQL提供了Row和Mixed两个Binlog格式。\n\n从MySQL 5.1开始，如果打开语句级Binlog，就不支持RC和Read-Uncommited隔离级别。要想使用RC隔离级别，必须使用Mixed或Row格式。\n\nmysql> set tx\\_isolation='read-committed';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t1 values(1,1);\n\nERROR 1598 (HY000): Binary logging not possible. Message: Transaction level 'READ-COMMITTED' in InnoDB is not safe for binlog mode 'STATEMENT'\n\n那么，为什么RC隔离级别不支持语句级Binlog呢？我们关闭binlog，做以下测试。\n\n会话1\n\n会话2\n\nuse test;\n\n#初始化数据\n\ncreate table t1(c1 int, c2 int) engine=innodb;\n\ncreate table t2(c1 int, c2 int) engine=innodb;\n\ninsert into t1 values(1,1), (2,2);\n\ninsert into t2 values(1,1), (2,2);\n\n#设置隔离级别\n\nset tx\\_isolation='read-committed';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#连续更新两次\n\nmysql> Begin;\n\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> update t2 set c2 = 3 where c1 in (select c1 from t1);\n\nQuery OK, 2 rows affected (0.00 sec)\n\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> update t2 set c2 = 4 where c1 in (select c1 from t1);\n\nQuery OK, 1 row affected (0.00 sec)\n\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select \\* from t2;\n\n+------+------+\n\n| c1   | c2   |\n\n+------+------+\n\n|    1 |    4 |\n\n|    2 |    3 |\n\n+------+------+\n\n2 rows in set (0.00 sec)\n\nmysql> commit;\n\n#设置隔离级别\n\nset tx\\_isolation='read-committed';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#两次更新之间执行删除\n\nmysql> delete from t1 where c1 = 2;\n\nQuery OK, 1 row affected (0.03 sec)\n\n由以上测试知，RC隔离级别下，会话2执行时序在会话1事务的语句之间，并且会话2的操作影响了会话1的结果，这会对Binlog结果造成影响。\n\n由于Binlog中语句的顺序以commit为序，如果语句级Binlog允许，两会话的执行时序是\n\n#会话2\n\nset tx\\_isolation='read-committed';\n\ndelete from t1 where c1 = 2;\n\ncommit;\n\n#会话1\n\nset tx\\_isolation='read-committed';\n\nBegin;\n\nupdate t2 set c2 = 3 where c1 in (select c1 from t1);\n\nupdate t2 set c2 = 4 where c1 in (select c1 from t1);\n\nselect \\* from t2;\n\n+------+------+\n\n| c1   | c2   |\n\n+------+------+\n\n|    1 |    4 |\n\n|    2 |    2 |\n\n+------+------+\n\n2 rows in set (0.00 sec)\n\ncommit;\n\n由上可知，在MySQL 5.1及以上的RC隔离级别下，语句级Binlog在DR上执行的结果是不正确的！\n\n那么，MySQL 5.0呢？5.0允许RC下语句级Binlog，是不是说很容易产生DB/DR不一致呢？\n\n事实上，在5.0重复上述一个测试，并不存在这个问题，原因是5.0的RC与5.1的RR使用类似的并发和上锁机制，也就是说，MySQL 5.0的RC与5.1及以上的RC可能存在兼容性问题。\n\n下面看看RR是怎么解决这个问题的。\n\n导致RC隔离级别DB/DR不一致的原因是：RC不可重复读，而Binlog要求SQL串行化！\n\n在RR下，重复以上测试\n\n会话1\n\n会话2\n\nuse test;\n\n#初始化数据\n\ncreate table t1(c1 int, c2 int) engine=innodb;\n\ncreate table t2(c1 int, c2 int) engine=innodb;\n\ninsert into t1 values(1,1), (2,2);\n\ninsert into t2 values(1,1), (2,2);\n\n#设置隔离级别\n\nset tx\\_isolation='repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#连续更新两次\n\nmysql> Begin;\n\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> update t2 set c2 = 3 where c1 in (select c1 from t1);\n\nQuery OK, 2 rows affected (0.00 sec)\n\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> update t2 set c2 = 4 where c1 in (select c1 from t1);\n\nQuery OK, 2 rows affected (0.00 sec)\n\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> select \\* from t2;\n\n+------+------+\n\n| c1   | c2   |\n\n+------+------+\n\n|    1 |    4 |\n\n|    2 |    4 |\n\n+------+------+\n\n2 rows in set (0.00 sec)\n\nmysql> commit;\n\n#设置隔离级别\n\nset tx\\_isolation=' repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#两次更新之间执行删除\n\nmysql> delete from t1 where c1 = 2;\n\n--阻塞，直到会话1提交\n\nQuery OK, 1 row affected (18.94 sec)\n\n与RC隔离级别不同的是，在RR中，由于保证可重复读，会话2的delete语句会被会话1阻塞，直到会话1提交。\n\n在RR中，会话1语句update t2 set c2 = 3 where c1 in (select c1 from t1)会先在t1的记录上S锁（5.1的RC中不会上这个锁，但5.0的RC会），接着在t2的满足条件的记录上X锁。由于会话1没提交，会话2的delete语句需要等待会话1的S锁释放，于是阻塞。\n\n因此，在RR中，以上测试会话1、会话2的依次执行，与Binlog的顺序一致，从而保证DB/DR一致。\n\n## <a name=\"d5zrtw\"></a>幻象读\n\n除了保证可重复读，MySQL的RR还一定程度上避免了幻象读（幻象读是由于插入导致的新记录）。（为什么说一定程度呢？参考第3节可重复读和串行化的区别。）\n\n会话1\n\n会话2\n\nuse test;\n\n#初始化数据\n\ncreate table t1(c1 int primary key, c2 int) engine=innodb;\n\ncreate table t2(c1 int primary key, c2 int) engine=innodb;\n\ninsert into t1 values(1,1), (10,10);\n\ninsert into t2 values(1,1), (5,5), (10,10);\n\n#设置隔离级别\n\nset tx\\_isolation='repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#连续更新两次\n\nmysql> Begin;\n\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> update t2 set c2 = 20 where c1 in (select c1 from t1);\n\nQuery OK, 2 rows affected (0.00 sec)\n\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> delete from where c1 in (select c1 from t1);\n\nQuery OK, 2 rows affected (0.00 sec)\n\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> select \\* from t2;\n\n+------+------+\n\n| c1   | c2   |\n\n+------+------+\n\n|    5 |    5 |\n\n+------+------+\n\n2 rows in set (0.00 sec)\n\nmysql> commit;\n\n#设置隔离级别\n\nset tx\\_isolation=' repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\n#两次更新之间执行插入\n\nmysql> insert into t1 values(5,5);\n\n--阻塞，直到会话1提交\n\nQuery OK, 1 row affected (18.94 sec)\n\n由上述例子知，会话2的插入操作被阻塞了，原因是RR隔离级别中，除了记录锁外，还会上间隙锁(gap锁)。例如，对于表t1，update t2 set c2 = 20 where c1 in (select c1 from t1)以上的锁包括：\n\n(-∞, 1), 1, (1, 10), 10, (10, +∞)\n\n由于对t1做全表扫描，因此，所有记录和间隙都要上锁，其中(x,y)表示间隙锁，数字表示记录锁，全部都是S锁。会话2的insert操作插入5，位于间隙(1,10)，需要获得这个间隙的X锁，因此两操作互斥，会话2阻塞。\n\nSQL标准的RR并不要求避免幻象读，而InnoDB通过gap锁来避免幻象，从而实现SQL的可串行化，保证Binlog的一致性。\n\n要想取消gap lock，可使用参数[innodb\\_lock\\_unsafe\\_for\\_binlog](#sysvar_innodb_locks_unsafe_for_binlog)=1，默认为0。\n\nInnoDB的RR可以避免不可重复读和幻象读，那么与串行化有什么区别呢？\n\n会话1\n\n会话2\n\nuse test;\n\n#初始化数据\n\ncreate table t3(c1 int primary key, c2 int) engine=innodb;\n\n#设置隔离级别\n\nset tx\\_isolation='repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> Begin;\n\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> select \\* from t3 where c1 = 1;\n\nEmpty set (0.00 sec)\n\nmysql> select \\* from t3 where c1 = 1;\n\nEmpty set (0.00 sec)\n\nmysql> update t3 set c2 =2 where c1 = 1;\n\nQuery OK, 1 row affected (0.00 sec)\n\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select \\* from t3 where c1 = 1;\n\n+----+------+\n\n| c1 | c2   |\n\n+----+------+\n\n|  1 |    2 |\n\n+----+------+\n\n1 row in set (0.00 sec)\n\nmysql> commit;\n\n#设置隔离级别\n\nset tx\\_isolation=' repeatable-read';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t3 values(1,1);\n\nQuery OK, 1 row affected (0.05 sec)\n\n由上述会话1中，连续两次读不到数据，但更新却成功，并且更新后的相同读操作就能读到数据了，这算不算幻读呢？\n\n其实，RR隔离级别的防止幻象主要是针对写操作的，即只保证写操作的可串行化，因为只有写操作影响Binlog；而读操作是通过MVCC来保证一致性读（无幻象）。\n\n然而，可串行化隔离级别要求读写可串行化。使用可串行化重做以上测试。\n\n会话1\n\n会话2\n\nuse test;\n\n#初始化数据\n\ncreate table t3(c1 int primary key, c2 int) engine=innodb;\n\n#设置隔离级别\n\nset tx\\_isolation='SERIALIZABLE';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> Begin;\n\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> select \\* from t3 where c1 = 1;\n\nEmpty set (0.00 sec)\n\nmysql> select \\* from t3 where c1 = 1;\n\nEmpty set (0.00 sec)\n\nmysql> update t3 set c2 =2 where c1 = 1;\n\nQuery OK, 0 rows affected (0.00 sec)\n\nRows matched: 0  Changed: 0  Warnings: 0\n\nmysql> select \\* from t3 where c1 = 1;\n\nEmpty set (0.00 sec)\n\nmysql> commit;\n\n#设置隔离级别\n\nset tx\\_isolation='SERIALIZABLE';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t3 values(1,1);\n\n#阻塞，直到会话1提交\n\nQuery OK, 1 row affected (48.90 sec)\n\n设置为串行化后，会话2的插入操作被阻塞。由于在串行化下，查询操作不在使用MVCC来保证一致读，而是使用S锁来阻塞其他写操作。因此做到读写可串行化，然而换来就是并发性能的大大降低。\n\nMySQL使用可重复读来作为默认隔离级别的主要原因是语句级的Binlog。RR能提供SQL语句的写可串行化，保证了绝大部分情况（[不安全语句](http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html)除外）的DB/DR一致。\n\n另外，通过这个测试发现MySQL 5.0与5.1在RC下表现是不一样的，可能存在兼容性问题。\n\n[http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html](http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html)\n\n[http://dev.mysql.com/doc/refman/5.1/en/set-transaction.html](http://dev.mysql.com/doc/refman/5.1/en/set-transaction.html)\n\n[http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html](http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html)\n\n[http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar\\_innodb\\_locks\\_unsafe\\_for\\_binlog](http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_locks_unsafe_for_binlog)\n\n[http://blog.bitfly.cn/post/mysql-innodb-phantom-read/](http://blog.bitfly.cn/post/mysql-innodb-phantom-read/)\n",
    "body_html": "<p>一般的DBMS系统，默认都会使用读提交（Read-Comitted，RC）作为默认隔离级别，如Oracle、SQL Server等，而MySQL却使用可重复读（Read-Repeatable，RR）。要知道，越高的隔离级别，能解决的数据一致性问题越多，理论上性能损耗更大，可并发性越低。隔离级别依次为</p><p><br /></p><p>SERIALIZABLE &gt; RR &gt; RC &gt; Read-Uncommited</p><p><br /></p><p>在SQL标准中，前三种隔离级别分别解决了幻象读、不可重复读和脏读的问题。那么，为什么MySQL使用可重复读作为默认隔离级别呢？</p><p><br /></p><p>Binlog是MySQL的逻辑操作日志，广泛应用于复制和恢复。MySQL 5.1以前，Statement是Binlog的默认格式，即依次记录系统接受的SQL请求；5.1及以后，MySQL提供了Row和Mixed两个Binlog格式。</p><p><br /></p><p>从MySQL 5.1开始，如果打开语句级Binlog，就不支持RC和Read-Uncommited隔离级别。要想使用RC隔离级别，必须使用Mixed或Row格式。</p><p><br /></p><p>mysql&gt; set tx_isolation='read-committed';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>mysql&gt; insert into t1 values(1,1);</p><p><br /></p><p>ERROR 1598 (HY000): Binary logging not possible. Message: Transaction level 'READ-COMMITTED' in InnoDB is not safe for binlog mode 'STATEMENT'</p><p><br /></p><p>那么，为什么RC隔离级别不支持语句级Binlog呢？我们关闭binlog，做以下测试。</p><p><br /></p><p>会话1</p><p><br /></p><p>会话2</p><p><br /></p><p>use test;</p><p><br /></p><p>#初始化数据</p><p><br /></p><p>create table t1(c1 int, c2 int) engine=innodb;</p><p><br /></p><p>create table t2(c1 int, c2 int) engine=innodb;</p><p><br /></p><p>insert into t1 values(1,1), (2,2);</p><p><br /></p><p>insert into t2 values(1,1), (2,2);</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='read-committed';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#连续更新两次</p><p><br /></p><p>mysql&gt; Begin;</p><p><br /></p><p>Query OK, 0 rows affected (0.03 sec)</p><p><br /></p><p>mysql&gt; update t2 set c2 = 3 where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 2 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 2  Changed: 2  Warnings: 0</p><p><br /></p><p>mysql&gt; update t2 set c2 = 4 where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 1 row affected (0.00 sec)</p><p><br /></p><p>Rows matched: 1  Changed: 1  Warnings: 0</p><p><br /></p><p>mysql&gt; select * from t2;</p><p><br /></p><p>+------+------+</p><p><br /></p><p>| c1   | c2   |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>|    1 |    4 |</p><p><br /></p><p>|    2 |    3 |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>2 rows in set (0.00 sec)</p><p><br /></p><p>mysql&gt; commit;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='read-committed';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#两次更新之间执行删除</p><p><br /></p><p>mysql&gt; delete from t1 where c1 = 2;</p><p><br /></p><p>Query OK, 1 row affected (0.03 sec)</p><p><br /></p><p>由以上测试知，RC隔离级别下，会话2执行时序在会话1事务的语句之间，并且会话2的操作影响了会话1的结果，这会对Binlog结果造成影响。</p><p><br /></p><p>由于Binlog中语句的顺序以commit为序，如果语句级Binlog允许，两会话的执行时序是</p><p><br /></p><p>#会话2</p><p><br /></p><p>set tx_isolation='read-committed';</p><p><br /></p><p>delete from t1 where c1 = 2;</p><p><br /></p><p>commit;</p><p><br /></p><p>#会话1</p><p><br /></p><p>set tx_isolation='read-committed';</p><p><br /></p><p>Begin;</p><p><br /></p><p>update t2 set c2 = 3 where c1 in (select c1 from t1);</p><p><br /></p><p>update t2 set c2 = 4 where c1 in (select c1 from t1);</p><p><br /></p><p>select * from t2;</p><p><br /></p><p>+------+------+</p><p><br /></p><p>| c1   | c2   |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>|    1 |    4 |</p><p><br /></p><p>|    2 |    2 |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>2 rows in set (0.00 sec)</p><p><br /></p><p>commit;</p><p><br /></p><p>由上可知，在MySQL 5.1及以上的RC隔离级别下，语句级Binlog在DR上执行的结果是不正确的！</p><p><br /></p><p>那么，MySQL 5.0呢？5.0允许RC下语句级Binlog，是不是说很容易产生DB/DR不一致呢？</p><p><br /></p><p>事实上，在5.0重复上述一个测试，并不存在这个问题，原因是5.0的RC与5.1的RR使用类似的并发和上锁机制，也就是说，MySQL 5.0的RC与5.1及以上的RC可能存在兼容性问题。</p><p><br /></p><p>下面看看RR是怎么解决这个问题的。</p><p><br /></p><p>导致RC隔离级别DB/DR不一致的原因是：RC不可重复读，而Binlog要求SQL串行化！</p><p><br /></p><p>在RR下，重复以上测试</p><p><br /></p><p>会话1</p><p><br /></p><p>会话2</p><p><br /></p><p>use test;</p><p><br /></p><p>#初始化数据</p><p><br /></p><p>create table t1(c1 int, c2 int) engine=innodb;</p><p><br /></p><p>create table t2(c1 int, c2 int) engine=innodb;</p><p><br /></p><p>insert into t1 values(1,1), (2,2);</p><p><br /></p><p>insert into t2 values(1,1), (2,2);</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#连续更新两次</p><p><br /></p><p>mysql&gt; Begin;</p><p><br /></p><p>Query OK, 0 rows affected (0.03 sec)</p><p><br /></p><p>mysql&gt; update t2 set c2 = 3 where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 2 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 2  Changed: 2  Warnings: 0</p><p><br /></p><p>mysql&gt; update t2 set c2 = 4 where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 2 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 2  Changed: 2  Warnings: 0</p><p><br /></p><p>mysql&gt; select * from t2;</p><p><br /></p><p>+------+------+</p><p><br /></p><p>| c1   | c2   |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>|    1 |    4 |</p><p><br /></p><p>|    2 |    4 |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>2 rows in set (0.00 sec)</p><p><br /></p><p>mysql&gt; commit;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation=' repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#两次更新之间执行删除</p><p><br /></p><p>mysql&gt; delete from t1 where c1 = 2;</p><p><br /></p><p>--阻塞，直到会话1提交</p><p><br /></p><p>Query OK, 1 row affected (18.94 sec)</p><p><br /></p><p>与RC隔离级别不同的是，在RR中，由于保证可重复读，会话2的delete语句会被会话1阻塞，直到会话1提交。</p><p><br /></p><p>在RR中，会话1语句update t2 set c2 = 3 where c1 in (select c1 from t1)会先在t1的记录上S锁（5.1的RC中不会上这个锁，但5.0的RC会），接着在t2的满足条件的记录上X锁。由于会话1没提交，会话2的delete语句需要等待会话1的S锁释放，于是阻塞。</p><p><br /></p><p>因此，在RR中，以上测试会话1、会话2的依次执行，与Binlog的顺序一致，从而保证DB/DR一致。</p><p><br /></p><h2 id=\"d5zrtw\"><a href=\"#d5zrtw\"></a>幻象读</h2><p><br /></p><p>除了保证可重复读，MySQL的RR还一定程度上避免了幻象读（幻象读是由于插入导致的新记录）。（为什么说一定程度呢？参考第3节可重复读和串行化的区别。）</p><p><br /></p><p>会话1</p><p><br /></p><p>会话2</p><p><br /></p><p>use test;</p><p><br /></p><p>#初始化数据</p><p><br /></p><p>create table t1(c1 int primary key, c2 int) engine=innodb;</p><p><br /></p><p>create table t2(c1 int primary key, c2 int) engine=innodb;</p><p><br /></p><p>insert into t1 values(1,1), (10,10);</p><p><br /></p><p>insert into t2 values(1,1), (5,5), (10,10);</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#连续更新两次</p><p><br /></p><p>mysql&gt; Begin;</p><p><br /></p><p>Query OK, 0 rows affected (0.03 sec)</p><p><br /></p><p>mysql&gt; update t2 set c2 = 20 where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 2 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 2  Changed: 2  Warnings: 0</p><p><br /></p><p>mysql&gt; delete from where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 2 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 2  Changed: 2  Warnings: 0</p><p><br /></p><p>mysql&gt; select * from t2;</p><p><br /></p><p>+------+------+</p><p><br /></p><p>| c1   | c2   |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>|    5 |    5 |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>2 rows in set (0.00 sec)</p><p><br /></p><p>mysql&gt; commit;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation=' repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#两次更新之间执行插入</p><p><br /></p><p>mysql&gt; insert into t1 values(5,5);</p><p><br /></p><p>--阻塞，直到会话1提交</p><p><br /></p><p>Query OK, 1 row affected (18.94 sec)</p><p><br /></p><p>由上述例子知，会话2的插入操作被阻塞了，原因是RR隔离级别中，除了记录锁外，还会上间隙锁(gap锁)。例如，对于表t1，update t2 set c2 = 20 where c1 in (select c1 from t1)以上的锁包括：</p><p><br /></p><p>(-∞, 1), 1, (1, 10), 10, (10, +∞)</p><p><br /></p><p>由于对t1做全表扫描，因此，所有记录和间隙都要上锁，其中(x,y)表示间隙锁，数字表示记录锁，全部都是S锁。会话2的insert操作插入5，位于间隙(1,10)，需要获得这个间隙的X锁，因此两操作互斥，会话2阻塞。</p><p><br /></p><p>SQL标准的RR并不要求避免幻象读，而InnoDB通过gap锁来避免幻象，从而实现SQL的可串行化，保证Binlog的一致性。</p><p><br /></p><p>要想取消gap lock，可使用参数<a href=\"#sysvar_innodb_locks_unsafe_for_binlog\">innodb_lock_unsafe_for_binlog</a>=1，默认为0。</p><p><br /></p><p>InnoDB的RR可以避免不可重复读和幻象读，那么与串行化有什么区别呢？</p><p><br /></p><p>会话1</p><p><br /></p><p>会话2</p><p><br /></p><p>use test;</p><p><br /></p><p>#初始化数据</p><p><br /></p><p>create table t3(c1 int primary key, c2 int) engine=innodb;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>mysql&gt; Begin;</p><p><br /></p><p>Query OK, 0 rows affected (0.03 sec)</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>Empty set (0.00 sec)</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>Empty set (0.00 sec)</p><p><br /></p><p>mysql&gt; update t3 set c2 =2 where c1 = 1;</p><p><br /></p><p>Query OK, 1 row affected (0.00 sec)</p><p><br /></p><p>Rows matched: 1  Changed: 1  Warnings: 0</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>+----+------+</p><p><br /></p><p>| c1 | c2   |</p><p><br /></p><p>+----+------+</p><p><br /></p><p>|  1 |    2 |</p><p><br /></p><p>+----+------+</p><p><br /></p><p>1 row in set (0.00 sec)</p><p><br /></p><p>mysql&gt; commit;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation=' repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>mysql&gt; insert into t3 values(1,1);</p><p><br /></p><p>Query OK, 1 row affected (0.05 sec)</p><p><br /></p><p>由上述会话1中，连续两次读不到数据，但更新却成功，并且更新后的相同读操作就能读到数据了，这算不算幻读呢？</p><p><br /></p><p>其实，RR隔离级别的防止幻象主要是针对写操作的，即只保证写操作的可串行化，因为只有写操作影响Binlog；而读操作是通过MVCC来保证一致性读（无幻象）。</p><p><br /></p><p>然而，可串行化隔离级别要求读写可串行化。使用可串行化重做以上测试。</p><p><br /></p><p>会话1</p><p><br /></p><p>会话2</p><p><br /></p><p>use test;</p><p><br /></p><p>#初始化数据</p><p><br /></p><p>create table t3(c1 int primary key, c2 int) engine=innodb;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='SERIALIZABLE';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>mysql&gt; Begin;</p><p><br /></p><p>Query OK, 0 rows affected (0.03 sec)</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>Empty set (0.00 sec)</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>Empty set (0.00 sec)</p><p><br /></p><p>mysql&gt; update t3 set c2 =2 where c1 = 1;</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 0  Changed: 0  Warnings: 0</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>Empty set (0.00 sec)</p><p><br /></p><p>mysql&gt; commit;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='SERIALIZABLE';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>mysql&gt; insert into t3 values(1,1);</p><p><br /></p><p>#阻塞，直到会话1提交</p><p><br /></p><p>Query OK, 1 row affected (48.90 sec)</p><p><br /></p><p>设置为串行化后，会话2的插入操作被阻塞。由于在串行化下，查询操作不在使用MVCC来保证一致读，而是使用S锁来阻塞其他写操作。因此做到读写可串行化，然而换来就是并发性能的大大降低。</p><p><br /></p><p>MySQL使用可重复读来作为默认隔离级别的主要原因是语句级的Binlog。RR能提供SQL语句的写可串行化，保证了绝大部分情况（<a href=\"http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html\" target=\"_blank\">不安全语句</a>除外）的DB/DR一致。</p><p><br /></p><p>另外，通过这个测试发现MySQL 5.0与5.1在RC下表现是不一样的，可能存在兼容性问题。</p><p><br /></p><p><a href=\"http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html\" target=\"_blank\">http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html</a></p><p><br /></p><p><a href=\"http://dev.mysql.com/doc/refman/5.1/en/set-transaction.html\" target=\"_blank\">http://dev.mysql.com/doc/refman/5.1/en/set-transaction.html</a></p><p><br /></p><p><a href=\"http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html\" target=\"_blank\">http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html</a></p><p><br /></p><p><a href=\"http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_locks_unsafe_for_binlog\" target=\"_blank\">http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_locks_unsafe_for_binlog</a></p><p><br /></p><p><a href=\"http://blog.bitfly.cn/post/mysql-innodb-phantom-read/\" target=\"_blank\">http://blog.bitfly.cn/post/mysql-innodb-phantom-read/</a></p>",
    "body_lake": "<!doctype lake><p>一般的DBMS系统，默认都会使用读提交（Read-Comitted，RC）作为默认隔离级别，如Oracle、SQL Server等，而MySQL却使用可重复读（Read-Repeatable，RR）。要知道，越高的隔离级别，能解决的数据一致性问题越多，理论上性能损耗更大，可并发性越低。隔离级别依次为</p><p><br /></p><p>SERIALIZABLE &gt; RR &gt; RC &gt; Read-Uncommited</p><p><br /></p><p>在SQL标准中，前三种隔离级别分别解决了幻象读、不可重复读和脏读的问题。那么，为什么MySQL使用可重复读作为默认隔离级别呢？</p><p><br /></p><p>Binlog是MySQL的逻辑操作日志，广泛应用于复制和恢复。MySQL 5.1以前，Statement是Binlog的默认格式，即依次记录系统接受的SQL请求；5.1及以后，MySQL提供了Row和Mixed两个Binlog格式。</p><p><br /></p><p>从MySQL 5.1开始，如果打开语句级Binlog，就不支持RC和Read-Uncommited隔离级别。要想使用RC隔离级别，必须使用Mixed或Row格式。</p><p><br /></p><p>mysql&gt; set tx_isolation='read-committed';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>mysql&gt; insert into t1 values(1,1);</p><p><br /></p><p>ERROR 1598 (HY000): Binary logging not possible. Message: Transaction level 'READ-COMMITTED' in InnoDB is not safe for binlog mode 'STATEMENT'</p><p><br /></p><p>那么，为什么RC隔离级别不支持语句级Binlog呢？我们关闭binlog，做以下测试。</p><p><br /></p><p>会话1</p><p><br /></p><p>会话2</p><p><br /></p><p>use test;</p><p><br /></p><p>#初始化数据</p><p><br /></p><p>create table t1(c1 int, c2 int) engine=innodb;</p><p><br /></p><p>create table t2(c1 int, c2 int) engine=innodb;</p><p><br /></p><p>insert into t1 values(1,1), (2,2);</p><p><br /></p><p>insert into t2 values(1,1), (2,2);</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='read-committed';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#连续更新两次</p><p><br /></p><p>mysql&gt; Begin;</p><p><br /></p><p>Query OK, 0 rows affected (0.03 sec)</p><p><br /></p><p>mysql&gt; update t2 set c2 = 3 where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 2 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 2  Changed: 2  Warnings: 0</p><p><br /></p><p>mysql&gt; update t2 set c2 = 4 where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 1 row affected (0.00 sec)</p><p><br /></p><p>Rows matched: 1  Changed: 1  Warnings: 0</p><p><br /></p><p>mysql&gt; select * from t2;</p><p><br /></p><p>+------+------+</p><p><br /></p><p>| c1   | c2   |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>|    1 |    4 |</p><p><br /></p><p>|    2 |    3 |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>2 rows in set (0.00 sec)</p><p><br /></p><p>mysql&gt; commit;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='read-committed';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#两次更新之间执行删除</p><p><br /></p><p>mysql&gt; delete from t1 where c1 = 2;</p><p><br /></p><p>Query OK, 1 row affected (0.03 sec)</p><p><br /></p><p>由以上测试知，RC隔离级别下，会话2执行时序在会话1事务的语句之间，并且会话2的操作影响了会话1的结果，这会对Binlog结果造成影响。</p><p><br /></p><p>由于Binlog中语句的顺序以commit为序，如果语句级Binlog允许，两会话的执行时序是</p><p><br /></p><p>#会话2</p><p><br /></p><p>set tx_isolation='read-committed';</p><p><br /></p><p>delete from t1 where c1 = 2;</p><p><br /></p><p>commit;</p><p><br /></p><p>#会话1</p><p><br /></p><p>set tx_isolation='read-committed';</p><p><br /></p><p>Begin;</p><p><br /></p><p>update t2 set c2 = 3 where c1 in (select c1 from t1);</p><p><br /></p><p>update t2 set c2 = 4 where c1 in (select c1 from t1);</p><p><br /></p><p>select * from t2;</p><p><br /></p><p>+------+------+</p><p><br /></p><p>| c1   | c2   |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>|    1 |    4 |</p><p><br /></p><p>|    2 |    2 |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>2 rows in set (0.00 sec)</p><p><br /></p><p>commit;</p><p><br /></p><p>由上可知，在MySQL 5.1及以上的RC隔离级别下，语句级Binlog在DR上执行的结果是不正确的！</p><p><br /></p><p>那么，MySQL 5.0呢？5.0允许RC下语句级Binlog，是不是说很容易产生DB/DR不一致呢？</p><p><br /></p><p>事实上，在5.0重复上述一个测试，并不存在这个问题，原因是5.0的RC与5.1的RR使用类似的并发和上锁机制，也就是说，MySQL 5.0的RC与5.1及以上的RC可能存在兼容性问题。</p><p><br /></p><p>下面看看RR是怎么解决这个问题的。</p><p><br /></p><p>导致RC隔离级别DB/DR不一致的原因是：RC不可重复读，而Binlog要求SQL串行化！</p><p><br /></p><p>在RR下，重复以上测试</p><p><br /></p><p>会话1</p><p><br /></p><p>会话2</p><p><br /></p><p>use test;</p><p><br /></p><p>#初始化数据</p><p><br /></p><p>create table t1(c1 int, c2 int) engine=innodb;</p><p><br /></p><p>create table t2(c1 int, c2 int) engine=innodb;</p><p><br /></p><p>insert into t1 values(1,1), (2,2);</p><p><br /></p><p>insert into t2 values(1,1), (2,2);</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#连续更新两次</p><p><br /></p><p>mysql&gt; Begin;</p><p><br /></p><p>Query OK, 0 rows affected (0.03 sec)</p><p><br /></p><p>mysql&gt; update t2 set c2 = 3 where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 2 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 2  Changed: 2  Warnings: 0</p><p><br /></p><p>mysql&gt; update t2 set c2 = 4 where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 2 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 2  Changed: 2  Warnings: 0</p><p><br /></p><p>mysql&gt; select * from t2;</p><p><br /></p><p>+------+------+</p><p><br /></p><p>| c1   | c2   |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>|    1 |    4 |</p><p><br /></p><p>|    2 |    4 |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>2 rows in set (0.00 sec)</p><p><br /></p><p>mysql&gt; commit;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation=' repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#两次更新之间执行删除</p><p><br /></p><p>mysql&gt; delete from t1 where c1 = 2;</p><p><br /></p><p>--阻塞，直到会话1提交</p><p><br /></p><p>Query OK, 1 row affected (18.94 sec)</p><p><br /></p><p>与RC隔离级别不同的是，在RR中，由于保证可重复读，会话2的delete语句会被会话1阻塞，直到会话1提交。</p><p><br /></p><p>在RR中，会话1语句update t2 set c2 = 3 where c1 in (select c1 from t1)会先在t1的记录上S锁（5.1的RC中不会上这个锁，但5.0的RC会），接着在t2的满足条件的记录上X锁。由于会话1没提交，会话2的delete语句需要等待会话1的S锁释放，于是阻塞。</p><p><br /></p><p>因此，在RR中，以上测试会话1、会话2的依次执行，与Binlog的顺序一致，从而保证DB/DR一致。</p><p><br /></p><h2 id=\"d5zrtw\"><a href=\"#d5zrtw\" id=\"幻象读\"></a>幻象读</h2><p><br /></p><p>除了保证可重复读，MySQL的RR还一定程度上避免了幻象读（幻象读是由于插入导致的新记录）。（为什么说一定程度呢？参考第3节可重复读和串行化的区别。）</p><p><br /></p><p>会话1</p><p><br /></p><p>会话2</p><p><br /></p><p>use test;</p><p><br /></p><p>#初始化数据</p><p><br /></p><p>create table t1(c1 int primary key, c2 int) engine=innodb;</p><p><br /></p><p>create table t2(c1 int primary key, c2 int) engine=innodb;</p><p><br /></p><p>insert into t1 values(1,1), (10,10);</p><p><br /></p><p>insert into t2 values(1,1), (5,5), (10,10);</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#连续更新两次</p><p><br /></p><p>mysql&gt; Begin;</p><p><br /></p><p>Query OK, 0 rows affected (0.03 sec)</p><p><br /></p><p>mysql&gt; update t2 set c2 = 20 where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 2 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 2  Changed: 2  Warnings: 0</p><p><br /></p><p>mysql&gt; delete from where c1 in (select c1 from t1);</p><p><br /></p><p>Query OK, 2 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 2  Changed: 2  Warnings: 0</p><p><br /></p><p>mysql&gt; select * from t2;</p><p><br /></p><p>+------+------+</p><p><br /></p><p>| c1   | c2   |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>|    5 |    5 |</p><p><br /></p><p>+------+------+</p><p><br /></p><p>2 rows in set (0.00 sec)</p><p><br /></p><p>mysql&gt; commit;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation=' repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>#两次更新之间执行插入</p><p><br /></p><p>mysql&gt; insert into t1 values(5,5);</p><p><br /></p><p>--阻塞，直到会话1提交</p><p><br /></p><p>Query OK, 1 row affected (18.94 sec)</p><p><br /></p><p>由上述例子知，会话2的插入操作被阻塞了，原因是RR隔离级别中，除了记录锁外，还会上间隙锁(gap锁)。例如，对于表t1，update t2 set c2 = 20 where c1 in (select c1 from t1)以上的锁包括：</p><p><br /></p><p>(-∞, 1), 1, (1, 10), 10, (10, +∞)</p><p><br /></p><p>由于对t1做全表扫描，因此，所有记录和间隙都要上锁，其中(x,y)表示间隙锁，数字表示记录锁，全部都是S锁。会话2的insert操作插入5，位于间隙(1,10)，需要获得这个间隙的X锁，因此两操作互斥，会话2阻塞。</p><p><br /></p><p>SQL标准的RR并不要求避免幻象读，而InnoDB通过gap锁来避免幻象，从而实现SQL的可串行化，保证Binlog的一致性。</p><p><br /></p><p>要想取消gap lock，可使用参数<a href=\"#sysvar_innodb_locks_unsafe_for_binlog\">innodb_lock_unsafe_for_binlog</a>=1，默认为0。</p><p><br /></p><p>InnoDB的RR可以避免不可重复读和幻象读，那么与串行化有什么区别呢？</p><p><br /></p><p>会话1</p><p><br /></p><p>会话2</p><p><br /></p><p>use test;</p><p><br /></p><p>#初始化数据</p><p><br /></p><p>create table t3(c1 int primary key, c2 int) engine=innodb;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>mysql&gt; Begin;</p><p><br /></p><p>Query OK, 0 rows affected (0.03 sec)</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>Empty set (0.00 sec)</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>Empty set (0.00 sec)</p><p><br /></p><p>mysql&gt; update t3 set c2 =2 where c1 = 1;</p><p><br /></p><p>Query OK, 1 row affected (0.00 sec)</p><p><br /></p><p>Rows matched: 1  Changed: 1  Warnings: 0</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>+----+------+</p><p><br /></p><p>| c1 | c2   |</p><p><br /></p><p>+----+------+</p><p><br /></p><p>|  1 |    2 |</p><p><br /></p><p>+----+------+</p><p><br /></p><p>1 row in set (0.00 sec)</p><p><br /></p><p>mysql&gt; commit;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation=' repeatable-read';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>mysql&gt; insert into t3 values(1,1);</p><p><br /></p><p>Query OK, 1 row affected (0.05 sec)</p><p><br /></p><p>由上述会话1中，连续两次读不到数据，但更新却成功，并且更新后的相同读操作就能读到数据了，这算不算幻读呢？</p><p><br /></p><p>其实，RR隔离级别的防止幻象主要是针对写操作的，即只保证写操作的可串行化，因为只有写操作影响Binlog；而读操作是通过MVCC来保证一致性读（无幻象）。</p><p><br /></p><p>然而，可串行化隔离级别要求读写可串行化。使用可串行化重做以上测试。</p><p><br /></p><p>会话1</p><p><br /></p><p>会话2</p><p><br /></p><p>use test;</p><p><br /></p><p>#初始化数据</p><p><br /></p><p>create table t3(c1 int primary key, c2 int) engine=innodb;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='SERIALIZABLE';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>mysql&gt; Begin;</p><p><br /></p><p>Query OK, 0 rows affected (0.03 sec)</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>Empty set (0.00 sec)</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>Empty set (0.00 sec)</p><p><br /></p><p>mysql&gt; update t3 set c2 =2 where c1 = 1;</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>Rows matched: 0  Changed: 0  Warnings: 0</p><p><br /></p><p>mysql&gt; select * from t3 where c1 = 1;</p><p><br /></p><p>Empty set (0.00 sec)</p><p><br /></p><p>mysql&gt; commit;</p><p><br /></p><p>#设置隔离级别</p><p><br /></p><p>set tx_isolation='SERIALIZABLE';</p><p><br /></p><p>Query OK, 0 rows affected (0.00 sec)</p><p><br /></p><p>mysql&gt; insert into t3 values(1,1);</p><p><br /></p><p>#阻塞，直到会话1提交</p><p><br /></p><p>Query OK, 1 row affected (48.90 sec)</p><p><br /></p><p>设置为串行化后，会话2的插入操作被阻塞。由于在串行化下，查询操作不在使用MVCC来保证一致读，而是使用S锁来阻塞其他写操作。因此做到读写可串行化，然而换来就是并发性能的大大降低。</p><p><br /></p><p>MySQL使用可重复读来作为默认隔离级别的主要原因是语句级的Binlog。RR能提供SQL语句的写可串行化，保证了绝大部分情况（<a href=\"http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">不安全语句</a>除外）的DB/DR一致。</p><p><br /></p><p>另外，通过这个测试发现MySQL 5.0与5.1在RC下表现是不一样的，可能存在兼容性问题。</p><p><br /></p><p><a href=\"http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html</a></p><p><br /></p><p><a href=\"http://dev.mysql.com/doc/refman/5.1/en/set-transaction.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://dev.mysql.com/doc/refman/5.1/en/set-transaction.html</a></p><p><br /></p><p><a href=\"http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html</a></p><p><br /></p><p><a href=\"http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_locks_unsafe_for_binlog\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_locks_unsafe_for_binlog</a></p><p><br /></p><p><a href=\"http://blog.bitfly.cn/post/mysql-innodb-phantom-read/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://blog.bitfly.cn/post/mysql-innodb-phantom-read/</a></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-27T06:06:54.000Z",
    "deleted_at": null,
    "created_at": "2019-02-27T06:05:18.000Z",
    "updated_at": "2019-05-28T08:11:14.000Z",
    "published_at": "2019-02-27T06:06:54.000Z",
    "first_published_at": null,
    "word_count": 2582,
    "cover": "",
    "description": "一般的DBMS系统，默认都会使用读提交（Read-Comitted，RC）作为默认隔离级别，如Oracle、SQL Server等，而MySQL却使用可重复读（Read-Repeatable，RR）。要知道，越高的隔离级别，能解决的数据一致性问题越多，理论上性能损耗更大，可并发性越低。隔离级别...",
    "custom_description": "一般的DBMS系统，默认都会使用读提交（Read-Comitted，RC）作为默认隔离级别，如Oracle、SQL Server等，而MySQL却使用可重复读（Read-Repeatable，RR）。要知道，越高的隔离级别，能解决的数据一致性问题越多，理论上性能损耗更大，可并发性越低。隔离级别...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1294232,
    "slug": "fnnr79",
    "title": "常用的sql语句",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"5042afb6\"></a>\n### 交换两列的值\n\n```sql\nupdate models_mapping as a, models_mapping as b \nset a.souche_model_code=b.third_model_code, a.third_model_code=b.souche_model_code\nwhere a.id=b.id and a.src_domain='iautos.cn' and a.domain='souche.com';\n```\n\n<a name=\"c54edfc1\"></a>\n### 查询表的所有字段\n\n```sql\nselect  GROUP_CONCAT(CONCAT('\\`',COLUMN_NAME,'\\`')) \n\tfrom INFORMATION_SCHEMA.Columns \n  where table_name='brand' and table_schema='car_model'\n  \nselect COLUMN_NAME,column_comment \n\tfrom INFORMATION_SCHEMA.Columns \n  where table_name='表名' and table_schema='数据库名'\n```\n\n<a name=\"14d46fd0\"></a>\n### 一次新增多个字段\n\n```sql\nalter table models_mapping add  (`souche_series_name` varchar(255) DEFAULT NULL COMMENT '来源车系名称',\n`third_brand_name` varchar(255) DEFAULT NULL COMMENT '目的域品牌名称',\n`third_series_name` varchar(255) DEFAULT NULL COMMENT '目的域车系名称',\n`third_model_name` varchar(255) DEFAULT NULL COMMENT '目的域车型名称');\n```\n\n<a name=\"65b5f47b\"></a>\n### 复制表数据\n\n```sql\ninsert into dictionary(field,`key`,`value`,date_create,date_update) select field,dict_key ,`value`,data_create , data_create   from config_dictionary ;\n```\n\n<a name=\"tZuU2\"></a>\n### 新增唯一索引\n\n```sql\nalter table `dictionary` add UNIQUE uniq_field_value(`field`,`value`);\n```\n\n<a name=\"Ott9l\"></a>\n### 查询参数价格颜色\n\n```sql\n\n\nselect \na.model_code '车型编码',\na.model_name '车型名称',\na.category_code '车款编码',\na.category_name '车款名称',\na.series_code '车系编码',\na.series_name '车系名称',\na.brand_code '品牌编码',\na.brand_name '品牌名称',\n(select Group_concat(color_name SEPARATOR ',')  from model_color where model_code = a.model_code and type=0) '外饰颜色',\n(select Group_concat(color_name SEPARATOR ',')  from model_color where model_code = a.model_code and type=1) '内饰颜色',\n(select guide_price  from model_price where model_code = a.model_code) '指导价',\n(select assurance_period_month  from model_parameter where model_code = a.model_code) '保养周期-月',\n(select assurance_period_km  from model_parameter where model_code = a.model_code) '保养周期-公里'\n\nfrom model a\n\nwhere a.model_code in \n\n(\n\tselect model_code from model where brand_code in (\n'brand-74','brand-86','brand-48'\n)\n)\n```\n\n<a name=\"uE6bG\"></a>\n### 查询车型参数\n\n```sql\n\nselect \na.model_code '车型编码',\na.model_name '车型名称',\na.category_code '车款编码',\na.category_name '车款名称',\na.series_code '车系编码',\na.series_name '车系名称',\na.brand_code '品牌编码',\na.brand_name '品牌名称',\n(select value from dictionary where `field`='fuelForm' and `key`=b.fuel_form) '燃料形式',\n(select value from dictionary where `field`='engineVolume' and `key`=b.engine_volume) '排量',\n(select value from dictionary where `field`='gearBox' and `key`=b.gear_box) '变速',\n(select value from dictionary where `field`='drivingMode' and `key`=b.driving_Mode) '驱动方式',\n(select value from dictionary where `field`='intakeType' and `key`=b.intake_type) '进气形式',\n(select value from dictionary where `field`='bodyFormId' and `key`=b.body_formid) '车身形式标识'\n\nfrom \n\tmodel a,\n\tmodel_parameter b\nwhere a.model_code = b.model_code\nand a.display_tag & 4>0;\n```\n\n<a name=\"UmvKp\"></a>\n### 修改列字段\n\n```sql\nalter table model_parameter modify column `max_power` decimal(6,2) unsigned DEFAULT NULL COMMENT '最大功率(kW)';\n```\n\n",
    "body_draft": "",
    "body_html": "<h3 id=\"5042afb6\">交换两列的值</h3><p><br /></p><pre data-lang=\"sql\"><code>update models_mapping as a, models_mapping as b \nset a.souche_model_code=b.third_model_code, a.third_model_code=b.souche_model_code\nwhere a.id=b.id and a.src_domain='iautos.cn' and a.domain='souche.com';</code></pre><p><br /></p><h3 id=\"c54edfc1\">查询表的所有字段</h3><p><br /></p><pre data-lang=\"sql\"><code>select  GROUP_CONCAT(CONCAT('\\`',COLUMN_NAME,'\\`')) \n\tfrom INFORMATION_SCHEMA.Columns \n  where table_name='brand' and table_schema='car_model'\n  \nselect COLUMN_NAME,column_comment \n\tfrom INFORMATION_SCHEMA.Columns \n  where table_name='表名' and table_schema='数据库名'</code></pre><p><br /></p><h3 id=\"14d46fd0\">一次新增多个字段</h3><p><br /></p><pre data-lang=\"sql\"><code>alter table models_mapping add  (`souche_series_name` varchar(255) DEFAULT NULL COMMENT '来源车系名称',\n`third_brand_name` varchar(255) DEFAULT NULL COMMENT '目的域品牌名称',\n`third_series_name` varchar(255) DEFAULT NULL COMMENT '目的域车系名称',\n`third_model_name` varchar(255) DEFAULT NULL COMMENT '目的域车型名称');</code></pre><p><br /></p><h3 id=\"65b5f47b\">复制表数据</h3><p><br /></p><pre data-lang=\"sql\"><code>insert into dictionary(field,`key`,`value`,date_create,date_update) select field,dict_key ,`value`,data_create , data_create   from config_dictionary ;</code></pre><p><br /></p><h3 id=\"tZuU2\">新增唯一索引</h3><p><br /></p><pre data-lang=\"sql\"><code>alter table `dictionary` add UNIQUE uniq_field_value(`field`,`value`);</code></pre><p><br /></p><h3 id=\"Ott9l\">查询参数价格颜色</h3><p><br /></p><pre data-lang=\"sql\"><code>\n\nselect \na.model_code '车型编码',\na.model_name '车型名称',\na.category_code '车款编码',\na.category_name '车款名称',\na.series_code '车系编码',\na.series_name '车系名称',\na.brand_code '品牌编码',\na.brand_name '品牌名称',\n(select Group_concat(color_name SEPARATOR ',')  from model_color where model_code = a.model_code and type=0) '外饰颜色',\n(select Group_concat(color_name SEPARATOR ',')  from model_color where model_code = a.model_code and type=1) '内饰颜色',\n(select guide_price  from model_price where model_code = a.model_code) '指导价',\n(select assurance_period_month  from model_parameter where model_code = a.model_code) '保养周期-月',\n(select assurance_period_km  from model_parameter where model_code = a.model_code) '保养周期-公里'\n\nfrom model a\n\nwhere a.model_code in \n\n(\n\tselect model_code from model where brand_code in (\n'brand-74','brand-86','brand-48'\n)\n)</code></pre><p><br /></p><h3 id=\"uE6bG\">查询车型参数</h3><p><br /></p><pre data-lang=\"sql\"><code>\nselect \na.model_code '车型编码',\na.model_name '车型名称',\na.category_code '车款编码',\na.category_name '车款名称',\na.series_code '车系编码',\na.series_name '车系名称',\na.brand_code '品牌编码',\na.brand_name '品牌名称',\n(select value from dictionary where `field`='fuelForm' and `key`=b.fuel_form) '燃料形式',\n(select value from dictionary where `field`='engineVolume' and `key`=b.engine_volume) '排量',\n(select value from dictionary where `field`='gearBox' and `key`=b.gear_box) '变速',\n(select value from dictionary where `field`='drivingMode' and `key`=b.driving_Mode) '驱动方式',\n(select value from dictionary where `field`='intakeType' and `key`=b.intake_type) '进气形式',\n(select value from dictionary where `field`='bodyFormId' and `key`=b.body_formid) '车身形式标识'\n\nfrom \n\tmodel a,\n\tmodel_parameter b\nwhere a.model_code = b.model_code\nand a.display_tag &amp; 4&gt;0;</code></pre><p><br /></p><h3 id=\"UmvKp\">修改列字段</h3><p><br /></p><pre data-lang=\"sql\"><code>alter table model_parameter modify column `max_power` decimal(6,2) unsigned DEFAULT NULL COMMENT '最大功率(kW)';</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><h3 id=\"5042afb6\">交换两列的值</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22sql%22%2C%22code%22%3A%22update%20models_mapping%20as%20a%2C%20models_mapping%20as%20b%20%5Cnset%20a.souche_model_code%3Db.third_model_code%2C%20a.third_model_code%3Db.souche_model_code%5Cnwhere%20a.id%3Db.id%20and%20a.src_domain%3D'iautos.cn'%20and%20a.domain%3D'souche.com'%3B%22%2C%22id%22%3A%22nK2e8%22%7D\"></card><p><br /></p><h3 id=\"c54edfc1\">查询表的所有字段</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22sql%22%2C%22code%22%3A%22select%20%20GROUP_CONCAT(CONCAT('%5C%5C%60'%2CCOLUMN_NAME%2C'%5C%5C%60'))%20%5Cn%5Ctfrom%20INFORMATION_SCHEMA.Columns%20%5Cn%20%20where%20table_name%3D'brand'%20and%20table_schema%3D'car_model'%5Cn%20%20%5Cnselect%20COLUMN_NAME%2Ccolumn_comment%20%5Cn%5Ctfrom%20INFORMATION_SCHEMA.Columns%20%5Cn%20%20where%20table_name%3D'%E8%A1%A8%E5%90%8D'%20and%20table_schema%3D'%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8D'%22%2C%22id%22%3A%22mBPdp%22%7D\"></card><p><br /></p><h3 id=\"14d46fd0\">一次新增多个字段</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22sql%22%2C%22code%22%3A%22alter%20table%20models_mapping%20add%20%20(%60souche_series_name%60%20varchar(255)%20DEFAULT%20NULL%20COMMENT%20'%E6%9D%A5%E6%BA%90%E8%BD%A6%E7%B3%BB%E5%90%8D%E7%A7%B0'%2C%5Cn%60third_brand_name%60%20varchar(255)%20DEFAULT%20NULL%20COMMENT%20'%E7%9B%AE%E7%9A%84%E5%9F%9F%E5%93%81%E7%89%8C%E5%90%8D%E7%A7%B0'%2C%5Cn%60third_series_name%60%20varchar(255)%20DEFAULT%20NULL%20COMMENT%20'%E7%9B%AE%E7%9A%84%E5%9F%9F%E8%BD%A6%E7%B3%BB%E5%90%8D%E7%A7%B0'%2C%5Cn%60third_model_name%60%20varchar(255)%20DEFAULT%20NULL%20COMMENT%20'%E7%9B%AE%E7%9A%84%E5%9F%9F%E8%BD%A6%E5%9E%8B%E5%90%8D%E7%A7%B0')%3B%22%2C%22id%22%3A%22yvs38%22%7D\"></card><p><br /></p><h3 id=\"65b5f47b\">复制表数据</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22sql%22%2C%22code%22%3A%22insert%20into%20dictionary(field%2C%60key%60%2C%60value%60%2Cdate_create%2Cdate_update)%20select%20field%2Cdict_key%20%2C%60value%60%2Cdata_create%20%2C%20data_create%20%20%20from%20config_dictionary%20%3B%22%2C%22id%22%3A%22szPRw%22%7D\"></card><p><br /></p><h3 id=\"tZuU2\">新增唯一索引</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22sql%22%2C%22code%22%3A%22alter%20table%20%60dictionary%60%20add%20UNIQUE%20uniq_field_value(%60field%60%2C%60value%60)%3B%22%2C%22id%22%3A%2271xkV%22%7D\"></card><p><br /></p><h3 id=\"Ott9l\">查询参数价格颜色</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22sql%22%2C%22code%22%3A%22%5Cn%5Cnselect%20%5Cna.model_code%20'%E8%BD%A6%E5%9E%8B%E7%BC%96%E7%A0%81'%2C%5Cna.model_name%20'%E8%BD%A6%E5%9E%8B%E5%90%8D%E7%A7%B0'%2C%5Cna.category_code%20'%E8%BD%A6%E6%AC%BE%E7%BC%96%E7%A0%81'%2C%5Cna.category_name%20'%E8%BD%A6%E6%AC%BE%E5%90%8D%E7%A7%B0'%2C%5Cna.series_code%20'%E8%BD%A6%E7%B3%BB%E7%BC%96%E7%A0%81'%2C%5Cna.series_name%20'%E8%BD%A6%E7%B3%BB%E5%90%8D%E7%A7%B0'%2C%5Cna.brand_code%20'%E5%93%81%E7%89%8C%E7%BC%96%E7%A0%81'%2C%5Cna.brand_name%20'%E5%93%81%E7%89%8C%E5%90%8D%E7%A7%B0'%2C%5Cn(select%20Group_concat(color_name%20SEPARATOR%20'%2C')%20%20from%20model_color%20where%20model_code%20%3D%20a.model_code%20and%20type%3D0)%20'%E5%A4%96%E9%A5%B0%E9%A2%9C%E8%89%B2'%2C%5Cn(select%20Group_concat(color_name%20SEPARATOR%20'%2C')%20%20from%20model_color%20where%20model_code%20%3D%20a.model_code%20and%20type%3D1)%20'%E5%86%85%E9%A5%B0%E9%A2%9C%E8%89%B2'%2C%5Cn(select%20guide_price%20%20from%20model_price%20where%20model_code%20%3D%20a.model_code)%20'%E6%8C%87%E5%AF%BC%E4%BB%B7'%2C%5Cn(select%20assurance_period_month%20%20from%20model_parameter%20where%20model_code%20%3D%20a.model_code)%20'%E4%BF%9D%E5%85%BB%E5%91%A8%E6%9C%9F-%E6%9C%88'%2C%5Cn(select%20assurance_period_km%20%20from%20model_parameter%20where%20model_code%20%3D%20a.model_code)%20'%E4%BF%9D%E5%85%BB%E5%91%A8%E6%9C%9F-%E5%85%AC%E9%87%8C'%5Cn%5Cnfrom%20model%20a%5Cn%5Cnwhere%20a.model_code%20in%20%5Cn%5Cn(%5Cn%5Ctselect%20model_code%20from%20model%20where%20brand_code%20in%20(%5Cn'brand-74'%2C'brand-86'%2C'brand-48'%5Cn)%5Cn)%22%2C%22id%22%3A%22mcOZp%22%7D\"></card><p><br /></p><h3 id=\"uE6bG\">查询车型参数</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22sql%22%2C%22code%22%3A%22%5Cnselect%20%5Cna.model_code%20'%E8%BD%A6%E5%9E%8B%E7%BC%96%E7%A0%81'%2C%5Cna.model_name%20'%E8%BD%A6%E5%9E%8B%E5%90%8D%E7%A7%B0'%2C%5Cna.category_code%20'%E8%BD%A6%E6%AC%BE%E7%BC%96%E7%A0%81'%2C%5Cna.category_name%20'%E8%BD%A6%E6%AC%BE%E5%90%8D%E7%A7%B0'%2C%5Cna.series_code%20'%E8%BD%A6%E7%B3%BB%E7%BC%96%E7%A0%81'%2C%5Cna.series_name%20'%E8%BD%A6%E7%B3%BB%E5%90%8D%E7%A7%B0'%2C%5Cna.brand_code%20'%E5%93%81%E7%89%8C%E7%BC%96%E7%A0%81'%2C%5Cna.brand_name%20'%E5%93%81%E7%89%8C%E5%90%8D%E7%A7%B0'%2C%5Cn(select%20value%20from%20dictionary%20where%20%60field%60%3D'fuelForm'%20and%20%60key%60%3Db.fuel_form)%20'%E7%87%83%E6%96%99%E5%BD%A2%E5%BC%8F'%2C%5Cn(select%20value%20from%20dictionary%20where%20%60field%60%3D'engineVolume'%20and%20%60key%60%3Db.engine_volume)%20'%E6%8E%92%E9%87%8F'%2C%5Cn(select%20value%20from%20dictionary%20where%20%60field%60%3D'gearBox'%20and%20%60key%60%3Db.gear_box)%20'%E5%8F%98%E9%80%9F'%2C%5Cn(select%20value%20from%20dictionary%20where%20%60field%60%3D'drivingMode'%20and%20%60key%60%3Db.driving_Mode)%20'%E9%A9%B1%E5%8A%A8%E6%96%B9%E5%BC%8F'%2C%5Cn(select%20value%20from%20dictionary%20where%20%60field%60%3D'intakeType'%20and%20%60key%60%3Db.intake_type)%20'%E8%BF%9B%E6%B0%94%E5%BD%A2%E5%BC%8F'%2C%5Cn(select%20value%20from%20dictionary%20where%20%60field%60%3D'bodyFormId'%20and%20%60key%60%3Db.body_formid)%20'%E8%BD%A6%E8%BA%AB%E5%BD%A2%E5%BC%8F%E6%A0%87%E8%AF%86'%5Cn%5Cnfrom%20%5Cn%5Ctmodel%20a%2C%5Cn%5Ctmodel_parameter%20b%5Cnwhere%20a.model_code%20%3D%20b.model_code%5Cnand%20a.display_tag%20%26%204%3E0%3B%22%2C%22id%22%3A%22faBQB%22%7D\"></card><p><br /></p><h3 id=\"UmvKp\">修改列字段</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22sql%22%2C%22code%22%3A%22alter%20table%20model_parameter%20modify%20column%20%60max_power%60%20decimal(6%2C2)%20unsigned%20DEFAULT%20NULL%20COMMENT%20'%E6%9C%80%E5%A4%A7%E5%8A%9F%E7%8E%87(kW)'%3B%22%2C%22id%22%3A%22BJp4B%22%7D\"></card><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-06-10T03:51:55.000Z",
    "deleted_at": null,
    "created_at": "2019-02-25T12:16:55.000Z",
    "updated_at": "2019-06-10T03:51:55.000Z",
    "published_at": "2019-06-10T03:51:55.000Z",
    "first_published_at": "2019-02-25T12:18:03.000Z",
    "word_count": 595,
    "cover": null,
    "description": "交换两列的值update models_mapping as a, models_mapping as b  set a.souche_model_code=b.third_model_code, a.third_model_code=b.souche_model_code where a.i...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1228128,
    "slug": "66faaff5-74b6-470d-0005-4c0a2bf6e5b3",
    "title": "批量任务体现多线程的威力！ - 掘金",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "对于多线程的理解不是非常深刻，工作中用到多线程代码的机会也不多，前不久遇到了一个使用场景，通过编码实现后对于多线程的理解和应用有了更加深刻的理解。场景如下：现有给用户发送产品调研的需求，运营的同事拿来了一个Excel文件，要求给Excel里面大约六万个手机号发送调研短信。\n\n最简单的方法就是一个循环然后单线程顺序发送，但是核心问题在于，给短信运营商发短信的接口响应时间较长，假设平均100ms的响应时间，那么单线程发送的话需要6万*0.1秒=6000秒。显然这个时间是不能接受的，运营商系统的发送接口我们是不能优化的，只得增强自己的发送和处理能力才能尽快的完成任务。\n\n[]()\n<a name=\"8ea4e261\"></a>\n## 读取Excel中的信息\n\n[]()\n<a name=\"dd24a2fa\"></a>\n### 包依赖\n\n工具类代码，Maven中引入如下两个包\n\n```\n<dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi-ooxml</artifactId>\n    <version>3.17</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.xmlbeans</groupId>\n    <artifactId>xmlbeans</artifactId>\n    <version>2.6.0</version>\n</dependency>\n复制代码\n```\n\n[]()\n<a name=\"306b8a15\"></a>\n### 读取Excel的工具类代码\n\n```\n/**\n * 读取Excel的文件信息\n *\n * @param fileName\n */\npublic static void readFromExcel(String fileName) {\n    InputStream is = null;\n    try {\n        is = new FileInputStream(fileName);\n        XSSFWorkbook workbook = new XSSFWorkbook(is);\n        XSSFSheet sheet = workbook.getSheetAt(0);\n        int num = 0;\n        // 循环行Row\n        for (int rowNum = 0, lastNum = sheet.getLastRowNum(); rowNum <= lastNum; rowNum++) {\n            XSSFRow row = sheet.getRow(rowNum);\n            String phoneNumber = getStringValueFromCell(row.getCell(0)).trim();\n            phoneList.add(phoneNumber);\n        }\n        System.out.println(num);\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n \n/**\n * 读取Excel里面Cell内容\n *\n * @param cell\n * @return\n */\nprivate static String getStringValueFromCell(XSSFCell cell) {\n \n    // 单元格内的时间格式\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n    // 单元格内的数字类型\n    DecimalFormat decimalFormat = new DecimalFormat(\"#.#####\");\n    // 单元格默认为空\n    String cellValue = \"\";\n \n    if (cell == null) {\n        return cellValue;\n    }\n \n    // 按类型读取\n    if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) {\n        cellValue = cell.getStringCellValue();\n    } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {\n        // 日期转为时间形式\n        if (DateUtil.isCellDateFormatted(cell)) {\n            double d = cell.getNumericCellValue();\n            Date date = DateUtil.getJavaDate(d);\n            cellValue = dateFormat.format(date);\n        } else {\n            // 其他转为数字\n            cellValue = decimalFormat.format((cell.getNumericCellValue()));\n        }\n    } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) {\n        cellValue = \"\";\n    } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) {\n        cellValue = String.valueOf(cell.getBooleanCellValue());\n    } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) {\n        cellValue = \"\";\n    } else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) {\n        cellValue = cell.getCellFormula().toString();\n    }\n    return cellValue;\n}&emsp;&emsp;\n复制代码\n```\n\n[]()\n<a name=\"43194329\"></a>\n## 模拟运营商发送短信的方法\n\n```\n/**\n * 外部接口耗时长，通过多线程增强\n *\n * @param userPhone\n */\npublic void sendMsgToPhone(String userPhone) {\n    try {\n        Thread.sleep(SEND_COST_TIME);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    System.out.println(\"send message to : \" + userPhone);\n}\n复制代码\n```\n\n[]()\n<a name=\"0d8e4eaa\"></a>\n## 多线程发短信\n\n[]()\n<a name=\"7d335007\"></a>\n### 简单的单线程发送\n\n```\n/**\n     * 单线程发送\n     *\n     * @param phoneList\n     * @return\n     */\n    private long singleThread(List<String> phoneList) {\n        long start = System.currentTimeMillis();\n        /*// 直接主线程执行\n        for (String phoneNumber : phoneList) {\n            threadOperation.sendMsgToPhone(phoneNumber);\n        }*/\n        SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(phoneList);\n        smet.start();\n        long totalTime = System.currentTimeMillis() - start;\n        System.out.println(\"单线程发送总时间：\" + totalTime);\n        return totalTime;\n    }\n复制代码\n```\n\n对于大批量发短信的场景，如果使用单线程将全部一千个号码发送完毕的话，大约需要103132ms，可见效率低下，耗费时间较长。\n\n多线程发送短信中的一个核心要点是，将全部手机号码拆分成多个组后，分配给每个线程进行执行。\n\n[]()\n<a name=\"37cc9449\"></a>\n### 两个线程的示例\n\n```\n/**\n * 两个线程发送\n *\n * @param phoneList\n * @return\n */\nprivate long twoThreads(List<String> phoneList) {\n    long start = System.currentTimeMillis();\n    List<String> list1 = phoneList.subList(0, phoneList.size() / 2);\n    List<String> list2 = phoneList.subList(phoneList.size() / 2, phoneList.size());\n    SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(list1);\n    smet.start();\n    SendMsgExtendThread smet1 = threadOperation.new SendMsgExtendThread(list2);\n    smet1.start();\n    return 0;\n}\n复制代码\n```\n\n[]()\n<a name=\"844e5e8c\"></a>\n### 另一种数据分组方式\n\n```\n/**\n * 另外一种分配方式\n *\n * @param phoneList\n */\nprivate void otherThread(List<String> phoneList) {\n    for (int threadNo = 0; threadNo < 10; threadNo++) {\n        int numbersPerThread = 10;\n        List<String> list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 10);\n        SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(list);\n        smet.start();\n        if (list.size() < numbersPerThread) {\n            break;\n        }\n    }\n}\n复制代码\n```\n\n[]()\n<a name=\"a476680c\"></a>\n### 线程池发送\n\n```\n/**\n * 线程池发送\n *\n * @param phoneList\n * @return\n */\nprivate void threadPool(List<String> phoneList) {\n    for (int threadNo = 0; threadNo < THREAD_POOL_SIZE; threadNo++) {\n        int numbersPerThread = 10;\n        List<String> list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 10);\n        threadOperation.executorService.execute(threadOperation.new SendMsgExtendThread(list));\n    }\n    threadOperation.executorService.shutdown();\n}\n复制代码\n```\n\n[]()\n<a name=\"2c21416f\"></a>\n### 使用Callable发送\n\n```\n/**\n * 多线程发送\n *\n * @param phoneList\n * @return\n */\nprivate void multiThreadSend(List<String> phoneList) {\n    List<Future<Long>> futures = new ArrayList<>();\n    for (int threadNo = 0; threadNo < THREAD_POOL_SIZE; threadNo++) {\n        int numbersPerThread = 100;\n        List<String> list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 100);\n        Future<Long> future = threadOperation.executorService.submit(threadOperation.new SendMsgImplCallable(list, String.valueOf(threadNo)));\n        futures.add(future);\n    }\n    for (Future<Long> future : futures) {\n        try {\n            System.out.println(future.get());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n    threadOperation.executorService.shutdown();\n}\n\n复制代码\n```\n\n使用多线程发送，将发送任务进行分割然后分配给每个线程执行，执行完毕需要10266ms，可见执行效率明显提升，消耗时间明显缩短。\n\n```java\npackage com.lingyejun.tick.authenticator;\n \nimport org.apache.poi.ss.usermodel.DateUtil;\nimport org.apache.poi.xssf.usermodel.XSSFCell;\nimport org.apache.poi.xssf.usermodel.XSSFRow;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n \nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\nimport java.util.concurrent.*;\n \npublic class ThreadOperation {\n \n    // 发短信的同步等待时间\n    private static final long SEND_COST_TIME = 100L;\n \n    // 手机号文件\n    private static final String FILE_NAME = \"/Users/lingye/Downloads/phone_number.xlsx\";\n \n    // 手机号列表\n    private static List<String> phoneList = new ArrayList<>();\n \n    // 单例对象\n    private static volatile ThreadOperation threadOperation;\n \n    // 线程个数\n    private static final int THREAD_POOL_SIZE = 10;\n \n    // 初始化线程池\n    private ExecutorService executorService = new ThreadPoolExecutor(THREAD_POOL_SIZE, THREAD_POOL_SIZE,\n            0L, TimeUnit.MILLISECONDS,\n            new LinkedBlockingQueue<Runnable>());\n \n    public ThreadOperation() {\n        // 从本地文件中读取手机号码\n        readFromExcel(FILE_NAME);\n    }\n \n    public static void main(String[] args) {\n        ThreadOperation threadOperation = getInstance();\n        //threadOperation.singleThread(phoneList);\n        threadOperation.multiThreadSend(phoneList);\n    }\n \n    /**\n     * 单例获取对象\n     *\n     * @return\n     */\n    public static ThreadOperation getInstance() {\n        if (threadOperation == null) {\n            synchronized (ThreadOperation.class) {\n                if (threadOperation == null) {\n                    threadOperation = new ThreadOperation();\n                }\n            }\n        }\n        return threadOperation;\n    }\n \n    /**\n     * 读取Excel的文件信息\n     *\n     * @param fileName\n     */\n    public static void readFromExcel(String fileName) {\n        InputStream is = null;\n        try {\n            is = new FileInputStream(fileName);\n            XSSFWorkbook workbook = new XSSFWorkbook(is);\n            XSSFSheet sheet = workbook.getSheetAt(0);\n            int num = 0;\n            // 循环行Row\n            for (int rowNum = 0, lastNum = sheet.getLastRowNum(); rowNum <= lastNum; rowNum++) {\n                XSSFRow row = sheet.getRow(rowNum);\n                String phoneNumber = getStringValueFromCell(row.getCell(0)).trim();\n                phoneList.add(phoneNumber);\n            }\n            System.out.println(num);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n \n    /**\n     * 读取Excel里面Cell内容\n     *\n     * @param cell\n     * @return\n     */\n    private static String getStringValueFromCell(XSSFCell cell) {\n \n        // 单元格内的时间格式\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        // 单元格内的数字类型\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.#####\");\n        // 单元格默认为空\n        String cellValue = \"\";\n \n        if (cell == null) {\n            return cellValue;\n        }\n \n        // 按类型读取\n        if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) {\n            cellValue = cell.getStringCellValue();\n        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {\n            // 日期转为时间形式\n            if (DateUtil.isCellDateFormatted(cell)) {\n                double d = cell.getNumericCellValue();\n                Date date = DateUtil.getJavaDate(d);\n                cellValue = dateFormat.format(date);\n            } else {\n                // 其他转为数字\n                cellValue = decimalFormat.format((cell.getNumericCellValue()));\n            }\n        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) {\n            cellValue = \"\";\n        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) {\n            cellValue = String.valueOf(cell.getBooleanCellValue());\n        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) {\n            cellValue = \"\";\n        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) {\n            cellValue = cell.getCellFormula().toString();\n        }\n        return cellValue;\n    }\n \n    /**\n     * 外部接口耗时长，通过多线程增强\n     *\n     * @param userPhone\n     */\n    public void sendMsgToPhone(String userPhone) {\n        try {\n            Thread.sleep(SEND_COST_TIME);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"send message to : \" + userPhone);\n    }\n \n    /**\n     * 单线程发送\n     *\n     * @param phoneList\n     * @return\n     */\n    private long singleThread(List<String> phoneList) {\n        long start = System.currentTimeMillis();\n        /*// 直接主线程执行\n        for (String phoneNumber : phoneList) {\n            threadOperation.sendMsgToPhone(phoneNumber);\n        }*/\n        SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(phoneList);\n        smet.start();\n        long totalTime = System.currentTimeMillis() - start;\n        System.out.println(\"单线程发送总时间：\" + totalTime);\n        return totalTime;\n    }\n \n    /**\n     * 另外一种分配方式\n     *\n     * @param phoneList\n     */\n    private void otherThread(List<String> phoneList) {\n        for (int threadNo = 0; threadNo < 10; threadNo++) {\n            int numbersPerThread = 10;\n            List<String> list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 10);\n            SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(list);\n            smet.start();\n            if (list.size() < numbersPerThread) {\n                break;\n            }\n        }\n    }\n \n    /**\n     * 两个线程发送\n     *\n     * @param phoneList\n     * @return\n     */\n    private long twoThreads(List<String> phoneList) {\n        long start = System.currentTimeMillis();\n        List<String> list1 = phoneList.subList(0, phoneList.size() / 2);\n        List<String> list2 = phoneList.subList(phoneList.size() / 2, phoneList.size());\n        SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(list1);\n        smet.start();\n        SendMsgExtendThread smet1 = threadOperation.new SendMsgExtendThread(list2);\n        smet1.start();\n        return 0;\n    }\n \n    /**\n     * 线程池发送\n     *\n     * @param phoneList\n     * @return\n     */\n    private void threadPool(List<String> phoneList) {\n        for (int threadNo = 0; threadNo < THREAD_POOL_SIZE; threadNo++) {\n            int numbersPerThread = 10;\n            List<String> list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 10);\n            threadOperation.executorService.execute(threadOperation.new SendMsgExtendThread(list));\n        }\n        threadOperation.executorService.shutdown();\n    }\n \n    /**\n     * 多线程发送\n     *\n     * @param phoneList\n     * @return\n     */\n    private void multiThreadSend(List<String> phoneList) {\n        List<Future<Long>> futures = new ArrayList<>();\n        for (int threadNo = 0; threadNo < THREAD_POOL_SIZE; threadNo++) {\n            int numbersPerThread = 100;\n            List<String> list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 100);\n            Future<Long> future = threadOperation.executorService.submit(threadOperation.new SendMsgImplCallable(list, String.valueOf(threadNo)));\n            futures.add(future);\n        }\n        for (Future<Long> future : futures) {\n            try {\n                System.out.println(future.get());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (ExecutionException e) {\n                e.printStackTrace();\n            }\n        }\n        threadOperation.executorService.shutdown();\n    }\n \n    public class SendMsgExtendThread extends Thread {\n \n        private List<String> numberListByThread;\n \n        public SendMsgExtendThread(List<String> numberList) {\n            numberListByThread = numberList;\n        }\n \n        @Override\n        public void run() {\n            long startTime = System.currentTimeMillis();\n            for (int i = 0; i < numberListByThread.size(); i++) {\n                System.out.print(\"no.\" + (i + 1));\n                sendMsgToPhone(numberListByThread.get(i));\n            }\n            System.out.println(\"== single thread send \" + numberListByThread.size() + \"execute time:\" + (System.currentTimeMillis() - startTime) + \" ms\");\n        }\n    }\n \n    public class SendMsgImplCallable implements Callable<Long> {\n \n        private List<String> numberListByThread;\n \n        private String threadName;\n \n        public SendMsgImplCallable(List<String> numberList, String threadName) {\n            numberListByThread = numberList;\n            this.threadName = threadName;\n        }\n \n        @Override\n        public Long call() throws Exception {\n            Long startMills = System.currentTimeMillis();\n            for (String number : numberListByThread) {\n                sendMsgToPhone(number);\n            }\n            Long endMills = System.currentTimeMillis();\n            return endMills - startMills;\n        }\n    }\n}\n```\n\nhahaha\n",
    "body_draft": "",
    "body_html": "<p>对于多线程的理解不是非常深刻，工作中用到多线程代码的机会也不多，前不久遇到了一个使用场景，通过编码实现后对于多线程的理解和应用有了更加深刻的理解。场景如下：现有给用户发送产品调研的需求，运营的同事拿来了一个Excel文件，要求给Excel里面大约六万个手机号发送调研短信。</p><p><br /></p><p>最简单的方法就是一个循环然后单线程顺序发送，但是核心问题在于，给短信运营商发短信的接口响应时间较长，假设平均100ms的响应时间，那么单线程发送的话需要6万*0.1秒=6000秒。显然这个时间是不能接受的，运营商系统的发送接口我们是不能优化的，只得增强自己的发送和处理能力才能尽快的完成任务。</p><p><br /></p><p><a name=\"读取Excel中的信息\"></a></p><h2 id=\"8ea4e261\">读取Excel中的信息</h2><p><br /></p><p><a name=\"包依赖\"></a></p><h3 id=\"dd24a2fa\">包依赖</h3><p><br /></p><p>工具类代码，Maven中引入如下两个包</p><p><br /></p><pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;\n    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;\n    &lt;version&gt;3.17&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.xmlbeans&lt;/groupId&gt;\n    &lt;artifactId&gt;xmlbeans&lt;/artifactId&gt;\n    &lt;version&gt;2.6.0&lt;/version&gt;\n&lt;/dependency&gt;\n复制代码</code></pre><p><br /></p><p><a name=\"读取Excel的工具类代码\"></a></p><h3 id=\"306b8a15\">读取Excel的工具类代码</h3><p><br /></p><pre><code>/**\n * 读取Excel的文件信息\n *\n * @param fileName\n */\npublic static void readFromExcel(String fileName) {\n    InputStream is = null;\n    try {\n        is = new FileInputStream(fileName);\n        XSSFWorkbook workbook = new XSSFWorkbook(is);\n        XSSFSheet sheet = workbook.getSheetAt(0);\n        int num = 0;\n        // 循环行Row\n        for (int rowNum = 0, lastNum = sheet.getLastRowNum(); rowNum &lt;= lastNum; rowNum++) {\n            XSSFRow row = sheet.getRow(rowNum);\n            String phoneNumber = getStringValueFromCell(row.getCell(0)).trim();\n            phoneList.add(phoneNumber);\n        }\n        System.out.println(num);\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n \n/**\n * 读取Excel里面Cell内容\n *\n * @param cell\n * @return\n */\nprivate static String getStringValueFromCell(XSSFCell cell) {\n \n    // 单元格内的时间格式\n    SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\n    // 单元格内的数字类型\n    DecimalFormat decimalFormat = new DecimalFormat(&quot;#.#####&quot;);\n    // 单元格默认为空\n    String cellValue = &quot;&quot;;\n \n    if (cell == null) {\n        return cellValue;\n    }\n \n    // 按类型读取\n    if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) {\n        cellValue = cell.getStringCellValue();\n    } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {\n        // 日期转为时间形式\n        if (DateUtil.isCellDateFormatted(cell)) {\n            double d = cell.getNumericCellValue();\n            Date date = DateUtil.getJavaDate(d);\n            cellValue = dateFormat.format(date);\n        } else {\n            // 其他转为数字\n            cellValue = decimalFormat.format((cell.getNumericCellValue()));\n        }\n    } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) {\n        cellValue = &quot;&quot;;\n    } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) {\n        cellValue = String.valueOf(cell.getBooleanCellValue());\n    } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) {\n        cellValue = &quot;&quot;;\n    } else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) {\n        cellValue = cell.getCellFormula().toString();\n    }\n    return cellValue;\n}&amp;emsp;&amp;emsp;\n复制代码</code></pre><p><br /></p><p><a name=\"模拟运营商发送短信的方法\"></a></p><h2 id=\"43194329\">模拟运营商发送短信的方法</h2><p><br /></p><pre><code>/**\n * 外部接口耗时长，通过多线程增强\n *\n * @param userPhone\n */\npublic void sendMsgToPhone(String userPhone) {\n    try {\n        Thread.sleep(SEND_COST_TIME);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    System.out.println(&quot;send message to : &quot; + userPhone);\n}\n复制代码</code></pre><p><br /></p><p><a name=\"多线程发短信\"></a></p><h2 id=\"0d8e4eaa\">多线程发短信</h2><p><br /></p><p><a name=\"简单的单线程发送\"></a></p><h3 id=\"7d335007\">简单的单线程发送</h3><p><br /></p><pre><code>/**\n     * 单线程发送\n     *\n     * @param phoneList\n     * @return\n     */\n    private long singleThread(List&lt;String&gt; phoneList) {\n        long start = System.currentTimeMillis();\n        /*// 直接主线程执行\n        for (String phoneNumber : phoneList) {\n            threadOperation.sendMsgToPhone(phoneNumber);\n        }*/\n        SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(phoneList);\n        smet.start();\n        long totalTime = System.currentTimeMillis() - start;\n        System.out.println(&quot;单线程发送总时间：&quot; + totalTime);\n        return totalTime;\n    }\n复制代码</code></pre><p><br /></p><p>对于大批量发短信的场景，如果使用单线程将全部一千个号码发送完毕的话，大约需要103132ms，可见效率低下，耗费时间较长。</p><p><br /></p><p>多线程发送短信中的一个核心要点是，将全部手机号码拆分成多个组后，分配给每个线程进行执行。</p><p><br /></p><p><a name=\"两个线程的示例\"></a></p><h3 id=\"37cc9449\">两个线程的示例</h3><p><br /></p><pre><code>/**\n * 两个线程发送\n *\n * @param phoneList\n * @return\n */\nprivate long twoThreads(List&lt;String&gt; phoneList) {\n    long start = System.currentTimeMillis();\n    List&lt;String&gt; list1 = phoneList.subList(0, phoneList.size() / 2);\n    List&lt;String&gt; list2 = phoneList.subList(phoneList.size() / 2, phoneList.size());\n    SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(list1);\n    smet.start();\n    SendMsgExtendThread smet1 = threadOperation.new SendMsgExtendThread(list2);\n    smet1.start();\n    return 0;\n}\n复制代码</code></pre><p><br /></p><p><a name=\"另一种数据分组方式\"></a></p><h3 id=\"844e5e8c\">另一种数据分组方式</h3><p><br /></p><pre><code>/**\n * 另外一种分配方式\n *\n * @param phoneList\n */\nprivate void otherThread(List&lt;String&gt; phoneList) {\n    for (int threadNo = 0; threadNo &lt; 10; threadNo++) {\n        int numbersPerThread = 10;\n        List&lt;String&gt; list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 10);\n        SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(list);\n        smet.start();\n        if (list.size() &lt; numbersPerThread) {\n            break;\n        }\n    }\n}\n复制代码</code></pre><p><br /></p><p><a name=\"线程池发送\"></a></p><h3 id=\"a476680c\">线程池发送</h3><p><br /></p><pre><code>/**\n * 线程池发送\n *\n * @param phoneList\n * @return\n */\nprivate void threadPool(List&lt;String&gt; phoneList) {\n    for (int threadNo = 0; threadNo &lt; THREAD_POOL_SIZE; threadNo++) {\n        int numbersPerThread = 10;\n        List&lt;String&gt; list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 10);\n        threadOperation.executorService.execute(threadOperation.new SendMsgExtendThread(list));\n    }\n    threadOperation.executorService.shutdown();\n}\n复制代码</code></pre><p><br /></p><p><a name=\"使用Callable发送\"></a></p><h3 id=\"2c21416f\">使用Callable发送</h3><p><br /></p><pre><code>/**\n * 多线程发送\n *\n * @param phoneList\n * @return\n */\nprivate void multiThreadSend(List&lt;String&gt; phoneList) {\n    List&lt;Future&lt;Long&gt;&gt; futures = new ArrayList&lt;&gt;();\n    for (int threadNo = 0; threadNo &lt; THREAD_POOL_SIZE; threadNo++) {\n        int numbersPerThread = 100;\n        List&lt;String&gt; list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 100);\n        Future&lt;Long&gt; future = threadOperation.executorService.submit(threadOperation.new SendMsgImplCallable(list, String.valueOf(threadNo)));\n        futures.add(future);\n    }\n    for (Future&lt;Long&gt; future : futures) {\n        try {\n            System.out.println(future.get());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n    threadOperation.executorService.shutdown();\n}\n\n复制代码</code></pre><p><br /></p><p>使用多线程发送，将发送任务进行分割然后分配给每个线程执行，执行完毕需要10266ms，可见执行效率明显提升，消耗时间明显缩短。</p><p><br /></p><pre data-lang=\"java\"><code>package com.lingyejun.tick.authenticator;\n \nimport org.apache.poi.ss.usermodel.DateUtil;\nimport org.apache.poi.xssf.usermodel.XSSFCell;\nimport org.apache.poi.xssf.usermodel.XSSFRow;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n \nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\nimport java.util.concurrent.*;\n \npublic class ThreadOperation {\n \n    // 发短信的同步等待时间\n    private static final long SEND_COST_TIME = 100L;\n \n    // 手机号文件\n    private static final String FILE_NAME = &quot;/Users/lingye/Downloads/phone_number.xlsx&quot;;\n \n    // 手机号列表\n    private static List&lt;String&gt; phoneList = new ArrayList&lt;&gt;();\n \n    // 单例对象\n    private static volatile ThreadOperation threadOperation;\n \n    // 线程个数\n    private static final int THREAD_POOL_SIZE = 10;\n \n    // 初始化线程池\n    private ExecutorService executorService = new ThreadPoolExecutor(THREAD_POOL_SIZE, THREAD_POOL_SIZE,\n            0L, TimeUnit.MILLISECONDS,\n            new LinkedBlockingQueue&lt;Runnable&gt;());\n \n    public ThreadOperation() {\n        // 从本地文件中读取手机号码\n        readFromExcel(FILE_NAME);\n    }\n \n    public static void main(String[] args) {\n        ThreadOperation threadOperation = getInstance();\n        //threadOperation.singleThread(phoneList);\n        threadOperation.multiThreadSend(phoneList);\n    }\n \n    /**\n     * 单例获取对象\n     *\n     * @return\n     */\n    public static ThreadOperation getInstance() {\n        if (threadOperation == null) {\n            synchronized (ThreadOperation.class) {\n                if (threadOperation == null) {\n                    threadOperation = new ThreadOperation();\n                }\n            }\n        }\n        return threadOperation;\n    }\n \n    /**\n     * 读取Excel的文件信息\n     *\n     * @param fileName\n     */\n    public static void readFromExcel(String fileName) {\n        InputStream is = null;\n        try {\n            is = new FileInputStream(fileName);\n            XSSFWorkbook workbook = new XSSFWorkbook(is);\n            XSSFSheet sheet = workbook.getSheetAt(0);\n            int num = 0;\n            // 循环行Row\n            for (int rowNum = 0, lastNum = sheet.getLastRowNum(); rowNum &lt;= lastNum; rowNum++) {\n                XSSFRow row = sheet.getRow(rowNum);\n                String phoneNumber = getStringValueFromCell(row.getCell(0)).trim();\n                phoneList.add(phoneNumber);\n            }\n            System.out.println(num);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n \n    /**\n     * 读取Excel里面Cell内容\n     *\n     * @param cell\n     * @return\n     */\n    private static String getStringValueFromCell(XSSFCell cell) {\n \n        // 单元格内的时间格式\n        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\n        // 单元格内的数字类型\n        DecimalFormat decimalFormat = new DecimalFormat(&quot;#.#####&quot;);\n        // 单元格默认为空\n        String cellValue = &quot;&quot;;\n \n        if (cell == null) {\n            return cellValue;\n        }\n \n        // 按类型读取\n        if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) {\n            cellValue = cell.getStringCellValue();\n        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {\n            // 日期转为时间形式\n            if (DateUtil.isCellDateFormatted(cell)) {\n                double d = cell.getNumericCellValue();\n                Date date = DateUtil.getJavaDate(d);\n                cellValue = dateFormat.format(date);\n            } else {\n                // 其他转为数字\n                cellValue = decimalFormat.format((cell.getNumericCellValue()));\n            }\n        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) {\n            cellValue = &quot;&quot;;\n        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) {\n            cellValue = String.valueOf(cell.getBooleanCellValue());\n        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) {\n            cellValue = &quot;&quot;;\n        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) {\n            cellValue = cell.getCellFormula().toString();\n        }\n        return cellValue;\n    }\n \n    /**\n     * 外部接口耗时长，通过多线程增强\n     *\n     * @param userPhone\n     */\n    public void sendMsgToPhone(String userPhone) {\n        try {\n            Thread.sleep(SEND_COST_TIME);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(&quot;send message to : &quot; + userPhone);\n    }\n \n    /**\n     * 单线程发送\n     *\n     * @param phoneList\n     * @return\n     */\n    private long singleThread(List&lt;String&gt; phoneList) {\n        long start = System.currentTimeMillis();\n        /*// 直接主线程执行\n        for (String phoneNumber : phoneList) {\n            threadOperation.sendMsgToPhone(phoneNumber);\n        }*/\n        SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(phoneList);\n        smet.start();\n        long totalTime = System.currentTimeMillis() - start;\n        System.out.println(&quot;单线程发送总时间：&quot; + totalTime);\n        return totalTime;\n    }\n \n    /**\n     * 另外一种分配方式\n     *\n     * @param phoneList\n     */\n    private void otherThread(List&lt;String&gt; phoneList) {\n        for (int threadNo = 0; threadNo &lt; 10; threadNo++) {\n            int numbersPerThread = 10;\n            List&lt;String&gt; list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 10);\n            SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(list);\n            smet.start();\n            if (list.size() &lt; numbersPerThread) {\n                break;\n            }\n        }\n    }\n \n    /**\n     * 两个线程发送\n     *\n     * @param phoneList\n     * @return\n     */\n    private long twoThreads(List&lt;String&gt; phoneList) {\n        long start = System.currentTimeMillis();\n        List&lt;String&gt; list1 = phoneList.subList(0, phoneList.size() / 2);\n        List&lt;String&gt; list2 = phoneList.subList(phoneList.size() / 2, phoneList.size());\n        SendMsgExtendThread smet = threadOperation.new SendMsgExtendThread(list1);\n        smet.start();\n        SendMsgExtendThread smet1 = threadOperation.new SendMsgExtendThread(list2);\n        smet1.start();\n        return 0;\n    }\n \n    /**\n     * 线程池发送\n     *\n     * @param phoneList\n     * @return\n     */\n    private void threadPool(List&lt;String&gt; phoneList) {\n        for (int threadNo = 0; threadNo &lt; THREAD_POOL_SIZE; threadNo++) {\n            int numbersPerThread = 10;\n            List&lt;String&gt; list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 10);\n            threadOperation.executorService.execute(threadOperation.new SendMsgExtendThread(list));\n        }\n        threadOperation.executorService.shutdown();\n    }\n \n    /**\n     * 多线程发送\n     *\n     * @param phoneList\n     * @return\n     */\n    private void multiThreadSend(List&lt;String&gt; phoneList) {\n        List&lt;Future&lt;Long&gt;&gt; futures = new ArrayList&lt;&gt;();\n        for (int threadNo = 0; threadNo &lt; THREAD_POOL_SIZE; threadNo++) {\n            int numbersPerThread = 100;\n            List&lt;String&gt; list = phoneList.subList(threadNo * numbersPerThread, (threadNo * numbersPerThread) + 100);\n            Future&lt;Long&gt; future = threadOperation.executorService.submit(threadOperation.new SendMsgImplCallable(list, String.valueOf(threadNo)));\n            futures.add(future);\n        }\n        for (Future&lt;Long&gt; future : futures) {\n            try {\n                System.out.println(future.get());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (ExecutionException e) {\n                e.printStackTrace();\n            }\n        }\n        threadOperation.executorService.shutdown();\n    }\n \n    public class SendMsgExtendThread extends Thread {\n \n        private List&lt;String&gt; numberListByThread;\n \n        public SendMsgExtendThread(List&lt;String&gt; numberList) {\n            numberListByThread = numberList;\n        }\n \n        @Override\n        public void run() {\n            long startTime = System.currentTimeMillis();\n            for (int i = 0; i &lt; numberListByThread.size(); i++) {\n                System.out.print(&quot;no.&quot; + (i + 1));\n                sendMsgToPhone(numberListByThread.get(i));\n            }\n            System.out.println(&quot;== single thread send &quot; + numberListByThread.size() + &quot;execute time:&quot; + (System.currentTimeMillis() - startTime) + &quot; ms&quot;);\n        }\n    }\n \n    public class SendMsgImplCallable implements Callable&lt;Long&gt; {\n \n        private List&lt;String&gt; numberListByThread;\n \n        private String threadName;\n \n        public SendMsgImplCallable(List&lt;String&gt; numberList, String threadName) {\n            numberListByThread = numberList;\n            this.threadName = threadName;\n        }\n \n        @Override\n        public Long call() throws Exception {\n            Long startMills = System.currentTimeMillis();\n            for (String number : numberListByThread) {\n                sendMsgToPhone(number);\n            }\n            Long endMills = System.currentTimeMillis();\n            return endMills - startMills;\n        }\n    }\n}</code></pre><p><br /></p><p>hahaha</p>",
    "body_lake": "<!doctype lake><p>对于多线程的理解不是非常深刻，工作中用到多线程代码的机会也不多，前不久遇到了一个使用场景，通过编码实现后对于多线程的理解和应用有了更加深刻的理解。场景如下：现有给用户发送产品调研的需求，运营的同事拿来了一个Excel文件，要求给Excel里面大约六万个手机号发送调研短信。</p><p><br /></p><p>最简单的方法就是一个循环然后单线程顺序发送，但是核心问题在于，给短信运营商发短信的接口响应时间较长，假设平均100ms的响应时间，那么单线程发送的话需要6万*0.1秒=6000秒。显然这个时间是不能接受的，运营商系统的发送接口我们是不能优化的，只得增强自己的发送和处理能力才能尽快的完成任务。</p><p><br /></p><p><a name=\"读取Excel中的信息\"></a></p><h2 id=\"8ea4e261\">读取Excel中的信息</h2><p><br /></p><p><a name=\"包依赖\"></a></p><h3 id=\"dd24a2fa\">包依赖</h3><p><br /></p><p>工具类代码，Maven中引入如下两个包</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c66da2e7%22%2C%22code%22%3A%22%3Cdependency%3E%5Cn%20%20%20%20%3CgroupId%3Eorg.apache.poi%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Epoi-ooxml%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E3.17%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%5Cn%3Cdependency%3E%5Cn%20%20%20%20%3CgroupId%3Eorg.apache.xmlbeans%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Exmlbeans%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E2.6.0%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><a name=\"读取Excel的工具类代码\"></a></p><h3 id=\"306b8a15\">读取Excel的工具类代码</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%226764a5be%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E8%AF%BB%E5%8F%96Excel%E7%9A%84%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%5Cn%20*%5Cn%20*%20%40param%20fileName%5Cn%20*%2F%5Cnpublic%20static%20void%20readFromExcel(String%20fileName)%20%7B%5Cn%20%20%20%20InputStream%20is%20%3D%20null%3B%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20is%20%3D%20new%20FileInputStream(fileName)%3B%5Cn%20%20%20%20%20%20%20%20XSSFWorkbook%20workbook%20%3D%20new%20XSSFWorkbook(is)%3B%5Cn%20%20%20%20%20%20%20%20XSSFSheet%20sheet%20%3D%20workbook.getSheetAt(0)%3B%5Cn%20%20%20%20%20%20%20%20int%20num%20%3D%200%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%BE%AA%E7%8E%AF%E8%A1%8CRow%5Cn%20%20%20%20%20%20%20%20for%20(int%20rowNum%20%3D%200%2C%20lastNum%20%3D%20sheet.getLastRowNum()%3B%20rowNum%20%3C%3D%20lastNum%3B%20rowNum%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20XSSFRow%20row%20%3D%20sheet.getRow(rowNum)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20phoneNumber%20%3D%20getStringValueFromCell(row.getCell(0)).trim()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20phoneList.add(phoneNumber)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20System.out.println(num)%3B%5Cn%20%20%20%20%7D%20catch%20(FileNotFoundException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%20%5Cn%2F**%5Cn%20*%20%E8%AF%BB%E5%8F%96Excel%E9%87%8C%E9%9D%A2Cell%E5%86%85%E5%AE%B9%5Cn%20*%5Cn%20*%20%40param%20cell%5Cn%20*%20%40return%5Cn%20*%2F%5Cnprivate%20static%20String%20getStringValueFromCell(XSSFCell%20cell)%20%7B%5Cn%20%5Cn%20%20%20%20%2F%2F%20%E5%8D%95%E5%85%83%E6%A0%BC%E5%86%85%E7%9A%84%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%5Cn%20%20%20%20SimpleDateFormat%20dateFormat%20%3D%20new%20SimpleDateFormat(%5C%22yyyy-MM-dd%5C%22)%3B%5Cn%20%20%20%20%2F%2F%20%E5%8D%95%E5%85%83%E6%A0%BC%E5%86%85%E7%9A%84%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20DecimalFormat%20decimalFormat%20%3D%20new%20DecimalFormat(%5C%22%23.%23%23%23%23%23%5C%22)%3B%5Cn%20%20%20%20%2F%2F%20%E5%8D%95%E5%85%83%E6%A0%BC%E9%BB%98%E8%AE%A4%E4%B8%BA%E7%A9%BA%5Cn%20%20%20%20String%20cellValue%20%3D%20%5C%22%5C%22%3B%5Cn%20%5Cn%20%20%20%20if%20(cell%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20cellValue%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%2F%2F%20%E6%8C%89%E7%B1%BB%E5%9E%8B%E8%AF%BB%E5%8F%96%5Cn%20%20%20%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_STRING)%20%7B%5Cn%20%20%20%20%20%20%20%20cellValue%20%3D%20cell.getStringCellValue()%3B%5Cn%20%20%20%20%7D%20else%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_NUMERIC)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%97%A5%E6%9C%9F%E8%BD%AC%E4%B8%BA%E6%97%B6%E9%97%B4%E5%BD%A2%E5%BC%8F%5Cn%20%20%20%20%20%20%20%20if%20(DateUtil.isCellDateFormatted(cell))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20double%20d%20%3D%20cell.getNumericCellValue()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Date%20date%20%3D%20DateUtil.getJavaDate(d)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20cellValue%20%3D%20dateFormat.format(date)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%85%B6%E4%BB%96%E8%BD%AC%E4%B8%BA%E6%95%B0%E5%AD%97%5Cn%20%20%20%20%20%20%20%20%20%20%20%20cellValue%20%3D%20decimalFormat.format((cell.getNumericCellValue()))%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%20else%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_BLANK)%20%7B%5Cn%20%20%20%20%20%20%20%20cellValue%20%3D%20%5C%22%5C%22%3B%5Cn%20%20%20%20%7D%20else%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_BOOLEAN)%20%7B%5Cn%20%20%20%20%20%20%20%20cellValue%20%3D%20String.valueOf(cell.getBooleanCellValue())%3B%5Cn%20%20%20%20%7D%20else%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_ERROR)%20%7B%5Cn%20%20%20%20%20%20%20%20cellValue%20%3D%20%5C%22%5C%22%3B%5Cn%20%20%20%20%7D%20else%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_FORMULA)%20%7B%5Cn%20%20%20%20%20%20%20%20cellValue%20%3D%20cell.getCellFormula().toString()%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20cellValue%3B%5Cn%7D%26emsp%3B%26emsp%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><a name=\"模拟运营商发送短信的方法\"></a></p><h2 id=\"43194329\">模拟运营商发送短信的方法</h2><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22cc5b40a0%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E5%A4%96%E9%83%A8%E6%8E%A5%E5%8F%A3%E8%80%97%E6%97%B6%E9%95%BF%EF%BC%8C%E9%80%9A%E8%BF%87%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A2%9E%E5%BC%BA%5Cn%20*%5Cn%20*%20%40param%20userPhone%5Cn%20*%2F%5Cnpublic%20void%20sendMsgToPhone(String%20userPhone)%20%7B%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20Thread.sleep(SEND_COST_TIME)%3B%5Cn%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20System.out.println(%5C%22send%20message%20to%20%3A%20%5C%22%20%2B%20userPhone)%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><a name=\"多线程发短信\"></a></p><h2 id=\"0d8e4eaa\">多线程发短信</h2><p><br /></p><p><a name=\"简单的单线程发送\"></a></p><h3 id=\"7d335007\">简单的单线程发送</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%227957f40b%22%2C%22code%22%3A%22%2F**%5Cn%20%20%20%20%20*%20%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%8F%91%E9%80%81%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20phoneList%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20long%20singleThread(List%3CString%3E%20phoneList)%20%7B%5Cn%20%20%20%20%20%20%20%20long%20start%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%2F*%2F%2F%20%E7%9B%B4%E6%8E%A5%E4%B8%BB%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%5Cn%20%20%20%20%20%20%20%20for%20(String%20phoneNumber%20%3A%20phoneList)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20threadOperation.sendMsgToPhone(phoneNumber)%3B%5Cn%20%20%20%20%20%20%20%20%7D*%2F%5Cn%20%20%20%20%20%20%20%20SendMsgExtendThread%20smet%20%3D%20threadOperation.new%20SendMsgExtendThread(phoneList)%3B%5Cn%20%20%20%20%20%20%20%20smet.start()%3B%5Cn%20%20%20%20%20%20%20%20long%20totalTime%20%3D%20System.currentTimeMillis()%20-%20start%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%8F%91%E9%80%81%E6%80%BB%E6%97%B6%E9%97%B4%EF%BC%9A%5C%22%20%2B%20totalTime)%3B%5Cn%20%20%20%20%20%20%20%20return%20totalTime%3B%5Cn%20%20%20%20%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>对于大批量发短信的场景，如果使用单线程将全部一千个号码发送完毕的话，大约需要103132ms，可见效率低下，耗费时间较长。</p><p><br /></p><p>多线程发送短信中的一个核心要点是，将全部手机号码拆分成多个组后，分配给每个线程进行执行。</p><p><br /></p><p><a name=\"两个线程的示例\"></a></p><h3 id=\"37cc9449\">两个线程的示例</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22bb2ef591%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%8F%91%E9%80%81%5Cn%20*%5Cn%20*%20%40param%20phoneList%5Cn%20*%20%40return%5Cn%20*%2F%5Cnprivate%20long%20twoThreads(List%3CString%3E%20phoneList)%20%7B%5Cn%20%20%20%20long%20start%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20List%3CString%3E%20list1%20%3D%20phoneList.subList(0%2C%20phoneList.size()%20%2F%202)%3B%5Cn%20%20%20%20List%3CString%3E%20list2%20%3D%20phoneList.subList(phoneList.size()%20%2F%202%2C%20phoneList.size())%3B%5Cn%20%20%20%20SendMsgExtendThread%20smet%20%3D%20threadOperation.new%20SendMsgExtendThread(list1)%3B%5Cn%20%20%20%20smet.start()%3B%5Cn%20%20%20%20SendMsgExtendThread%20smet1%20%3D%20threadOperation.new%20SendMsgExtendThread(list2)%3B%5Cn%20%20%20%20smet1.start()%3B%5Cn%20%20%20%20return%200%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><a name=\"另一种数据分组方式\"></a></p><h3 id=\"844e5e8c\">另一种数据分组方式</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%226cfa2e29%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E5%8F%A6%E5%A4%96%E4%B8%80%E7%A7%8D%E5%88%86%E9%85%8D%E6%96%B9%E5%BC%8F%5Cn%20*%5Cn%20*%20%40param%20phoneList%5Cn%20*%2F%5Cnprivate%20void%20otherThread(List%3CString%3E%20phoneList)%20%7B%5Cn%20%20%20%20for%20(int%20threadNo%20%3D%200%3B%20threadNo%20%3C%2010%3B%20threadNo%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20int%20numbersPerThread%20%3D%2010%3B%5Cn%20%20%20%20%20%20%20%20List%3CString%3E%20list%20%3D%20phoneList.subList(threadNo%20*%20numbersPerThread%2C%20(threadNo%20*%20numbersPerThread)%20%2B%2010)%3B%5Cn%20%20%20%20%20%20%20%20SendMsgExtendThread%20smet%20%3D%20threadOperation.new%20SendMsgExtendThread(list)%3B%5Cn%20%20%20%20%20%20%20%20smet.start()%3B%5Cn%20%20%20%20%20%20%20%20if%20(list.size()%20%3C%20numbersPerThread)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20break%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><a name=\"线程池发送\"></a></p><h3 id=\"a476680c\">线程池发送</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22003b9c82%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%91%E9%80%81%5Cn%20*%5Cn%20*%20%40param%20phoneList%5Cn%20*%20%40return%5Cn%20*%2F%5Cnprivate%20void%20threadPool(List%3CString%3E%20phoneList)%20%7B%5Cn%20%20%20%20for%20(int%20threadNo%20%3D%200%3B%20threadNo%20%3C%20THREAD_POOL_SIZE%3B%20threadNo%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20int%20numbersPerThread%20%3D%2010%3B%5Cn%20%20%20%20%20%20%20%20List%3CString%3E%20list%20%3D%20phoneList.subList(threadNo%20*%20numbersPerThread%2C%20(threadNo%20*%20numbersPerThread)%20%2B%2010)%3B%5Cn%20%20%20%20%20%20%20%20threadOperation.executorService.execute(threadOperation.new%20SendMsgExtendThread(list))%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20threadOperation.executorService.shutdown()%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><a name=\"使用Callable发送\"></a></p><h3 id=\"2c21416f\">使用Callable发送</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22d7965bc1%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8F%91%E9%80%81%5Cn%20*%5Cn%20*%20%40param%20phoneList%5Cn%20*%20%40return%5Cn%20*%2F%5Cnprivate%20void%20multiThreadSend(List%3CString%3E%20phoneList)%20%7B%5Cn%20%20%20%20List%3CFuture%3CLong%3E%3E%20futures%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%20%20%20%20for%20(int%20threadNo%20%3D%200%3B%20threadNo%20%3C%20THREAD_POOL_SIZE%3B%20threadNo%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20int%20numbersPerThread%20%3D%20100%3B%5Cn%20%20%20%20%20%20%20%20List%3CString%3E%20list%20%3D%20phoneList.subList(threadNo%20*%20numbersPerThread%2C%20(threadNo%20*%20numbersPerThread)%20%2B%20100)%3B%5Cn%20%20%20%20%20%20%20%20Future%3CLong%3E%20future%20%3D%20threadOperation.executorService.submit(threadOperation.new%20SendMsgImplCallable(list%2C%20String.valueOf(threadNo)))%3B%5Cn%20%20%20%20%20%20%20%20futures.add(future)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20for%20(Future%3CLong%3E%20future%20%3A%20futures)%20%7B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(future.get())%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(ExecutionException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20threadOperation.executorService.shutdown()%3B%5Cn%7D%5Cn%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>使用多线程发送，将发送任务进行分割然后分配给每个线程执行，执行完毕需要10266ms，可见执行效率明显提升，消耗时间明显缩短。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f1a3a4ce%22%2C%22code%22%3A%22package%20com.lingyejun.tick.authenticator%3B%5Cn%20%5Cnimport%20org.apache.poi.ss.usermodel.DateUtil%3B%5Cnimport%20org.apache.poi.xssf.usermodel.XSSFCell%3B%5Cnimport%20org.apache.poi.xssf.usermodel.XSSFRow%3B%5Cnimport%20org.apache.poi.xssf.usermodel.XSSFSheet%3B%5Cnimport%20org.apache.poi.xssf.usermodel.XSSFWorkbook%3B%5Cn%20%5Cnimport%20java.io.FileInputStream%3B%5Cnimport%20java.io.FileNotFoundException%3B%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.io.InputStream%3B%5Cnimport%20java.text.DecimalFormat%3B%5Cnimport%20java.text.SimpleDateFormat%3B%5Cnimport%20java.util.*%3B%5Cnimport%20java.util.concurrent.*%3B%5Cn%20%5Cnpublic%20class%20ThreadOperation%20%7B%5Cn%20%5Cn%20%20%20%20%2F%2F%20%E5%8F%91%E7%9F%AD%E4%BF%A1%E7%9A%84%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4%5Cn%20%20%20%20private%20static%20final%20long%20SEND_COST_TIME%20%3D%20100L%3B%5Cn%20%5Cn%20%20%20%20%2F%2F%20%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%96%87%E4%BB%B6%5Cn%20%20%20%20private%20static%20final%20String%20FILE_NAME%20%3D%20%5C%22%2FUsers%2Flingye%2FDownloads%2Fphone_number.xlsx%5C%22%3B%5Cn%20%5Cn%20%20%20%20%2F%2F%20%E6%89%8B%E6%9C%BA%E5%8F%B7%E5%88%97%E8%A1%A8%5Cn%20%20%20%20private%20static%20List%3CString%3E%20phoneList%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%20%5Cn%20%20%20%20%2F%2F%20%E5%8D%95%E4%BE%8B%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20private%20static%20volatile%20ThreadOperation%20threadOperation%3B%5Cn%20%5Cn%20%20%20%20%2F%2F%20%E7%BA%BF%E7%A8%8B%E4%B8%AA%E6%95%B0%5Cn%20%20%20%20private%20static%20final%20int%20THREAD_POOL_SIZE%20%3D%2010%3B%5Cn%20%5Cn%20%20%20%20%2F%2F%20%E5%88%9D%E5%A7%8B%E5%8C%96%E7%BA%BF%E7%A8%8B%E6%B1%A0%5Cn%20%20%20%20private%20ExecutorService%20executorService%20%3D%20new%20ThreadPoolExecutor(THREAD_POOL_SIZE%2C%20THREAD_POOL_SIZE%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%200L%2C%20TimeUnit.MILLISECONDS%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20new%20LinkedBlockingQueue%3CRunnable%3E())%3B%5Cn%20%5Cn%20%20%20%20public%20ThreadOperation()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8E%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AF%BB%E5%8F%96%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%5Cn%20%20%20%20%20%20%20%20readFromExcel(FILE_NAME)%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20ThreadOperation%20threadOperation%20%3D%20getInstance()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2FthreadOperation.singleThread(phoneList)%3B%5Cn%20%20%20%20%20%20%20%20threadOperation.multiThreadSend(phoneList)%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8D%95%E4%BE%8B%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20ThreadOperation%20getInstance()%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(threadOperation%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20synchronized%20(ThreadOperation.class)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(threadOperation%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20threadOperation%20%3D%20new%20ThreadOperation()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20threadOperation%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%AF%BB%E5%8F%96Excel%E7%9A%84%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20fileName%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20void%20readFromExcel(String%20fileName)%20%7B%5Cn%20%20%20%20%20%20%20%20InputStream%20is%20%3D%20null%3B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20is%20%3D%20new%20FileInputStream(fileName)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20XSSFWorkbook%20workbook%20%3D%20new%20XSSFWorkbook(is)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20XSSFSheet%20sheet%20%3D%20workbook.getSheetAt(0)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20int%20num%20%3D%200%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%BE%AA%E7%8E%AF%E8%A1%8CRow%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for%20(int%20rowNum%20%3D%200%2C%20lastNum%20%3D%20sheet.getLastRowNum()%3B%20rowNum%20%3C%3D%20lastNum%3B%20rowNum%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20XSSFRow%20row%20%3D%20sheet.getRow(rowNum)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20phoneNumber%20%3D%20getStringValueFromCell(row.getCell(0)).trim()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20phoneList.add(phoneNumber)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(num)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(FileNotFoundException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%AF%BB%E5%8F%96Excel%E9%87%8C%E9%9D%A2Cell%E5%86%85%E5%AE%B9%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20cell%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20static%20String%20getStringValueFromCell(XSSFCell%20cell)%20%7B%5Cn%20%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8D%95%E5%85%83%E6%A0%BC%E5%86%85%E7%9A%84%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%5Cn%20%20%20%20%20%20%20%20SimpleDateFormat%20dateFormat%20%3D%20new%20SimpleDateFormat(%5C%22yyyy-MM-dd%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8D%95%E5%85%83%E6%A0%BC%E5%86%85%E7%9A%84%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20DecimalFormat%20decimalFormat%20%3D%20new%20DecimalFormat(%5C%22%23.%23%23%23%23%23%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8D%95%E5%85%83%E6%A0%BC%E9%BB%98%E8%AE%A4%E4%B8%BA%E7%A9%BA%5Cn%20%20%20%20%20%20%20%20String%20cellValue%20%3D%20%5C%22%5C%22%3B%5Cn%20%5Cn%20%20%20%20%20%20%20%20if%20(cell%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20cellValue%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%89%E7%B1%BB%E5%9E%8B%E8%AF%BB%E5%8F%96%5Cn%20%20%20%20%20%20%20%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_STRING)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20cellValue%20%3D%20cell.getStringCellValue()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_NUMERIC)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%97%A5%E6%9C%9F%E8%BD%AC%E4%B8%BA%E6%97%B6%E9%97%B4%E5%BD%A2%E5%BC%8F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(DateUtil.isCellDateFormatted(cell))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20double%20d%20%3D%20cell.getNumericCellValue()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Date%20date%20%3D%20DateUtil.getJavaDate(d)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cellValue%20%3D%20dateFormat.format(date)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%85%B6%E4%BB%96%E8%BD%AC%E4%B8%BA%E6%95%B0%E5%AD%97%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cellValue%20%3D%20decimalFormat.format((cell.getNumericCellValue()))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_BLANK)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20cellValue%20%3D%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_BOOLEAN)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20cellValue%20%3D%20String.valueOf(cell.getBooleanCellValue())%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_ERROR)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20cellValue%20%3D%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(cell.getCellType()%20%3D%3D%20XSSFCell.CELL_TYPE_FORMULA)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20cellValue%20%3D%20cell.getCellFormula().toString()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20cellValue%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%A4%96%E9%83%A8%E6%8E%A5%E5%8F%A3%E8%80%97%E6%97%B6%E9%95%BF%EF%BC%8C%E9%80%9A%E8%BF%87%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A2%9E%E5%BC%BA%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20userPhone%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20void%20sendMsgToPhone(String%20userPhone)%20%7B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Thread.sleep(SEND_COST_TIME)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22send%20message%20to%20%3A%20%5C%22%20%2B%20userPhone)%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%8F%91%E9%80%81%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20phoneList%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20long%20singleThread(List%3CString%3E%20phoneList)%20%7B%5Cn%20%20%20%20%20%20%20%20long%20start%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%2F*%2F%2F%20%E7%9B%B4%E6%8E%A5%E4%B8%BB%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%5Cn%20%20%20%20%20%20%20%20for%20(String%20phoneNumber%20%3A%20phoneList)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20threadOperation.sendMsgToPhone(phoneNumber)%3B%5Cn%20%20%20%20%20%20%20%20%7D*%2F%5Cn%20%20%20%20%20%20%20%20SendMsgExtendThread%20smet%20%3D%20threadOperation.new%20SendMsgExtendThread(phoneList)%3B%5Cn%20%20%20%20%20%20%20%20smet.start()%3B%5Cn%20%20%20%20%20%20%20%20long%20totalTime%20%3D%20System.currentTimeMillis()%20-%20start%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%8F%91%E9%80%81%E6%80%BB%E6%97%B6%E9%97%B4%EF%BC%9A%5C%22%20%2B%20totalTime)%3B%5Cn%20%20%20%20%20%20%20%20return%20totalTime%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8F%A6%E5%A4%96%E4%B8%80%E7%A7%8D%E5%88%86%E9%85%8D%E6%96%B9%E5%BC%8F%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20phoneList%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20void%20otherThread(List%3CString%3E%20phoneList)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(int%20threadNo%20%3D%200%3B%20threadNo%20%3C%2010%3B%20threadNo%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20int%20numbersPerThread%20%3D%2010%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CString%3E%20list%20%3D%20phoneList.subList(threadNo%20*%20numbersPerThread%2C%20(threadNo%20*%20numbersPerThread)%20%2B%2010)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20SendMsgExtendThread%20smet%20%3D%20threadOperation.new%20SendMsgExtendThread(list)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20smet.start()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(list.size()%20%3C%20numbersPerThread)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20break%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%8F%91%E9%80%81%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20phoneList%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20long%20twoThreads(List%3CString%3E%20phoneList)%20%7B%5Cn%20%20%20%20%20%20%20%20long%20start%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20List%3CString%3E%20list1%20%3D%20phoneList.subList(0%2C%20phoneList.size()%20%2F%202)%3B%5Cn%20%20%20%20%20%20%20%20List%3CString%3E%20list2%20%3D%20phoneList.subList(phoneList.size()%20%2F%202%2C%20phoneList.size())%3B%5Cn%20%20%20%20%20%20%20%20SendMsgExtendThread%20smet%20%3D%20threadOperation.new%20SendMsgExtendThread(list1)%3B%5Cn%20%20%20%20%20%20%20%20smet.start()%3B%5Cn%20%20%20%20%20%20%20%20SendMsgExtendThread%20smet1%20%3D%20threadOperation.new%20SendMsgExtendThread(list2)%3B%5Cn%20%20%20%20%20%20%20%20smet1.start()%3B%5Cn%20%20%20%20%20%20%20%20return%200%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%91%E9%80%81%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20phoneList%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20void%20threadPool(List%3CString%3E%20phoneList)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(int%20threadNo%20%3D%200%3B%20threadNo%20%3C%20THREAD_POOL_SIZE%3B%20threadNo%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20int%20numbersPerThread%20%3D%2010%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CString%3E%20list%20%3D%20phoneList.subList(threadNo%20*%20numbersPerThread%2C%20(threadNo%20*%20numbersPerThread)%20%2B%2010)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20threadOperation.executorService.execute(threadOperation.new%20SendMsgExtendThread(list))%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20threadOperation.executorService.shutdown()%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8F%91%E9%80%81%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20phoneList%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20void%20multiThreadSend(List%3CString%3E%20phoneList)%20%7B%5Cn%20%20%20%20%20%20%20%20List%3CFuture%3CLong%3E%3E%20futures%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20for%20(int%20threadNo%20%3D%200%3B%20threadNo%20%3C%20THREAD_POOL_SIZE%3B%20threadNo%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20int%20numbersPerThread%20%3D%20100%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CString%3E%20list%20%3D%20phoneList.subList(threadNo%20*%20numbersPerThread%2C%20(threadNo%20*%20numbersPerThread)%20%2B%20100)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Future%3CLong%3E%20future%20%3D%20threadOperation.executorService.submit(threadOperation.new%20SendMsgImplCallable(list%2C%20String.valueOf(threadNo)))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20futures.add(future)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20for%20(Future%3CLong%3E%20future%20%3A%20futures)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(future.get())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(ExecutionException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20threadOperation.executorService.shutdown()%3B%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20public%20class%20SendMsgExtendThread%20extends%20Thread%20%7B%5Cn%20%5Cn%20%20%20%20%20%20%20%20private%20List%3CString%3E%20numberListByThread%3B%5Cn%20%5Cn%20%20%20%20%20%20%20%20public%20SendMsgExtendThread(List%3CString%3E%20numberList)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20numberListByThread%20%3D%20numberList%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%20%20%20%20%40Override%5Cn%20%20%20%20%20%20%20%20public%20void%20run()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20long%20startTime%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20numberListByThread.size()%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.print(%5C%22no.%5C%22%20%2B%20(i%20%2B%201))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sendMsgToPhone(numberListByThread.get(i))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%3D%3D%20single%20thread%20send%20%5C%22%20%2B%20numberListByThread.size()%20%2B%20%5C%22execute%20time%3A%5C%22%20%2B%20(System.currentTimeMillis()%20-%20startTime)%20%2B%20%5C%22%20ms%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20public%20class%20SendMsgImplCallable%20implements%20Callable%3CLong%3E%20%7B%5Cn%20%5Cn%20%20%20%20%20%20%20%20private%20List%3CString%3E%20numberListByThread%3B%5Cn%20%5Cn%20%20%20%20%20%20%20%20private%20String%20threadName%3B%5Cn%20%5Cn%20%20%20%20%20%20%20%20public%20SendMsgImplCallable(List%3CString%3E%20numberList%2C%20String%20threadName)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20numberListByThread%20%3D%20numberList%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.threadName%20%3D%20threadName%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%5Cn%20%20%20%20%20%20%20%20%40Override%5Cn%20%20%20%20%20%20%20%20public%20Long%20call()%20throws%20Exception%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Long%20startMills%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for%20(String%20number%20%3A%20numberListByThread)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sendMsgToPhone(number)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Long%20endMills%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20endMills%20-%20startMills%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22mode%22%3A%22java%22%7D\"></card><p><br /></p><p>hahaha</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-06-25T02:57:29.000Z",
    "deleted_at": null,
    "created_at": "2019-02-05T13:36:12.000Z",
    "updated_at": "2019-06-25T04:40:34.000Z",
    "published_at": "2019-06-25T04:40:34.000Z",
    "first_published_at": "2019-02-05T13:36:13.000Z",
    "word_count": 2308,
    "cover": "",
    "description": "对于多线程的理解不是非常深刻，工作中用到多线程代码的机会也不多，前不久遇到了一个使用场景，通过编码实现后对于多线程的理解和应用有了更加深刻的理解。场景如下：现有给用户发送产品调研的需求，运营的同事拿来了一个Excel文件，要求给Excel里面大约六万个手机号发送调研短信。最简单的方法就是一个循...",
    "custom_description": "对于多线程的理解不是非常深刻，工作中用到多线程代码的机会也不多，前不久遇到了一个使用场景，通过编码实现后对于多线程的理解和应用有了更加深刻的理解。场景如下：现有给用户发送产品调研的需求，运营的同事拿来了一个Excel文件，要求给Excel里面大约六万个手机号发送调研短信。 最简单的方法就是一个...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1182102,
    "slug": "0bfaf295-0729-ad52-1882-02fc85bfc3a5",
    "title": "Trie 树",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "2013年09月23日 02:14:27 [arhaiyun](https://me.csdn.net/arhaiyun) 阅读数：9467\n\n**Trie 树， **又称字典树，单词查找树。它来源于retrieval(检索)中取中间四个字符构成(读音同try)。用于存储大量的字符串以便支持快速模式匹配。主要应用在信息检索领域。\n\nTrie 有三种结构： 标准trie (standard trie)、压缩trie、[后缀trie(suffix trie)](http://hxraid.iteye.com/blog/620414) 。 最后一种将在[《字符串处理4：后缀树》](https://www.baidu.com/s?wd=%E3%80%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%864%EF%BC%9A%E5%90%8E%E7%BC%80%E6%A0%91%E3%80%8B&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd)中详细讲，这里只将前两种。\n\n**1. 标准Trie (standard trie)**\n\n**标准 Trie树的结构 **： 所有含有公共前缀的字符串将挂在树中同一个结点下。实际上trie简明的存储了存在于串集合中的所有公共前缀。 假如有这样一个字符串集合X{bear,bell,bid,bull,buy,sell,stock,stop}。它的标准Trie树如下图：\n\n![](http://hxraid.iteye.com/upload/picture/pic/57141/51209a0f-3903-36fd-b3b2-19afa62c8cf2.jpg#width=)\n\n上图（蓝色圆形结点为内部结点，红色方形结点为外部结点），我们可以很清楚的看到字符串集合X构造的Trie树结构。其中从根结点到红色方框叶子节点所经历的所有字符组成的串就是字符串集合X中的一个串。\n\n注意这里有一个问题： 如果X集合中有一个串是另一个串的前缀呢？ 比如，X集合中加入串bi。那么上图的Trie树在绿色箭头所指的内部结点i 就应该也标记成红色方形结点。这样话，一棵树的枝干上将出现两个连续的叶子结点(这是不合常理的)。\n\n也就是说字符串集合X中不存在一个串是另外一个串的前缀 。如何满足这个要求呢？我们可以在X中的每个串后面加入一个特殊字符$(这个字符将不会出现在字母表中)。这样，集合X{bear$、bell$、.... bi$、bid$}一定会满足这个要求。\n\n总结：一个存储长度为n，来自大小为d的字母表中s个串的集合X的标准trie具有性质如下：\n\n(1) 树中每个内部结点至多有d个子结点。\n\n(2) 树有s个外部结点。\n\n(3) 树的高度等于X中最长串的长度。\n\n(4) 树中的结点数为O(n)。\n\n**标准 Trie树的查找**\n\n对于英文单词的查找，我们完全可以在内部结点中建立26个元素组成的指针数组。如果要查找a，只需要在内部节点的指针数组中找第0个指针即可(b=第1个指针，随机定位)。时间复杂度为O(1)。\n\n查找过程：假如我们要在上面那棵Trie中查找字符串bull (b-u-l-l)。\n\n(1) 在root结点中查找第('b'-'a'=1)号孩子指针，发现该指针不为空，则定位到第1号孩子结点处——b结点。\n\n(2) 在b结点中查找第('u'-'a'=20)号孩子指针，发现该指针不为空，则定位到第20号孩子结点处——u结点。\n\n(3) ... 一直查找到叶子结点出现特殊字符'$'位置，表示找到了bull字符串\n\n如果在查找过程中终止于内部结点，则表示没有找到待查找字符串。\n\n效率：对于有n个英文字母的串来说，在内部结点中定位指针所需要花费O(d)时间，d为字母表的大小，英文为26。由于在上面的算法中内部结点指针定位使用了数组随机存储方式，因此时间复杂度降为了O(1)。但是如果是中文字，下面在实际应用中会提到。因此我们在这里还是用O(d)。 查找成功的时候恰好走了一条从根结点到叶子结点的路径。因此时间复杂度为O(d*n)。\n\n但是，当查找集合X中所有字符串两两都不共享前缀时，trie中出现最坏情况。除根之外，所有内部结点都自由一个子结点。此时的查找时间复杂度蜕化为O(d*(n^2))\n\n**标准 Trie树的Java代码实现：**\n```java\n/*\nStandarTire.java\nTrie 树， 又称字典树，单词查找树。\n它来源于retrieval(检索)中取中间四个字符构成(读音同try)。用于存储大量的字符串以便支持快速模式匹配。主要应用在信息检索领域。\n@author arhaiyun\ndate:2013/09/23\n*/\n \nimport java.util.*;\n \nenum NodeKind{LN, BN};\n \n/**\n*Trie node\n*/\nclass TrieNode\n{\n\tchar key;\n\tTrieNode[] points = null;\n\tNodeKind kind = null;\n}\n \n/**\n* Branch node\n*/\nclass BranchNode extends TrieNode\n{\n\tBranchNode(char k)\n\t{\n\t\tsuper.key = k;\n\t\tsuper.kind = NodeKind.BN;\n\t\tsuper.points = new TrieNode[27];\n\t}\n}\n \n \n/**\n* Leaf node\n*/\nclass LeafNode extends TrieNode\n{\n\tLeafNode(char k)\n\t{\n\t\tsuper.key = k;\n\t\tsuper.kind = NodeKind.LN;\n\t}\n}\n \n \npublic class StandardTrie\n{\n\t//Create root node\n\tTrieNode root = new BranchNode(' ');\n \n\t//[1].Insert a word into tire tree\n\tpublic void insert(String words)\n\t{\n\t\tTrieNode curNode = root;\n\t\t//add '$' as an end symbol\n\t\twords = words + \"$\";\n\t\tchar[] chars = words.toCharArray();\n\t\t\n\t\tfor(int i = 0; i < chars.length; i++)\n\t\t{\n\t\t\tif(chars[i] == '$')\n\t\t\t{\n\t\t\t\tcurNode.points[26] = new LeafNode('$');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint pSize = chars[i] - 'a';\n\t\t\t\t// If not exists creat a new branch node\n\t\t\t\tif(curNode.points[pSize] == null)\n\t\t\t\t{\n\t\t\t\t\tcurNode.points[pSize] = new BranchNode(chars[i]);\n\t\t\t\t}\n\t\t\t\tcurNode = curNode.points[pSize];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//[2].Check if a word is in tire tree\n\tpublic boolean fullMatch(String words)\n\t{\n\t\tTrieNode curNode = root;\n\t\tchar[] chars = words.toCharArray();\n\t\t\n\t\tfor(int i = 0; i < chars.length; i++)\n\t\t{\n\t\t\tint pSize = chars[i] - 'a';\n\t\t\tSystem.out.print(chars[i]+\"->\");\n\t\t\tif(curNode.points[pSize] == null)\n\t\t\t\treturn false;\n\t\t\tcurNode = curNode.points[pSize];\n\t\t}\n\t\t\n\t\tif(curNode.points[26] != null && curNode.points[26].key == '$')\n\t\t\treturn true;\n\t\t\n\t\treturn false;\t\n\t}\n\t\n\t\n\t//[3].preorder root traverse\n\tprivate void preorderTraverse(TrieNode curNode)\n\t{\n\t\tif(curNode != null)\n\t\t{\n\t\t\tSystem.out.print(curNode.key);\n\t\t\t\n\t\t\tif(curNode.kind == NodeKind.BN)\n\t\t\t{\n\t\t\t\tfor(TrieNode node : curNode.points)\n\t\t\t\t{\n\t\t\t\t\tpreorderTraverse(node);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\t//[4].Get root node\n\tpublic TrieNode getRoot()\n\t{\n\t\treturn this.root;\n\t}\n\t\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tStandardTrie trie = new StandardTrie();\n\t\t\n\t\ttrie.insert(\"amazon\");\n\t\ttrie.insert(\"yahoo\");\n\t\ttrie.insert(\"haiyun\");\n\t\ttrie.insert(\"baidu\");\n\t\ttrie.insert(\"alibaba\");\n\t\ttrie.insert(\"offer\");\n\t\ttrie.insert(\"stock\");\n\t\ttrie.insert(\"stop\");\n\t\t\n\t\ttrie.preorderTraverse(trie.getRoot());\n\t\t\n\t\tSystem.out.println(trie.fullMatch(\"yahoo\"));\n\t\tSystem.out.println(trie.fullMatch(\"yaho\"));\n\t\tSystem.out.println(trie.fullMatch(\"baidu\"));\n\t\tSystem.out.println(trie.fullMatch(\"alibaba\"));\n\t}\n}\n```\n\n",
    "body_draft": "2013年09月23日 02:14:27 [arhaiyun](https://me.csdn.net/arhaiyun) 阅读数：9467\n\n__Trie 树， __又称字典树，单词查找树。它来源于retrieval(检索)中取中间四个字符构成(读音同try)。用于存储大量的字符串以便支持快速模式匹配。主要应用在信息检索领域。\n\nTrie 有三种结构： 标准trie (standard trie)、压缩trie、[后缀trie(suffix trie)](http://hxraid.iteye.com/blog/620414) 。 最后一种将在[《字符串处理4：后缀树》](https://www.baidu.com/s?wd=%E3%80%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%864%EF%BC%9A%E5%90%8E%E7%BC%80%E6%A0%91%E3%80%8B&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd)中详细讲，这里只将前两种。\n\n__1. 标准Trie (standard trie)__\n\n__标准 Trie树的结构 __： 所有含有公共前缀的字符串将挂在树中同一个结点下。实际上trie简明的存储了存在于串集合中的所有公共前缀。 假如有这样一个字符串集合X{bear,bell,bid,bull,buy,sell,stock,stop}。它的标准Trie树如下图：\n\n\n\n![image | left](http://hxraid.iteye.com/upload/picture/pic/57141/51209a0f-3903-36fd-b3b2-19afa62c8cf2.jpg \"\")\n\n\n上图（蓝色圆形结点为内部结点，红色方形结点为外部结点），我们可以很清楚的看到字符串集合X构造的Trie树结构。其中从根结点到红色方框叶子节点所经历的所有字符组成的串就是字符串集合X中的一个串。\n\n注意这里有一个问题： 如果X集合中有一个串是另一个串的前缀呢？ 比如，X集合中加入串bi。那么上图的Trie树在绿色箭头所指的内部结点i 就应该也标记成红色方形结点。这样话，一棵树的枝干上将出现两个连续的叶子结点(这是不合常理的)。\n\n也就是说字符串集合X中不存在一个串是另外一个串的前缀 。如何满足这个要求呢？我们可以在X中的每个串后面加入一个特殊字符\\$(这个字符将不会出现在字母表中)。这样，集合X{bear\\$、bell\\$、.... bi\\$、bid\\$}一定会满足这个要求。\n\n总结：一个存储长度为n，来自大小为d的字母表中s个串的集合X的标准trie具有性质如下：\n\n(1) 树中每个内部结点至多有d个子结点。\n\n(2) 树有s个外部结点。\n\n(3) 树的高度等于X中最长串的长度。\n\n(4) 树中的结点数为O(n)。\n\n__标准 Trie树的查找__\n\n对于英文单词的查找，我们完全可以在内部结点中建立26个元素组成的指针数组。如果要查找a，只需要在内部节点的指针数组中找第0个指针即可(b=第1个指针，随机定位)。时间复杂度为O(1)。\n\n查找过程：假如我们要在上面那棵Trie中查找字符串bull (b-u-l-l)。\n\n(1) 在root结点中查找第('b'-'a'=1)号孩子指针，发现该指针不为空，则定位到第1号孩子结点处——b结点。\n\n(2) 在b结点中查找第('u'-'a'=20)号孩子指针，发现该指针不为空，则定位到第20号孩子结点处——u结点。\n\n(3) ... 一直查找到叶子结点出现特殊字符'\\$'位置，表示找到了bull字符串\n\n如果在查找过程中终止于内部结点，则表示没有找到待查找字符串。\n\n效率：对于有n个英文字母的串来说，在内部结点中定位指针所需要花费O(d)时间，d为字母表的大小，英文为26。由于在上面的算法中内部结点指针定位使用了数组随机存储方式，因此时间复杂度降为了O(1)。但是如果是中文字，下面在实际应用中会提到。因此我们在这里还是用O(d)。 查找成功的时候恰好走了一条从根结点到叶子结点的路径。因此时间复杂度为O(d\\*n)。\n\n但是，当查找集合X中所有字符串两两都不共享前缀时，trie中出现最坏情况。除根之外，所有内部结点都自由一个子结点。此时的查找时间复杂度蜕化为O(d\\*(n^2))\n\n__标准 Trie树的Java代码实现：__\n```java\n/*\nStandarTire.java\nTrie 树， 又称字典树，单词查找树。\n它来源于retrieval(检索)中取中间四个字符构成(读音同try)。用于存储大量的字符串以便支持快速模式匹配。主要应用在信息检索领域。\n@author arhaiyun\ndate:2013/09/23\n*/\n \nimport java.util.*;\n \nenum NodeKind{LN, BN};\n \n/**\n*Trie node\n*/\nclass TrieNode\n{\n\tchar key;\n\tTrieNode[] points = null;\n\tNodeKind kind = null;\n}\n \n/**\n* Branch node\n*/\nclass BranchNode extends TrieNode\n{\n\tBranchNode(char k)\n\t{\n\t\tsuper.key = k;\n\t\tsuper.kind = NodeKind.BN;\n\t\tsuper.points = new TrieNode[27];\n\t}\n}\n \n \n/**\n* Leaf node\n*/\nclass LeafNode extends TrieNode\n{\n\tLeafNode(char k)\n\t{\n\t\tsuper.key = k;\n\t\tsuper.kind = NodeKind.LN;\n\t}\n}\n \n \npublic class StandardTrie\n{\n\t//Create root node\n\tTrieNode root = new BranchNode(' ');\n \n\t//[1].Insert a word into tire tree\n\tpublic void insert(String words)\n\t{\n\t\tTrieNode curNode = root;\n\t\t//add '$' as an end symbol\n\t\twords = words + \"$\";\n\t\tchar[] chars = words.toCharArray();\n\t\t\n\t\tfor(int i = 0; i < chars.length; i++)\n\t\t{\n\t\t\tif(chars[i] == '$')\n\t\t\t{\n\t\t\t\tcurNode.points[26] = new LeafNode('$');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint pSize = chars[i] - 'a';\n\t\t\t\t// If not exists creat a new branch node\n\t\t\t\tif(curNode.points[pSize] == null)\n\t\t\t\t{\n\t\t\t\t\tcurNode.points[pSize] = new BranchNode(chars[i]);\n\t\t\t\t}\n\t\t\t\tcurNode = curNode.points[pSize];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//[2].Check if a word is in tire tree\n\tpublic boolean fullMatch(String words)\n\t{\n\t\tTrieNode curNode = root;\n\t\tchar[] chars = words.toCharArray();\n\t\t\n\t\tfor(int i = 0; i < chars.length; i++)\n\t\t{\n\t\t\tint pSize = chars[i] - 'a';\n\t\t\tSystem.out.print(chars[i]+\"->\");\n\t\t\tif(curNode.points[pSize] == null)\n\t\t\t\treturn false;\n\t\t\tcurNode = curNode.points[pSize];\n\t\t}\n\t\t\n\t\tif(curNode.points[26] != null && curNode.points[26].key == '$')\n\t\t\treturn true;\n\t\t\n\t\treturn false;\t\n\t}\n\t\n\t\n\t//[3].preorder root traverse\n\tprivate void preorderTraverse(TrieNode curNode)\n\t{\n\t\tif(curNode != null)\n\t\t{\n\t\t\tSystem.out.print(curNode.key);\n\t\t\t\n\t\t\tif(curNode.kind == NodeKind.BN)\n\t\t\t{\n\t\t\t\tfor(TrieNode node : curNode.points)\n\t\t\t\t{\n\t\t\t\t\tpreorderTraverse(node);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\t//[4].Get root node\n\tpublic TrieNode getRoot()\n\t{\n\t\treturn this.root;\n\t}\n\t\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tStandardTrie trie = new StandardTrie();\n\t\t\n\t\ttrie.insert(\"amazon\");\n\t\ttrie.insert(\"yahoo\");\n\t\ttrie.insert(\"haiyun\");\n\t\ttrie.insert(\"baidu\");\n\t\ttrie.insert(\"alibaba\");\n\t\ttrie.insert(\"offer\");\n\t\ttrie.insert(\"stock\");\n\t\ttrie.insert(\"stop\");\n\t\t\n\t\ttrie.preorderTraverse(trie.getRoot());\n\t\t\n\t\tSystem.out.println(trie.fullMatch(\"yahoo\"));\n\t\tSystem.out.println(trie.fullMatch(\"yaho\"));\n\t\tSystem.out.println(trie.fullMatch(\"baidu\"));\n\t\tSystem.out.println(trie.fullMatch(\"alibaba\"));\n\t}\n}\n\n```\n\n",
    "body_html": "<p>2013年09月23日 02:14:27 <a href=\"https://me.csdn.net/arhaiyun\" target=\"_blank\">arhaiyun</a> 阅读数：9467</p><p><br /></p><p><strong>Trie 树， </strong>又称字典树，单词查找树。它来源于retrieval(检索)中取中间四个字符构成(读音同try)。用于存储大量的字符串以便支持快速模式匹配。主要应用在信息检索领域。</p><p><br /></p><p>Trie 有三种结构： 标准trie (standard trie)、压缩trie、<a href=\"http://hxraid.iteye.com/blog/620414\" target=\"_blank\">后缀trie(suffix trie)</a> 。 最后一种将在<a href=\"https://www.baidu.com/s?wd=%E3%80%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%864%EF%BC%9A%E5%90%8E%E7%BC%80%E6%A0%91%E3%80%8B&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\">《字符串处理4：后缀树》</a>中详细讲，这里只将前两种。</p><p><br /></p><p><strong>1. 标准Trie (standard trie)</strong></p><p><br /></p><p><strong>标准 Trie树的结构 </strong>： 所有含有公共前缀的字符串将挂在树中同一个结点下。实际上trie简明的存储了存在于串集合中的所有公共前缀。 假如有这样一个字符串集合X{bear,bell,bid,bull,buy,sell,stock,stop}。它的标准Trie树如下图：</p><p><br /></p><p><img src=\"http://hxraid.iteye.com/upload/picture/pic/57141/51209a0f-3903-36fd-b3b2-19afa62c8cf2.jpg#width=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>上图（蓝色圆形结点为内部结点，红色方形结点为外部结点），我们可以很清楚的看到字符串集合X构造的Trie树结构。其中从根结点到红色方框叶子节点所经历的所有字符组成的串就是字符串集合X中的一个串。</p><p><br /></p><p>注意这里有一个问题： 如果X集合中有一个串是另一个串的前缀呢？ 比如，X集合中加入串bi。那么上图的Trie树在绿色箭头所指的内部结点i 就应该也标记成红色方形结点。这样话，一棵树的枝干上将出现两个连续的叶子结点(这是不合常理的)。</p><p><br /></p><p>也就是说字符串集合X中不存在一个串是另外一个串的前缀 。如何满足这个要求呢？我们可以在X中的每个串后面加入一个特殊字符$(这个字符将不会出现在字母表中)。这样，集合X{bear$、bell$、.... bi$、bid$}一定会满足这个要求。</p><p><br /></p><p>总结：一个存储长度为n，来自大小为d的字母表中s个串的集合X的标准trie具有性质如下：</p><p><br /></p><p>(1) 树中每个内部结点至多有d个子结点。</p><p><br /></p><p>(2) 树有s个外部结点。</p><p><br /></p><p>(3) 树的高度等于X中最长串的长度。</p><p><br /></p><p>(4) 树中的结点数为O(n)。</p><p><br /></p><p><strong>标准 Trie树的查找</strong></p><p><br /></p><p>对于英文单词的查找，我们完全可以在内部结点中建立26个元素组成的指针数组。如果要查找a，只需要在内部节点的指针数组中找第0个指针即可(b=第1个指针，随机定位)。时间复杂度为O(1)。</p><p><br /></p><p>查找过程：假如我们要在上面那棵Trie中查找字符串bull (b-u-l-l)。</p><p><br /></p><p>(1) 在root结点中查找第('b'-'a'=1)号孩子指针，发现该指针不为空，则定位到第1号孩子结点处——b结点。</p><p><br /></p><p>(2) 在b结点中查找第('u'-'a'=20)号孩子指针，发现该指针不为空，则定位到第20号孩子结点处——u结点。</p><p><br /></p><p>(3) ... 一直查找到叶子结点出现特殊字符'$'位置，表示找到了bull字符串</p><p><br /></p><p>如果在查找过程中终止于内部结点，则表示没有找到待查找字符串。</p><p><br /></p><p>效率：对于有n个英文字母的串来说，在内部结点中定位指针所需要花费O(d)时间，d为字母表的大小，英文为26。由于在上面的算法中内部结点指针定位使用了数组随机存储方式，因此时间复杂度降为了O(1)。但是如果是中文字，下面在实际应用中会提到。因此我们在这里还是用O(d)。 查找成功的时候恰好走了一条从根结点到叶子结点的路径。因此时间复杂度为O(d*n)。</p><p><br /></p><p>但是，当查找集合X中所有字符串两两都不共享前缀时，trie中出现最坏情况。除根之外，所有内部结点都自由一个子结点。此时的查找时间复杂度蜕化为O(d*(n^2))</p><p><br /></p><p><strong>标准 Trie树的Java代码实现：</strong></p><pre data-lang=\"java\"><code>/*\nStandarTire.java\nTrie 树， 又称字典树，单词查找树。\n它来源于retrieval(检索)中取中间四个字符构成(读音同try)。用于存储大量的字符串以便支持快速模式匹配。主要应用在信息检索领域。\n@author arhaiyun\ndate:2013/09/23\n*/\n \nimport java.util.*;\n \nenum NodeKind{LN, BN};\n \n/**\n*Trie node\n*/\nclass TrieNode\n{\n\tchar key;\n\tTrieNode[] points = null;\n\tNodeKind kind = null;\n}\n \n/**\n* Branch node\n*/\nclass BranchNode extends TrieNode\n{\n\tBranchNode(char k)\n\t{\n\t\tsuper.key = k;\n\t\tsuper.kind = NodeKind.BN;\n\t\tsuper.points = new TrieNode[27];\n\t}\n}\n \n \n/**\n* Leaf node\n*/\nclass LeafNode extends TrieNode\n{\n\tLeafNode(char k)\n\t{\n\t\tsuper.key = k;\n\t\tsuper.kind = NodeKind.LN;\n\t}\n}\n \n \npublic class StandardTrie\n{\n\t//Create root node\n\tTrieNode root = new BranchNode(' ');\n \n\t//[1].Insert a word into tire tree\n\tpublic void insert(String words)\n\t{\n\t\tTrieNode curNode = root;\n\t\t//add '$' as an end symbol\n\t\twords = words + &quot;$&quot;;\n\t\tchar[] chars = words.toCharArray();\n\t\t\n\t\tfor(int i = 0; i &lt; chars.length; i++)\n\t\t{\n\t\t\tif(chars[i] == '$')\n\t\t\t{\n\t\t\t\tcurNode.points[26] = new LeafNode('$');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint pSize = chars[i] - 'a';\n\t\t\t\t// If not exists creat a new branch node\n\t\t\t\tif(curNode.points[pSize] == null)\n\t\t\t\t{\n\t\t\t\t\tcurNode.points[pSize] = new BranchNode(chars[i]);\n\t\t\t\t}\n\t\t\t\tcurNode = curNode.points[pSize];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//[2].Check if a word is in tire tree\n\tpublic boolean fullMatch(String words)\n\t{\n\t\tTrieNode curNode = root;\n\t\tchar[] chars = words.toCharArray();\n\t\t\n\t\tfor(int i = 0; i &lt; chars.length; i++)\n\t\t{\n\t\t\tint pSize = chars[i] - 'a';\n\t\t\tSystem.out.print(chars[i]+&quot;-&gt;&quot;);\n\t\t\tif(curNode.points[pSize] == null)\n\t\t\t\treturn false;\n\t\t\tcurNode = curNode.points[pSize];\n\t\t}\n\t\t\n\t\tif(curNode.points[26] != null &amp;&amp; curNode.points[26].key == '$')\n\t\t\treturn true;\n\t\t\n\t\treturn false;\t\n\t}\n\t\n\t\n\t//[3].preorder root traverse\n\tprivate void preorderTraverse(TrieNode curNode)\n\t{\n\t\tif(curNode != null)\n\t\t{\n\t\t\tSystem.out.print(curNode.key);\n\t\t\t\n\t\t\tif(curNode.kind == NodeKind.BN)\n\t\t\t{\n\t\t\t\tfor(TrieNode node : curNode.points)\n\t\t\t\t{\n\t\t\t\t\tpreorderTraverse(node);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\t//[4].Get root node\n\tpublic TrieNode getRoot()\n\t{\n\t\treturn this.root;\n\t}\n\t\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tStandardTrie trie = new StandardTrie();\n\t\t\n\t\ttrie.insert(&quot;amazon&quot;);\n\t\ttrie.insert(&quot;yahoo&quot;);\n\t\ttrie.insert(&quot;haiyun&quot;);\n\t\ttrie.insert(&quot;baidu&quot;);\n\t\ttrie.insert(&quot;alibaba&quot;);\n\t\ttrie.insert(&quot;offer&quot;);\n\t\ttrie.insert(&quot;stock&quot;);\n\t\ttrie.insert(&quot;stop&quot;);\n\t\t\n\t\ttrie.preorderTraverse(trie.getRoot());\n\t\t\n\t\tSystem.out.println(trie.fullMatch(&quot;yahoo&quot;));\n\t\tSystem.out.println(trie.fullMatch(&quot;yaho&quot;));\n\t\tSystem.out.println(trie.fullMatch(&quot;baidu&quot;));\n\t\tSystem.out.println(trie.fullMatch(&quot;alibaba&quot;));\n\t}\n}</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p>2013年09月23日 02:14:27 <a href=\"https://me.csdn.net/arhaiyun\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">arhaiyun</a> 阅读数：9467</p><p><br /></p><p><strong>Trie 树， </strong>又称字典树，单词查找树。它来源于retrieval(检索)中取中间四个字符构成(读音同try)。用于存储大量的字符串以便支持快速模式匹配。主要应用在信息检索领域。</p><p><br /></p><p>Trie 有三种结构： 标准trie (standard trie)、压缩trie、<a href=\"http://hxraid.iteye.com/blog/620414\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">后缀trie(suffix trie)</a> 。 最后一种将在<a href=\"https://www.baidu.com/s?wd=%E3%80%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%864%EF%BC%9A%E5%90%8E%E7%BC%80%E6%A0%91%E3%80%8B&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">《字符串处理4：后缀树》</a>中详细讲，这里只将前两种。</p><p><br /></p><p><strong>1. 标准Trie (standard trie)</strong></p><p><br /></p><p><strong>标准 Trie树的结构 </strong>： 所有含有公共前缀的字符串将挂在树中同一个结点下。实际上trie简明的存储了存在于串集合中的所有公共前缀。 假如有这样一个字符串集合X{bear,bell,bid,bull,buy,sell,stock,stop}。它的标准Trie树如下图：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22http%3A%2F%2Fhxraid.iteye.com%2Fupload%2Fpicture%2Fpic%2F57141%2F51209a0f-3903-36fd-b3b2-19afa62c8cf2.jpg%22%2C%22width%22%3A%22%22%7D\"></card></p><p><br /></p><p>上图（蓝色圆形结点为内部结点，红色方形结点为外部结点），我们可以很清楚的看到字符串集合X构造的Trie树结构。其中从根结点到红色方框叶子节点所经历的所有字符组成的串就是字符串集合X中的一个串。</p><p><br /></p><p>注意这里有一个问题： 如果X集合中有一个串是另一个串的前缀呢？ 比如，X集合中加入串bi。那么上图的Trie树在绿色箭头所指的内部结点i 就应该也标记成红色方形结点。这样话，一棵树的枝干上将出现两个连续的叶子结点(这是不合常理的)。</p><p><br /></p><p>也就是说字符串集合X中不存在一个串是另外一个串的前缀 。如何满足这个要求呢？我们可以在X中的每个串后面加入一个特殊字符$(这个字符将不会出现在字母表中)。这样，集合X{bear$、bell$、.... bi$、bid$}一定会满足这个要求。</p><p><br /></p><p>总结：一个存储长度为n，来自大小为d的字母表中s个串的集合X的标准trie具有性质如下：</p><p><br /></p><p>(1) 树中每个内部结点至多有d个子结点。</p><p><br /></p><p>(2) 树有s个外部结点。</p><p><br /></p><p>(3) 树的高度等于X中最长串的长度。</p><p><br /></p><p>(4) 树中的结点数为O(n)。</p><p><br /></p><p><strong>标准 Trie树的查找</strong></p><p><br /></p><p>对于英文单词的查找，我们完全可以在内部结点中建立26个元素组成的指针数组。如果要查找a，只需要在内部节点的指针数组中找第0个指针即可(b=第1个指针，随机定位)。时间复杂度为O(1)。</p><p><br /></p><p>查找过程：假如我们要在上面那棵Trie中查找字符串bull (b-u-l-l)。</p><p><br /></p><p>(1) 在root结点中查找第('b'-'a'=1)号孩子指针，发现该指针不为空，则定位到第1号孩子结点处——b结点。</p><p><br /></p><p>(2) 在b结点中查找第('u'-'a'=20)号孩子指针，发现该指针不为空，则定位到第20号孩子结点处——u结点。</p><p><br /></p><p>(3) ... 一直查找到叶子结点出现特殊字符'$'位置，表示找到了bull字符串</p><p><br /></p><p>如果在查找过程中终止于内部结点，则表示没有找到待查找字符串。</p><p><br /></p><p>效率：对于有n个英文字母的串来说，在内部结点中定位指针所需要花费O(d)时间，d为字母表的大小，英文为26。由于在上面的算法中内部结点指针定位使用了数组随机存储方式，因此时间复杂度降为了O(1)。但是如果是中文字，下面在实际应用中会提到。因此我们在这里还是用O(d)。 查找成功的时候恰好走了一条从根结点到叶子结点的路径。因此时间复杂度为O(d*n)。</p><p><br /></p><p>但是，当查找集合X中所有字符串两两都不共享前缀时，trie中出现最坏情况。除根之外，所有内部结点都自由一个子结点。此时的查找时间复杂度蜕化为O(d*(n^2))</p><p><br /></p><p><strong>标准 Trie树的Java代码实现：</strong></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%227daf2423%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F*%5CnStandarTire.java%5CnTrie%20%E6%A0%91%EF%BC%8C%20%E5%8F%88%E7%A7%B0%E5%AD%97%E5%85%B8%E6%A0%91%EF%BC%8C%E5%8D%95%E8%AF%8D%E6%9F%A5%E6%89%BE%E6%A0%91%E3%80%82%5Cn%E5%AE%83%E6%9D%A5%E6%BA%90%E4%BA%8Eretrieval(%E6%A3%80%E7%B4%A2)%E4%B8%AD%E5%8F%96%E4%B8%AD%E9%97%B4%E5%9B%9B%E4%B8%AA%E5%AD%97%E7%AC%A6%E6%9E%84%E6%88%90(%E8%AF%BB%E9%9F%B3%E5%90%8Ctry)%E3%80%82%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8%E5%A4%A7%E9%87%8F%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BB%A5%E4%BE%BF%E6%94%AF%E6%8C%81%E5%BF%AB%E9%80%9F%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E3%80%82%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8%E5%9C%A8%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E9%A2%86%E5%9F%9F%E3%80%82%5Cn%40author%20arhaiyun%5Cndate%3A2013%2F09%2F23%5Cn*%2F%5Cn%20%5Cnimport%20java.util.*%3B%5Cn%20%5Cnenum%20NodeKind%7BLN%2C%20BN%7D%3B%5Cn%20%5Cn%2F**%5Cn*Trie%20node%5Cn*%2F%5Cnclass%20TrieNode%5Cn%7B%5Cn%5Ctchar%20key%3B%5Cn%5CtTrieNode%5B%5D%20points%20%3D%20null%3B%5Cn%5CtNodeKind%20kind%20%3D%20null%3B%5Cn%7D%5Cn%20%5Cn%2F**%5Cn*%20Branch%20node%5Cn*%2F%5Cnclass%20BranchNode%20extends%20TrieNode%5Cn%7B%5Cn%5CtBranchNode(char%20k)%5Cn%5Ct%7B%5Cn%5Ct%5Ctsuper.key%20%3D%20k%3B%5Cn%5Ct%5Ctsuper.kind%20%3D%20NodeKind.BN%3B%5Cn%5Ct%5Ctsuper.points%20%3D%20new%20TrieNode%5B27%5D%3B%5Cn%5Ct%7D%5Cn%7D%5Cn%20%5Cn%20%5Cn%2F**%5Cn*%20Leaf%20node%5Cn*%2F%5Cnclass%20LeafNode%20extends%20TrieNode%5Cn%7B%5Cn%5CtLeafNode(char%20k)%5Cn%5Ct%7B%5Cn%5Ct%5Ctsuper.key%20%3D%20k%3B%5Cn%5Ct%5Ctsuper.kind%20%3D%20NodeKind.LN%3B%5Cn%5Ct%7D%5Cn%7D%5Cn%20%5Cn%20%5Cnpublic%20class%20StandardTrie%5Cn%7B%5Cn%5Ct%2F%2FCreate%20root%20node%5Cn%5CtTrieNode%20root%20%3D%20new%20BranchNode('%20')%3B%5Cn%20%5Cn%5Ct%2F%2F%5B1%5D.Insert%20a%20word%20into%20tire%20tree%5Cn%5Ctpublic%20void%20insert(String%20words)%5Cn%5Ct%7B%5Cn%5Ct%5CtTrieNode%20curNode%20%3D%20root%3B%5Cn%5Ct%5Ct%2F%2Fadd%20'%24'%20as%20an%20end%20symbol%5Cn%5Ct%5Ctwords%20%3D%20words%20%2B%20%5C%22%24%5C%22%3B%5Cn%5Ct%5Ctchar%5B%5D%20chars%20%3D%20words.toCharArray()%3B%5Cn%5Ct%5Ct%5Cn%5Ct%5Ctfor(int%20i%20%3D%200%3B%20i%20%3C%20chars.length%3B%20i%2B%2B)%5Cn%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ctif(chars%5Bi%5D%20%3D%3D%20'%24')%5Cn%5Ct%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ct%5CtcurNode.points%5B26%5D%20%3D%20new%20LeafNode('%24')%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ctelse%5Cn%5Ct%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ct%5Ctint%20pSize%20%3D%20chars%5Bi%5D%20-%20'a'%3B%5Cn%5Ct%5Ct%5Ct%5Ct%2F%2F%20If%20not%20exists%20creat%20a%20new%20branch%20node%5Cn%5Ct%5Ct%5Ct%5Ctif(curNode.points%5BpSize%5D%20%3D%3D%20null)%5Cn%5Ct%5Ct%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5CtcurNode.points%5BpSize%5D%20%3D%20new%20BranchNode(chars%5Bi%5D)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5CtcurNode%20%3D%20curNode.points%5BpSize%5D%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Ct%5Cn%5Ct%2F%2F%5B2%5D.Check%20if%20a%20word%20is%20in%20tire%20tree%5Cn%5Ctpublic%20boolean%20fullMatch(String%20words)%5Cn%5Ct%7B%5Cn%5Ct%5CtTrieNode%20curNode%20%3D%20root%3B%5Cn%5Ct%5Ctchar%5B%5D%20chars%20%3D%20words.toCharArray()%3B%5Cn%5Ct%5Ct%5Cn%5Ct%5Ctfor(int%20i%20%3D%200%3B%20i%20%3C%20chars.length%3B%20i%2B%2B)%5Cn%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ctint%20pSize%20%3D%20chars%5Bi%5D%20-%20'a'%3B%5Cn%5Ct%5Ct%5CtSystem.out.print(chars%5Bi%5D%2B%5C%22-%3E%5C%22)%3B%5Cn%5Ct%5Ct%5Ctif(curNode.points%5BpSize%5D%20%3D%3D%20null)%5Cn%5Ct%5Ct%5Ct%5Ctreturn%20false%3B%5Cn%5Ct%5Ct%5CtcurNode%20%3D%20curNode.points%5BpSize%5D%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Cn%5Ct%5Ctif(curNode.points%5B26%5D%20!%3D%20null%20%26%26%20curNode.points%5B26%5D.key%20%3D%3D%20'%24')%5Cn%5Ct%5Ct%5Ctreturn%20true%3B%5Cn%5Ct%5Ct%5Cn%5Ct%5Ctreturn%20false%3B%5Ct%5Cn%5Ct%7D%5Cn%5Ct%5Cn%5Ct%5Cn%5Ct%2F%2F%5B3%5D.preorder%20root%20traverse%5Cn%5Ctprivate%20void%20preorderTraverse(TrieNode%20curNode)%5Cn%5Ct%7B%5Cn%5Ct%5Ctif(curNode%20!%3D%20null)%5Cn%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5CtSystem.out.print(curNode.key)%3B%5Cn%5Ct%5Ct%5Ct%5Cn%5Ct%5Ct%5Ctif(curNode.kind%20%3D%3D%20NodeKind.BN)%5Cn%5Ct%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ct%5Ctfor(TrieNode%20node%20%3A%20curNode.points)%5Cn%5Ct%5Ct%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5CtpreorderTraverse(node)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ctelse%5Cn%5Ct%5Ct%5Ct%5CtSystem.out.println()%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Ct%5Cn%5Ct%2F%2F%5B4%5D.Get%20root%20node%5Cn%5Ctpublic%20TrieNode%20getRoot()%5Cn%5Ct%7B%5Cn%5Ct%5Ctreturn%20this.root%3B%5Cn%5Ct%7D%5Cn%5Ct%5Cn%5Ct%5Cn%5Ctpublic%20static%20void%20main(String%5B%5D%20args)%5Cn%5Ct%7B%5Cn%5Ct%5CtStandardTrie%20trie%20%3D%20new%20StandardTrie()%3B%5Cn%5Ct%5Ct%5Cn%5Ct%5Cttrie.insert(%5C%22amazon%5C%22)%3B%5Cn%5Ct%5Cttrie.insert(%5C%22yahoo%5C%22)%3B%5Cn%5Ct%5Cttrie.insert(%5C%22haiyun%5C%22)%3B%5Cn%5Ct%5Cttrie.insert(%5C%22baidu%5C%22)%3B%5Cn%5Ct%5Cttrie.insert(%5C%22alibaba%5C%22)%3B%5Cn%5Ct%5Cttrie.insert(%5C%22offer%5C%22)%3B%5Cn%5Ct%5Cttrie.insert(%5C%22stock%5C%22)%3B%5Cn%5Ct%5Cttrie.insert(%5C%22stop%5C%22)%3B%5Cn%5Ct%5Ct%5Cn%5Ct%5Cttrie.preorderTraverse(trie.getRoot())%3B%5Cn%5Ct%5Ct%5Cn%5Ct%5CtSystem.out.println(trie.fullMatch(%5C%22yahoo%5C%22))%3B%5Cn%5Ct%5CtSystem.out.println(trie.fullMatch(%5C%22yaho%5C%22))%3B%5Cn%5Ct%5CtSystem.out.println(trie.fullMatch(%5C%22baidu%5C%22))%3B%5Cn%5Ct%5CtSystem.out.println(trie.fullMatch(%5C%22alibaba%5C%22))%3B%5Cn%5Ct%7D%5Cn%7D%22%7D\"></card><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-24T04:46:03.000Z",
    "deleted_at": null,
    "created_at": "2019-01-24T04:45:16.000Z",
    "updated_at": "2019-05-23T07:18:06.000Z",
    "published_at": "2019-01-24T05:09:42.000Z",
    "first_published_at": null,
    "word_count": 1526,
    "cover": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548306574227-0694d968-837b-4b1e-8b09-aa422da19df7.png",
    "description": "2013年09月23日 02:14:27 arhaiyun 阅读数：9467Trie 树， 又称字典树，单词查找树。它来源于retrieval(检索)中取中间四个字符构成(读音同try)。用于存储大量的字符串以便支持快速模式匹配。主要应用在信息检索领域。Trie 有三种结构： 标准trie (...",
    "custom_description": "2013年09月23日 02:14:27 arhaiyun 阅读数：9467Trie 树， 又称字典树，单词查找树。它来源于retrieval(检索)中取中间四个字符构成(读音同try)。用于存储大量的字符串以便支持快速模式匹配。主要应用在信息检索领域。Trie 有三种结构： 标准trie (...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1171706,
    "slug": "f9635751-9242-c349-3fd2-1df03cdefaae",
    "title": "Java 泛型总结（三）：通配符的使用 - Coding - SegmentFault 思否",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "markdown",
    "body": "简介\n--\n\n前两篇文章介绍了泛型的基本用法、类型擦除以及泛型数组。在泛型的使用中，还有个重要的东西叫通配符，本文介绍通配符的使用。\n\n这个系列的另外两篇文章：\n\n*   [Java 泛型总结（一）：基本用法与类型擦除](https://segmentfault.com/a/1190000005179142)\n*   [Java 泛型总结（二）：泛型与数组](https://segmentfault.com/a/1190000005179147)\n\n数组的协变\n-----\n\n在了解通配符之前，先来了解一下数组。Java 中的数组是**协变**的，什么意思？看下面的例子：\n\n    class Fruit {}\n    class Apple extends Fruit {}\n    class Jonathan extends Apple {}\n    class Orange extends Fruit {}\n    \n    public class CovariantArrays {\n        public static void main(String[] args) {       \n            Fruit[] fruit = new Apple[10];\n            fruit[0] = new Apple(); \n            fruit[1] = new Jonathan(); \n            \n            try {\n                \n                fruit[0] = new Fruit(); \n            } catch(Exception e) { System.out.println(e); }\n            try {\n                \n                fruit[0] = new Orange(); \n            } catch(Exception e) { System.out.println(e); }\n            }\n    } \n\n`main` 方法中的第一行，创建了一个 `Apple` 数组并把它赋给 `Fruit` 数组的引用。这是有意义的，`Apple` 是 `Fruit` 的子类，一个 `Apple` 对象也是一种 `Fruit` 对象，所以一个 `Apple` 数组也是一种 `Fruit` 的数组。这称作**数组的协变**，Java 把数组设计为协变的，对此是有争议的，有人认为这是一种缺陷。\n\n尽管 `Apple[]` 可以 “向上转型” 为 `Fruit[]`，但数组元素的实际类型还是 `Apple`，我们只能向数组中放入 `Apple`或者 `Apple` 的子类。在上面的代码中，向数组中放入了 `Fruit` 对象和 `Orange` 对象。对于编译器来说，这是可以通过编译的，但是在运行时期，JVM 能够知道数组的实际类型是 `Apple[]`，所以当其它对象加入数组的时候就会抛出异常。\n\n泛型设计的目的之一是要使这种运行时期的错误在编译期就能发现，看看用泛型容器类来代替数组会发生什么：\n\n    \n    ArrayList<Fruit> flist = new ArrayList<Apple>();\n    \n\n上面的代码根本就无法编译。当涉及到泛型时， 尽管 `Apple` 是 `Fruit` 的子类型，但是 `ArrayList<Apple>` 不是 `ArrayList<Fruit>` 的子类型，泛型不支持协变。\n\n使用通配符\n-----\n\n从上面我们知道，`List<Number> list = ArrayList<Integer>` 这样的语句是无法通过编译的，尽管 `Integer` 是 `Number` 的子类型。那么如果我们确实需要建立这种 “向上转型” 的关系怎么办呢？这就需要通配符来发挥作用了。\n\n### 上边界限定通配符\n\n利用 `<? extends Fruit>` 形式的通配符，可以实现泛型的向上转型：\n\n    public class GenericsAndCovariance {\n        public static void main(String[] args) {\n            \n            List<? extends Fruit> flist = new ArrayList<Apple>();\n            \n            \n            \n            \n            flist.add(null); \n            \n            Fruit f = flist.get(0);\n        }\n    }\n\n上面的例子中， `flist` 的类型是 `List<? extends Fruit>`，我们可以把它读作：一个类型的 List， 这个类型可以是继承了 `Fruit` 的某种类型。注意，**这并不是说这个 List 可以持有** `Fruit` **的任意类型**。通配符代表了一种特定的类型，它表示 “某种特定的类型，但是 `flist` 没有指定”。这样不太好理解，具体针对这个例子解释就是，`flist` 引用可以指向某个类型的 List，只要这个类型继承自 `Fruit`，可以是 `Fruit` 或者 `Apple`，比如例子中的 `new ArrayList<Apple>`，但是为了向上转型给 `flist`，`flist` 并不关心这个具体类型是什么。\n\n如上所述，通配符 `List<? extends Fruit>` 表示某种特定类型 ( `Fruit` 或者其子类 ) 的 List，但是并不关心这个实际的类型到底是什么，反正是 `Fruit` 的子类型，`Fruit` 是它的上边界。那么对这样的一个 List 我们能做什么呢？其实如果我们不知道这个 List 到底持有什么类型，怎么可能安全的添加一个对象呢？在上面的代码中，向 `flist` 中添加任何对象，无论是 `Apple` 还是 `Orange` 甚至是 `Fruit` 对象，编译器都不允许，唯一可以添加的是 `null`。所以如果做了泛型的向上转型 (`List<? extends Fruit> flist = new ArrayList<Apple>()`)，那么我们也就失去了向这个 List 添加任何对象的能力，即使是 `Object` 也不行。\n\n另一方面，如果调用某个返回 `Fruit` 的方法，这是安全的。因为我们知道，在这个 List 中，不管它实际的类型到底是什么，但肯定能转型为 `Fruit`，所以编译器允许返回 `Fruit`。\n\n了解了通配符的作用和限制后，好像任何接受参数的方法我们都不能调用了。其实倒也不是，看下面的例子：\n\n    public class CompilerIntelligence {\n        public static void main(String[] args) {\n            List<? extends Fruit> flist =\n            Arrays.asList(new Apple());\n            Apple a = (Apple)flist.get(0); \n            flist.contains(new Apple()); \n            flist.indexOf(new Apple()); \n            \n            \n    \n        }\n    }\n\n在上面的例子中，`flist` 的类型是 `List<? extends Fruit>`，泛型参数使用了受限制的通配符，所以我们失去了向其中加入任何类型对象的例子，最后一行代码无法编译。\n\n但是 `flist` 却可以调用 `contains` 和 `indexOf` 方法，它们都接受了一个 `Apple` 对象做参数。如果查看 `ArrayList` 的源代码，可以发现 `add()` 接受一个泛型类型作为参数，但是 `contains` 和 `indexOf` 接受一个 `Object` 类型的参数，下面是它们的方法签名：\n\n    public boolean add(E e)\n    public boolean contains(Object o)\n    public int indexOf(Object o)\n    \n\n所以如果我们指定泛型参数为 `<? extends Fruit>` 时，`add()` 方法的参数变为 `? extends Fruit`，编译器无法判断这个参数接受的到底是 `Fruit` 的哪种类型，所以它不会接受任何类型。\n\n然而，`contains` 和 `indexOf` 的类型是 `Object`，并没有涉及到通配符，所以编译器允许调用这两个方法。这意味着一切取决于泛型类的编写者来决定那些调用是 “安全” 的，并且用 `Object` 作为这些安全方法的参数。如果某些方法不允许类型参数是通配符时的调用，这些方法的参数应该用类型参数，比如 `add(E e)`。\n\n当我们自己编写泛型类时，上面介绍的就有用了。下面编写一个 `Holder` 类：\n\n    public class Holder<T> {\n        private T value;\n        public Holder() {}\n        public Holder(T val) { value = val; }\n        public void set(T val) { value = val; }\n        public T get() { return value; }\n        public boolean equals(Object obj) {\n        return value.equals(obj);\n        }\n        public static void main(String[] args) {\n            Holder<Apple> Apple = new Holder<Apple>(new Apple());\n            Apple d = Apple.get();\n            Apple.set(d);\n            \n            Holder<? extends Fruit> fruit = Apple; \n            Fruit p = fruit.get();\n            d = (Apple)fruit.get(); \n            try {\n                Orange c = (Orange)fruit.get(); \n            } catch(Exception e) { System.out.println(e); }\n            \n            \n            System.out.println(fruit.equals(d)); \n        }\n    } \n    \n\n在 `Holer` 类中，`set()` 方法接受类型参数 `T` 的对象作为参数，`get()` 返回一个 `T` 类型，而 `equals()` 接受一个 `Object` 作为参数。`fruit` 的类型是 `Holder<? extends Fruit>`，所以`set()`方法不会接受任何对象的添加，但是 `equals()` 可以正常工作。\n\n### 下边界限定通配符\n\n通配符的另一个方向是　“超类型的通配符“: `? super T`，`T` 是类型参数的下界。使用这种形式的通配符，我们就可以 ”传递对象” 了。还是用例子解释：\n\n    public class SuperTypeWildcards {\n        static void writeTo(List<? super Apple> apples) {\n            apples.add(new Apple());\n            apples.add(new Jonathan());\n            \n        }\n    }\n\n`writeTo` 方法的参数 `apples` 的类型是 `List<? super Apple>`，它表示某种类型的 List，这个类型是 `Apple` 的基类型。也就是说，我们不知道实际类型是什么，但是这个类型肯定是 `Apple` 的父类型。因此，我们可以知道向这个 List 添加一个 `Apple` 或者其子类型的对象是安全的，这些对象都可以向上转型为 `Apple`。但是我们不知道加入 `Fruit` 对象是否安全，因为那样会使得这个 List 添加跟 `Apple` 无关的类型。\n\n在了解了子类型边界和超类型边界之后，我们就可以知道如何向泛型类型中 “写入” ( 传递对象给方法参数) 以及如何从泛型类型中 “读取” ( 从方法中返回对象 )。下面是一个例子：\n\n    public class Collections { \n      public static <T> void copy(List<? super T> dest, List<? extends T> src) \n      {\n          for (int i=0; i<src.size(); i++) \n            dest.set(i,src.get(i)); \n      } \n    }\n\n`src` 是原始数据的 List，因为要从这里面读取数据，所以用了上边界限定通配符：`<? extends T>`，取出的元素转型为 `T`。`dest` 是要写入的目标 List，所以用了下边界限定通配符：`<? super T>`，可以写入的元素类型是 `T` 及其子类型。\n\n### 无边界通配符\n\n还有一种通配符是无边界通配符，它的使用形式是一个单独的问号：`List<?>`，也就是没有任何限定。不做任何限制，跟不用类型参数的 `List` 有什么区别呢？\n\n`List<?> list` 表示 `list` 是持有某种特定类型的 List，但是不知道具体是哪种类型。那么我们可以向其中添加对象吗？当然不可以，因为并不知道实际是哪种类型，所以不能添加任何类型，这是不安全的。而单独的 `List list` ，也就是没有传入泛型参数，表示这个 list 持有的元素的类型是 `Object`，因此可以添加任何类型的对象，只不过编译器会有警告信息。\n\n总结\n--\n\n通配符的使用可以对泛型参数做出某些限制，使代码更安全，对于上边界和下边界限定的通配符总结如下：\n\n*   使用 `List<? extends C> list` 这种形式，表示 list 可以引用一个 `ArrayList` ( 或者其它 List 的 子类 ) 的对象，这个对象包含的元素类型是 `C` 的子类型 ( 包含 `C` 本身）的一种。\n*   使用 `List<? super C> list` 这种形式，表示 list 可以引用一个 `ArrayList` ( 或者其它 List 的 子类 ) 的对象，这个对象包含的元素就类型是 `C` 的超类型 ( 包含 `C` 本身 ) 的一种。\n\n大多数情况下泛型的使用比较简单，但是如果自己编写支持泛型的代码需要对泛型有深入的了解。这几篇文章介绍了泛型的基本用法、类型擦除、泛型数组以及通配符的使用，涵盖了最常用的要点，泛型的总结就写到这里。\n\n**参考**\n\n*   Java 编程思想\n\n**_如果我的文章对您有帮助，不妨点个赞支持一下(^\\_^)_**",
    "body_draft": "## <a name=\"sq2cgf\"></a>简介\n\n前两篇文章介绍了泛型的基本用法、类型擦除以及泛型数组。在泛型的使用中，还有个重要的东西叫通配符，本文介绍通配符的使用。\n\n这个系列的另外两篇文章：\n\n* [Java 泛型总结（一）：基本用法与类型擦除](https://segmentfault.com/a/1190000005179142)\n* [Java 泛型总结（二）：泛型与数组](https://segmentfault.com/a/1190000005179147)\n\n## <a name=\"mbrqtz\"></a>数组的协变\n\n在了解通配符之前，先来了解一下数组。Java 中的数组是__协变__的，什么意思？看下面的例子：\n```\nclass Fruit {}\nclass Apple extends Fruit {}\nclass Jonathan extends Apple {}\nclass Orange extends Fruit {}\n\npublic class CovariantArrays {\n    public static void main(String[] args) {       \n        Fruit[] fruit = new Apple[10];\n        fruit[0] = new Apple(); \n        fruit[1] = new Jonathan(); \n        \n        try {\n            \n            fruit[0] = new Fruit(); \n        } catch(Exception e) { System.out.println(e); }\n        try {\n            \n            fruit[0] = new Orange(); \n        } catch(Exception e) { System.out.println(e); }\n        }\n} \n```\n\n`main` 方法中的第一行，创建了一个 `Apple` 数组并把它赋给 `Fruit` 数组的引用。这是有意义的，`Apple` 是 `Fruit` 的子类，一个 `Apple` 对象也是一种 `Fruit` 对象，所以一个 `Apple` 数组也是一种 `Fruit` 的数组。这称作__数组的协变__，Java 把数组设计为协变的，对此是有争议的，有人认为这是一种缺陷。\n\n尽管 `Apple[]` 可以 “向上转型” 为 `Fruit[]`，但数组元素的实际类型还是 `Apple`，我们只能向数组中放入 `Apple`或者 `Apple` 的子类。在上面的代码中，向数组中放入了 `Fruit` 对象和 `Orange` 对象。对于编译器来说，这是可以通过编译的，但是在运行时期，JVM 能够知道数组的实际类型是 `Apple[]`，所以当其它对象加入数组的时候就会抛出异常。\n\n泛型设计的目的之一是要使这种运行时期的错误在编译期就能发现，看看用泛型容器类来代替数组会发生什么：\n```\nArrayList<Fruit> flist = new ArrayList<Apple>();\n```\n\n上面的代码根本就无法编译。当涉及到泛型时， 尽管 `Apple` 是 `Fruit` 的子类型，但是 `ArrayList<Apple>` 不是 `ArrayList<Fruit>` 的子类型，泛型不支持协变。\n\n## <a name=\"ou7fsq\"></a>使用通配符\n\n从上面我们知道，`List<Number> list = ArrayList<Integer>` 这样的语句是无法通过编译的，尽管 `Integer` 是 `Number` 的子类型。那么如果我们确实需要建立这种 “向上转型” 的关系怎么办呢？这就需要通配符来发挥作用了。\n\n### <a name=\"f174wa\"></a>上边界限定通配符\n\n利用 `<? extends Fruit>` 形式的通配符，可以实现泛型的向上转型：\n```\npublic class GenericsAndCovariance {\n    public static void main(String[] args) {\n        \n        List<? extends Fruit> flist = new ArrayList<Apple>();\n        \n        \n        \n        \n        flist.add(null); \n        \n        Fruit f = flist.get(0);\n    }\n}\n```\n\n上面的例子中， `flist` 的类型是 `List<? extends Fruit>`，我们可以把它读作：一个类型的 List， 这个类型可以是继承了 `Fruit` 的某种类型。注意，__这并不是说这个 List 可以持有__ `Fruit` __的任意类型__。通配符代表了一种特定的类型，它表示 “某种特定的类型，但是 `flist` 没有指定”。这样不太好理解，具体针对这个例子解释就是，`flist` 引用可以指向某个类型的 List，只要这个类型继承自 `Fruit`，可以是 `Fruit` 或者 `Apple`，比如例子中的 `new ArrayList<Apple>`，但是为了向上转型给 `flist`，`flist` 并不关心这个具体类型是什么。\n\n如上所述，通配符 `List<? extends Fruit>` 表示某种特定类型 ( `Fruit` 或者其子类 ) 的 List，但是并不关心这个实际的类型到底是什么，反正是 `Fruit` 的子类型，`Fruit` 是它的上边界。那么对这样的一个 List 我们能做什么呢？其实如果我们不知道这个 List 到底持有什么类型，怎么可能安全的添加一个对象呢？在上面的代码中，向 `flist` 中添加任何对象，无论是 `Apple` 还是 `Orange` 甚至是 `Fruit` 对象，编译器都不允许，唯一可以添加的是 `null`。所以如果做了泛型的向上转型 (`List<? extends Fruit> flist = new ArrayList<Apple>()`)，那么我们也就失去了向这个 List 添加任何对象的能力，即使是 `Object` 也不行。\n\n另一方面，如果调用某个返回 `Fruit` 的方法，这是安全的。因为我们知道，在这个 List 中，不管它实际的类型到底是什么，但肯定能转型为 `Fruit`，所以编译器允许返回 `Fruit`。\n\n了解了通配符的作用和限制后，好像任何接受参数的方法我们都不能调用了。其实倒也不是，看下面的例子：\n```\npublic class CompilerIntelligence {\n    public static void main(String[] args) {\n        List<? extends Fruit> flist =\n        Arrays.asList(new Apple());\n        Apple a = (Apple)flist.get(0); \n        flist.contains(new Apple()); \n        flist.indexOf(new Apple()); \n        \n        \n\n    }\n}\n```\n\n在上面的例子中，`flist` 的类型是 `List<? extends Fruit>`，泛型参数使用了受限制的通配符，所以我们失去了向其中加入任何类型对象的例子，最后一行代码无法编译。\n\n但是 `flist` 却可以调用 `contains` 和 `indexOf` 方法，它们都接受了一个 `Apple` 对象做参数。如果查看 `ArrayList` 的源代码，可以发现 `add()` 接受一个泛型类型作为参数，但是 `contains` 和 `indexOf` 接受一个 `Object` 类型的参数，下面是它们的方法签名：\n```\npublic boolean add(E e)\npublic boolean contains(Object o)\npublic int indexOf(Object o)\n```\n\n所以如果我们指定泛型参数为 `<? extends Fruit>` 时，`add()` 方法的参数变为 `? extends Fruit`，编译器无法判断这个参数接受的到底是 `Fruit` 的哪种类型，所以它不会接受任何类型。\n\n然而，`contains` 和 `indexOf` 的类型是 `Object`，并没有涉及到通配符，所以编译器允许调用这两个方法。这意味着一切取决于泛型类的编写者来决定那些调用是 “安全” 的，并且用 `Object` 作为这些安全方法的参数。如果某些方法不允许类型参数是通配符时的调用，这些方法的参数应该用类型参数，比如 `add(E e)`。\n\n当我们自己编写泛型类时，上面介绍的就有用了。下面编写一个 `Holder` 类：\n```\npublic class Holder<T> {\n    private T value;\n    public Holder() {}\n    public Holder(T val) { value = val; }\n    public void set(T val) { value = val; }\n    public T get() { return value; }\n    public boolean equals(Object obj) {\n    return value.equals(obj);\n    }\n    public static void main(String[] args) {\n        Holder<Apple> Apple = new Holder<Apple>(new Apple());\n        Apple d = Apple.get();\n        Apple.set(d);\n        \n        Holder<? extends Fruit> fruit = Apple; \n        Fruit p = fruit.get();\n        d = (Apple)fruit.get(); \n        try {\n            Orange c = (Orange)fruit.get(); \n        } catch(Exception e) { System.out.println(e); }\n        \n        \n        System.out.println(fruit.equals(d)); \n    }\n} \n```\n\n在 `Holer` 类中，`set()` 方法接受类型参数 `T` 的对象作为参数，`get()` 返回一个 `T` 类型，而 `equals()` 接受一个 `Object` 作为参数。`fruit` 的类型是 `Holder<? extends Fruit>`，所以`set()`方法不会接受任何对象的添加，但是 `equals()` 可以正常工作。\n\n### <a name=\"sp3rse\"></a>下边界限定通配符\n\n通配符的另一个方向是　“超类型的通配符“: `? super T`，`T` 是类型参数的下界。使用这种形式的通配符，我们就可以 ”传递对象” 了。还是用例子解释：\n```\npublic class SuperTypeWildcards {\n    static void writeTo(List<? super Apple> apples) {\n        apples.add(new Apple());\n        apples.add(new Jonathan());\n        \n    }\n}\n```\n\n`writeTo` 方法的参数 `apples` 的类型是 `List<? super Apple>`，它表示某种类型的 List，这个类型是 `Apple` 的基类型。也就是说，我们不知道实际类型是什么，但是这个类型肯定是 `Apple` 的父类型。因此，我们可以知道向这个 List 添加一个 `Apple` 或者其子类型的对象是安全的，这些对象都可以向上转型为 `Apple`。但是我们不知道加入 `Fruit` 对象是否安全，因为那样会使得这个 List 添加跟 `Apple` 无关的类型。\n\n在了解了子类型边界和超类型边界之后，我们就可以知道如何向泛型类型中 “写入” ( 传递对象给方法参数) 以及如何从泛型类型中 “读取” ( 从方法中返回对象 )。下面是一个例子：\n```\npublic class Collections { \n  public static <T> void copy(List<? super T> dest, List<? extends T> src) \n  {\n      for (int i=0; i<src.size(); i++) \n        dest.set(i,src.get(i)); \n  } \n}\n```\n\n`src` 是原始数据的 List，因为要从这里面读取数据，所以用了上边界限定通配符：`<? extends T>`，取出的元素转型为 `T`。`dest` 是要写入的目标 List，所以用了下边界限定通配符：`<? super T>`，可以写入的元素类型是 `T` 及其子类型。\n\n### <a name=\"m7bodm\"></a>无边界通配符\n\n还有一种通配符是无边界通配符，它的使用形式是一个单独的问号：`List<?>`，也就是没有任何限定。不做任何限制，跟不用类型参数的 `List` 有什么区别呢？\n\n`List<?> list` 表示 `list` 是持有某种特定类型的 List，但是不知道具体是哪种类型。那么我们可以向其中添加对象吗？当然不可以，因为并不知道实际是哪种类型，所以不能添加任何类型，这是不安全的。而单独的 `List list` ，也就是没有传入泛型参数，表示这个 list 持有的元素的类型是 `Object`，因此可以添加任何类型的对象，只不过编译器会有警告信息。\n\n## <a name=\"0edkqa\"></a>总结\n\n通配符的使用可以对泛型参数做出某些限制，使代码更安全，对于上边界和下边界限定的通配符总结如下：\n\n* 使用 `List<? extends C> list` 这种形式，表示 list 可以引用一个 `ArrayList` ( 或者其它 List 的 子类 ) 的对象，这个对象包含的元素类型是 `C` 的子类型 ( 包含 `C` 本身）的一种。\n* 使用 `List<? super C> list` 这种形式，表示 list 可以引用一个 `ArrayList` ( 或者其它 List 的 子类 ) 的对象，这个对象包含的元素就类型是 `C` 的超类型 ( 包含 `C` 本身 ) 的一种。\n\n大多数情况下泛型的使用比较简单，但是如果自己编写支持泛型的代码需要对泛型有深入的了解。这几篇文章介绍了泛型的基本用法、类型擦除、泛型数组以及通配符的使用，涵盖了最常用的要点，泛型的总结就写到这里。\n\n__参考__\n\n* Java 编程思想\n\n<strong><em>如果我的文章对您有帮助，不妨点个赞支持一下(</em></strong><strong><em><sup>_</sup></em></strong><strong><em>)</em></strong>\n",
    "body_html": "<a name=\"简介\"></a><h2 id=\"e05dce83\">简介</h2><p><br /></p><p>前两篇文章介绍了泛型的基本用法、类型擦除以及泛型数组。在泛型的使用中，还有个重要的东西叫通配符，本文介绍通配符的使用。</p><p><br /></p><p>这个系列的另外两篇文章：</p><p><br /></p><ul><li><a href=\"https://segmentfault.com/a/1190000005179142\" target=\"_blank\">Java 泛型总结（一）：基本用法与类型擦除</a></li></ul><ul><li><a href=\"https://segmentfault.com/a/1190000005179147\" target=\"_blank\">Java 泛型总结（二）：泛型与数组</a></li></ul><p><br /></p><a name=\"数组的协变\"></a><h2 id=\"06a23496\">数组的协变</h2><p><br /></p><p>在了解通配符之前，先来了解一下数组。Java 中的数组是<strong>协变</strong>的，什么意思？看下面的例子：</p><p><br /></p><pre><code>class Fruit {}\nclass Apple extends Fruit {}\nclass Jonathan extends Apple {}\nclass Orange extends Fruit {}\n\npublic class CovariantArrays {\n    public static void main(String[] args) {       \n        Fruit[] fruit = new Apple[10];\n        fruit[0] = new Apple(); \n        fruit[1] = new Jonathan(); \n        \n        try {\n            \n            fruit[0] = new Fruit(); \n        } catch(Exception e) { System.out.println(e); }\n        try {\n            \n            fruit[0] = new Orange(); \n        } catch(Exception e) { System.out.println(e); }\n        }\n}</code></pre><p><br /></p><p><code>main</code> 方法中的第一行，创建了一个 <code>Apple</code> 数组并把它赋给 <code>Fruit</code> 数组的引用。这是有意义的，<code>Apple</code> 是 <code>Fruit</code> 的子类，一个 <code>Apple</code> 对象也是一种 <code>Fruit</code> 对象，所以一个 <code>Apple</code> 数组也是一种 <code>Fruit</code> 的数组。这称作<strong>数组的协变</strong>，Java 把数组设计为协变的，对此是有争议的，有人认为这是一种缺陷。</p><p><br /></p><p>尽管 <code>Apple[]</code> 可以 “向上转型” 为 <code>Fruit[]</code>，但数组元素的实际类型还是 <code>Apple</code>，我们只能向数组中放入 <code>Apple</code>或者 <code>Apple</code> 的子类。在上面的代码中，向数组中放入了 <code>Fruit</code> 对象和 <code>Orange</code> 对象。对于编译器来说，这是可以通过编译的，但是在运行时期，JVM 能够知道数组的实际类型是 <code>Apple[]</code>，所以当其它对象加入数组的时候就会抛出异常。</p><p><br /></p><p>泛型设计的目的之一是要使这种运行时期的错误在编译期就能发现，看看用泛型容器类来代替数组会发生什么：</p><p><br /></p><pre><code>ArrayList&lt;Fruit&gt; flist = new ArrayList&lt;Apple&gt;();</code></pre><p><br /></p><p>上面的代码根本就无法编译。当涉及到泛型时， 尽管 <code>Apple</code> 是 <code>Fruit</code> 的子类型，但是 <code>ArrayList&lt;Apple&gt;</code> 不是 <code>ArrayList&lt;Fruit&gt;</code> 的子类型，泛型不支持协变。</p><p><br /></p><a name=\"使用通配符\"></a><h2 id=\"eac71cd1\">使用通配符</h2><p><br /></p><p>从上面我们知道，<code>List&lt;Number&gt; list = ArrayList&lt;Integer&gt;</code> 这样的语句是无法通过编译的，尽管 <code>Integer</code> 是 <code>Number</code> 的子类型。那么如果我们确实需要建立这种 “向上转型” 的关系怎么办呢？这就需要通配符来发挥作用了。</p><p><br /></p><a name=\"上边界限定通配符\"></a><h3 id=\"0c428aab\">上边界限定通配符</h3><p><br /></p><p>利用 <code>&lt;? extends Fruit&gt;</code> 形式的通配符，可以实现泛型的向上转型：</p><p><br /></p><pre><code>public class GenericsAndCovariance {\n    public static void main(String[] args) {\n        \n        List&lt;? extends Fruit&gt; flist = new ArrayList&lt;Apple&gt;();\n        \n        \n        \n        \n        flist.add(null); \n        \n        Fruit f = flist.get(0);\n    }\n}</code></pre><p><br /></p><p>上面的例子中， <code>flist</code> 的类型是 <code>List&lt;? extends Fruit&gt;</code>，我们可以把它读作：一个类型的 List， 这个类型可以是继承了 <code>Fruit</code> 的某种类型。注意，<strong>这并不是说这个 List 可以持有</strong> <code>Fruit</code> <strong>的任意类型</strong>。通配符代表了一种特定的类型，它表示 “某种特定的类型，但是 <code>flist</code> 没有指定”。这样不太好理解，具体针对这个例子解释就是，<code>flist</code> 引用可以指向某个类型的 List，只要这个类型继承自 <code>Fruit</code>，可以是 <code>Fruit</code> 或者 <code>Apple</code>，比如例子中的 <code>new ArrayList&lt;Apple&gt;</code>，但是为了向上转型给 <code>flist</code>，<code>flist</code> 并不关心这个具体类型是什么。</p><p><br /></p><p>如上所述，通配符 <code>List&lt;? extends Fruit&gt;</code> 表示某种特定类型 ( <code>Fruit</code> 或者其子类 ) 的 List，但是并不关心这个实际的类型到底是什么，反正是 <code>Fruit</code> 的子类型，<code>Fruit</code> 是它的上边界。那么对这样的一个 List 我们能做什么呢？其实如果我们不知道这个 List 到底持有什么类型，怎么可能安全的添加一个对象呢？在上面的代码中，向 <code>flist</code> 中添加任何对象，无论是 <code>Apple</code> 还是 <code>Orange</code> 甚至是 <code>Fruit</code> 对象，编译器都不允许，唯一可以添加的是 <code>null</code>。所以如果做了泛型的向上转型 (<code>List&lt;? extends Fruit&gt; flist = new ArrayList&lt;Apple&gt;()</code>)，那么我们也就失去了向这个 List 添加任何对象的能力，即使是 <code>Object</code> 也不行。</p><p><br /></p><p>另一方面，如果调用某个返回 <code>Fruit</code> 的方法，这是安全的。因为我们知道，在这个 List 中，不管它实际的类型到底是什么，但肯定能转型为 <code>Fruit</code>，所以编译器允许返回 <code>Fruit</code>。</p><p><br /></p><p>了解了通配符的作用和限制后，好像任何接受参数的方法我们都不能调用了。其实倒也不是，看下面的例子：</p><p><br /></p><pre><code>public class CompilerIntelligence {\n    public static void main(String[] args) {\n        List&lt;? extends Fruit&gt; flist =\n        Arrays.asList(new Apple());\n        Apple a = (Apple)flist.get(0); \n        flist.contains(new Apple()); \n        flist.indexOf(new Apple()); \n        \n        \n\n    }\n}</code></pre><p><br /></p><p>在上面的例子中，<code>flist</code> 的类型是 <code>List&lt;? extends Fruit&gt;</code>，泛型参数使用了受限制的通配符，所以我们失去了向其中加入任何类型对象的例子，最后一行代码无法编译。</p><p><br /></p><p>但是 <code>flist</code> 却可以调用 <code>contains</code> 和 <code>indexOf</code> 方法，它们都接受了一个 <code>Apple</code> 对象做参数。如果查看 <code>ArrayList</code> 的源代码，可以发现 <code>add()</code> 接受一个泛型类型作为参数，但是 <code>contains</code> 和 <code>indexOf</code> 接受一个 <code>Object</code> 类型的参数，下面是它们的方法签名：</p><p><br /></p><pre><code>public boolean add(E e)\npublic boolean contains(Object o)\npublic int indexOf(Object o)</code></pre><p><br /></p><p>所以如果我们指定泛型参数为 <code>&lt;? extends Fruit&gt;</code> 时，<code>add()</code> 方法的参数变为 <code>? extends Fruit</code>，编译器无法判断这个参数接受的到底是 <code>Fruit</code> 的哪种类型，所以它不会接受任何类型。</p><p><br /></p><p>然而，<code>contains</code> 和 <code>indexOf</code> 的类型是 <code>Object</code>，并没有涉及到通配符，所以编译器允许调用这两个方法。这意味着一切取决于泛型类的编写者来决定那些调用是 “安全” 的，并且用 <code>Object</code> 作为这些安全方法的参数。如果某些方法不允许类型参数是通配符时的调用，这些方法的参数应该用类型参数，比如 <code>add(E e)</code>。</p><p><br /></p><p>当我们自己编写泛型类时，上面介绍的就有用了。下面编写一个 <code>Holder</code> 类：</p><p><br /></p><pre><code>public class Holder&lt;T&gt; {\n    private T value;\n    public Holder() {}\n    public Holder(T val) { value = val; }\n    public void set(T val) { value = val; }\n    public T get() { return value; }\n    public boolean equals(Object obj) {\n    return value.equals(obj);\n    }\n    public static void main(String[] args) {\n        Holder&lt;Apple&gt; Apple = new Holder&lt;Apple&gt;(new Apple());\n        Apple d = Apple.get();\n        Apple.set(d);\n        \n        Holder&lt;? extends Fruit&gt; fruit = Apple; \n        Fruit p = fruit.get();\n        d = (Apple)fruit.get(); \n        try {\n            Orange c = (Orange)fruit.get(); \n        } catch(Exception e) { System.out.println(e); }\n        \n        \n        System.out.println(fruit.equals(d)); \n    }\n}</code></pre><p><br /></p><p>在 <code>Holer</code> 类中，<code>set()</code> 方法接受类型参数 <code>T</code> 的对象作为参数，<code>get()</code> 返回一个 <code>T</code> 类型，而 <code>equals()</code> 接受一个 <code>Object</code> 作为参数。<code>fruit</code> 的类型是 <code>Holder&lt;? extends Fruit&gt;</code>，所以<code>set()</code>方法不会接受任何对象的添加，但是 <code>equals()</code> 可以正常工作。</p><p><br /></p><a name=\"下边界限定通配符\"></a><h3 id=\"c2741cb6\">下边界限定通配符</h3><p><br /></p><p>通配符的另一个方向是　“超类型的通配符“: <code>? super T</code>，<code>T</code> 是类型参数的下界。使用这种形式的通配符，我们就可以 ”传递对象” 了。还是用例子解释：</p><p><br /></p><pre><code>public class SuperTypeWildcards {\n    static void writeTo(List&lt;? super Apple&gt; apples) {\n        apples.add(new Apple());\n        apples.add(new Jonathan());\n        \n    }\n}</code></pre><p><br /></p><p><code>writeTo</code> 方法的参数 <code>apples</code> 的类型是 <code>List&lt;? super Apple&gt;</code>，它表示某种类型的 List，这个类型是 <code>Apple</code> 的基类型。也就是说，我们不知道实际类型是什么，但是这个类型肯定是 <code>Apple</code> 的父类型。因此，我们可以知道向这个 List 添加一个 <code>Apple</code> 或者其子类型的对象是安全的，这些对象都可以向上转型为 <code>Apple</code>。但是我们不知道加入 <code>Fruit</code> 对象是否安全，因为那样会使得这个 List 添加跟 <code>Apple</code> 无关的类型。</p><p><br /></p><p>在了解了子类型边界和超类型边界之后，我们就可以知道如何向泛型类型中 “写入” ( 传递对象给方法参数) 以及如何从泛型类型中 “读取” ( 从方法中返回对象 )。下面是一个例子：</p><p><br /></p><pre><code>public class Collections { \n  public static &lt;T&gt; void copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src) \n  {\n      for (int i=0; i&lt;src.size(); i++) \n        dest.set(i,src.get(i)); \n  } \n}</code></pre><p><br /></p><p><code>src</code> 是原始数据的 List，因为要从这里面读取数据，所以用了上边界限定通配符：<code>&lt;? extends T&gt;</code>，取出的元素转型为 <code>T</code>。<code>dest</code> 是要写入的目标 List，所以用了下边界限定通配符：<code>&lt;? super T&gt;</code>，可以写入的元素类型是 <code>T</code> 及其子类型。</p><p><br /></p><a name=\"无边界通配符\"></a><h3 id=\"d3e1a032\">无边界通配符</h3><p><br /></p><p>还有一种通配符是无边界通配符，它的使用形式是一个单独的问号：<code>List&lt;?&gt;</code>，也就是没有任何限定。不做任何限制，跟不用类型参数的 <code>List</code> 有什么区别呢？</p><p><br /></p><p><code>List&lt;?&gt; list</code> 表示 <code>list</code> 是持有某种特定类型的 List，但是不知道具体是哪种类型。那么我们可以向其中添加对象吗？当然不可以，因为并不知道实际是哪种类型，所以不能添加任何类型，这是不安全的。而单独的 <code>List list</code> ，也就是没有传入泛型参数，表示这个 list 持有的元素的类型是 <code>Object</code>，因此可以添加任何类型的对象，只不过编译器会有警告信息。</p><p><br /></p><a name=\"总结\"></a><h2 id=\"25f9c7fa\">总结</h2><p><br /></p><p>通配符的使用可以对泛型参数做出某些限制，使代码更安全，对于上边界和下边界限定的通配符总结如下：</p><p><br /></p><ul><li>使用 <code>List&lt;? extends C&gt; list</code> 这种形式，表示 list 可以引用一个 <code>ArrayList</code> ( 或者其它 List 的 子类 ) 的对象，这个对象包含的元素类型是 <code>C</code> 的子类型 ( 包含 <code>C</code> 本身）的一种。</li></ul><ul><li>使用 <code>List&lt;? super C&gt; list</code> 这种形式，表示 list 可以引用一个 <code>ArrayList</code> ( 或者其它 List 的 子类 ) 的对象，这个对象包含的元素就类型是 <code>C</code> 的超类型 ( 包含 <code>C</code> 本身 ) 的一种。</li></ul><p><br /></p><p>大多数情况下泛型的使用比较简单，但是如果自己编写支持泛型的代码需要对泛型有深入的了解。这几篇文章介绍了泛型的基本用法、类型擦除、泛型数组以及通配符的使用，涵盖了最常用的要点，泛型的总结就写到这里。</p><p><br /></p><p><strong>参考</strong></p><p><br /></p><ul><li>Java 编程思想</li></ul><p><br /></p><p><strong><em>如果我的文章对您有帮助，不妨点个赞支持一下(<sup>_</sup>)</em></strong></p>",
    "body_lake": "<!doctype lake><a name=\"简介\"></a><h2 id=\"e05dce83\">简介</h2><p><br /></p><p>前两篇文章介绍了泛型的基本用法、类型擦除以及泛型数组。在泛型的使用中，还有个重要的东西叫通配符，本文介绍通配符的使用。</p><p><br /></p><p>这个系列的另外两篇文章：</p><p><br /></p><ul><li><a href=\"https://segmentfault.com/a/1190000005179142\" target=\"_blank\">Java 泛型总结（一）：基本用法与类型擦除</a></li></ul><ul><li><a href=\"https://segmentfault.com/a/1190000005179147\" target=\"_blank\">Java 泛型总结（二）：泛型与数组</a></li></ul><p><br /></p><a name=\"数组的协变\"></a><h2 id=\"06a23496\">数组的协变</h2><p><br /></p><p>在了解通配符之前，先来了解一下数组。Java 中的数组是<strong>协变</strong>的，什么意思？看下面的例子：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2258ddbed1%22%2C%22code%22%3A%22class%20Fruit%20%7B%7D%5Cnclass%20Apple%20extends%20Fruit%20%7B%7D%5Cnclass%20Jonathan%20extends%20Apple%20%7B%7D%5Cnclass%20Orange%20extends%20Fruit%20%7B%7D%5Cn%5Cnpublic%20class%20CovariantArrays%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20Fruit%5B%5D%20fruit%20%3D%20new%20Apple%5B10%5D%3B%5Cn%20%20%20%20%20%20%20%20fruit%5B0%5D%20%3D%20new%20Apple()%3B%20%5Cn%20%20%20%20%20%20%20%20fruit%5B1%5D%20%3D%20new%20Jonathan()%3B%20%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%20%20%20%20fruit%5B0%5D%20%3D%20new%20Fruit()%3B%20%5Cn%20%20%20%20%20%20%20%20%7D%20catch(Exception%20e)%20%7B%20System.out.println(e)%3B%20%7D%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%20%20%20%20fruit%5B0%5D%20%3D%20new%20Orange()%3B%20%5Cn%20%20%20%20%20%20%20%20%7D%20catch(Exception%20e)%20%7B%20System.out.println(e)%3B%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p><code>main</code> 方法中的第一行，创建了一个 <code>Apple</code> 数组并把它赋给 <code>Fruit</code> 数组的引用。这是有意义的，<code>Apple</code> 是 <code>Fruit</code> 的子类，一个 <code>Apple</code> 对象也是一种 <code>Fruit</code> 对象，所以一个 <code>Apple</code> 数组也是一种 <code>Fruit</code> 的数组。这称作<strong>数组的协变</strong>，Java 把数组设计为协变的，对此是有争议的，有人认为这是一种缺陷。</p><p><br /></p><p>尽管 <code>Apple[]</code> 可以 “向上转型” 为 <code>Fruit[]</code>，但数组元素的实际类型还是 <code>Apple</code>，我们只能向数组中放入 <code>Apple</code>或者 <code>Apple</code> 的子类。在上面的代码中，向数组中放入了 <code>Fruit</code> 对象和 <code>Orange</code> 对象。对于编译器来说，这是可以通过编译的，但是在运行时期，JVM 能够知道数组的实际类型是 <code>Apple[]</code>，所以当其它对象加入数组的时候就会抛出异常。</p><p><br /></p><p>泛型设计的目的之一是要使这种运行时期的错误在编译期就能发现，看看用泛型容器类来代替数组会发生什么：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f1deed37%22%2C%22code%22%3A%22ArrayList%3CFruit%3E%20flist%20%3D%20new%20ArrayList%3CApple%3E()%3B%22%7D\"></card><p><br /></p><p>上面的代码根本就无法编译。当涉及到泛型时， 尽管 <code>Apple</code> 是 <code>Fruit</code> 的子类型，但是 <code>ArrayList&lt;Apple&gt;</code> 不是 <code>ArrayList&lt;Fruit&gt;</code> 的子类型，泛型不支持协变。</p><p><br /></p><a name=\"使用通配符\"></a><h2 id=\"eac71cd1\">使用通配符</h2><p><br /></p><p>从上面我们知道，<code>List&lt;Number&gt; list = ArrayList&lt;Integer&gt;</code> 这样的语句是无法通过编译的，尽管 <code>Integer</code> 是 <code>Number</code> 的子类型。那么如果我们确实需要建立这种 “向上转型” 的关系怎么办呢？这就需要通配符来发挥作用了。</p><p><br /></p><a name=\"上边界限定通配符\"></a><h3 id=\"0c428aab\">上边界限定通配符</h3><p><br /></p><p>利用 <code>&lt;? extends Fruit&gt;</code> 形式的通配符，可以实现泛型的向上转型：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%229b527038%22%2C%22code%22%3A%22public%20class%20GenericsAndCovariance%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20List%3C%3F%20extends%20Fruit%3E%20flist%20%3D%20new%20ArrayList%3CApple%3E()%3B%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20flist.add(null)%3B%20%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20Fruit%20f%20%3D%20flist.get(0)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>上面的例子中， <code>flist</code> 的类型是 <code>List&lt;? extends Fruit&gt;</code>，我们可以把它读作：一个类型的 List， 这个类型可以是继承了 <code>Fruit</code> 的某种类型。注意，<strong>这并不是说这个 List 可以持有</strong> <code>Fruit</code> <strong>的任意类型</strong>。通配符代表了一种特定的类型，它表示 “某种特定的类型，但是 <code>flist</code> 没有指定”。这样不太好理解，具体针对这个例子解释就是，<code>flist</code> 引用可以指向某个类型的 List，只要这个类型继承自 <code>Fruit</code>，可以是 <code>Fruit</code> 或者 <code>Apple</code>，比如例子中的 <code>new ArrayList&lt;Apple&gt;</code>，但是为了向上转型给 <code>flist</code>，<code>flist</code> 并不关心这个具体类型是什么。</p><p><br /></p><p>如上所述，通配符 <code>List&lt;? extends Fruit&gt;</code> 表示某种特定类型 ( <code>Fruit</code> 或者其子类 ) 的 List，但是并不关心这个实际的类型到底是什么，反正是 <code>Fruit</code> 的子类型，<code>Fruit</code> 是它的上边界。那么对这样的一个 List 我们能做什么呢？其实如果我们不知道这个 List 到底持有什么类型，怎么可能安全的添加一个对象呢？在上面的代码中，向 <code>flist</code> 中添加任何对象，无论是 <code>Apple</code> 还是 <code>Orange</code> 甚至是 <code>Fruit</code> 对象，编译器都不允许，唯一可以添加的是 <code>null</code>。所以如果做了泛型的向上转型 (<code>List&lt;? extends Fruit&gt; flist = new ArrayList&lt;Apple&gt;()</code>)，那么我们也就失去了向这个 List 添加任何对象的能力，即使是 <code>Object</code> 也不行。</p><p><br /></p><p>另一方面，如果调用某个返回 <code>Fruit</code> 的方法，这是安全的。因为我们知道，在这个 List 中，不管它实际的类型到底是什么，但肯定能转型为 <code>Fruit</code>，所以编译器允许返回 <code>Fruit</code>。</p><p><br /></p><p>了解了通配符的作用和限制后，好像任何接受参数的方法我们都不能调用了。其实倒也不是，看下面的例子：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22490d44e5%22%2C%22code%22%3A%22public%20class%20CompilerIntelligence%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20List%3C%3F%20extends%20Fruit%3E%20flist%20%3D%5Cn%20%20%20%20%20%20%20%20Arrays.asList(new%20Apple())%3B%5Cn%20%20%20%20%20%20%20%20Apple%20a%20%3D%20(Apple)flist.get(0)%3B%20%5Cn%20%20%20%20%20%20%20%20flist.contains(new%20Apple())%3B%20%5Cn%20%20%20%20%20%20%20%20flist.indexOf(new%20Apple())%3B%20%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>在上面的例子中，<code>flist</code> 的类型是 <code>List&lt;? extends Fruit&gt;</code>，泛型参数使用了受限制的通配符，所以我们失去了向其中加入任何类型对象的例子，最后一行代码无法编译。</p><p><br /></p><p>但是 <code>flist</code> 却可以调用 <code>contains</code> 和 <code>indexOf</code> 方法，它们都接受了一个 <code>Apple</code> 对象做参数。如果查看 <code>ArrayList</code> 的源代码，可以发现 <code>add()</code> 接受一个泛型类型作为参数，但是 <code>contains</code> 和 <code>indexOf</code> 接受一个 <code>Object</code> 类型的参数，下面是它们的方法签名：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%228e2fa346%22%2C%22code%22%3A%22public%20boolean%20add(E%20e)%5Cnpublic%20boolean%20contains(Object%20o)%5Cnpublic%20int%20indexOf(Object%20o)%22%7D\"></card><p><br /></p><p>所以如果我们指定泛型参数为 <code>&lt;? extends Fruit&gt;</code> 时，<code>add()</code> 方法的参数变为 <code>? extends Fruit</code>，编译器无法判断这个参数接受的到底是 <code>Fruit</code> 的哪种类型，所以它不会接受任何类型。</p><p><br /></p><p>然而，<code>contains</code> 和 <code>indexOf</code> 的类型是 <code>Object</code>，并没有涉及到通配符，所以编译器允许调用这两个方法。这意味着一切取决于泛型类的编写者来决定那些调用是 “安全” 的，并且用 <code>Object</code> 作为这些安全方法的参数。如果某些方法不允许类型参数是通配符时的调用，这些方法的参数应该用类型参数，比如 <code>add(E e)</code>。</p><p><br /></p><p>当我们自己编写泛型类时，上面介绍的就有用了。下面编写一个 <code>Holder</code> 类：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22096beec2%22%2C%22code%22%3A%22public%20class%20Holder%3CT%3E%20%7B%5Cn%20%20%20%20private%20T%20value%3B%5Cn%20%20%20%20public%20Holder()%20%7B%7D%5Cn%20%20%20%20public%20Holder(T%20val)%20%7B%20value%20%3D%20val%3B%20%7D%5Cn%20%20%20%20public%20void%20set(T%20val)%20%7B%20value%20%3D%20val%3B%20%7D%5Cn%20%20%20%20public%20T%20get()%20%7B%20return%20value%3B%20%7D%5Cn%20%20%20%20public%20boolean%20equals(Object%20obj)%20%7B%5Cn%20%20%20%20return%20value.equals(obj)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20Holder%3CApple%3E%20Apple%20%3D%20new%20Holder%3CApple%3E(new%20Apple())%3B%5Cn%20%20%20%20%20%20%20%20Apple%20d%20%3D%20Apple.get()%3B%5Cn%20%20%20%20%20%20%20%20Apple.set(d)%3B%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20Holder%3C%3F%20extends%20Fruit%3E%20fruit%20%3D%20Apple%3B%20%5Cn%20%20%20%20%20%20%20%20Fruit%20p%20%3D%20fruit.get()%3B%5Cn%20%20%20%20%20%20%20%20d%20%3D%20(Apple)fruit.get()%3B%20%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Orange%20c%20%3D%20(Orange)fruit.get()%3B%20%5Cn%20%20%20%20%20%20%20%20%7D%20catch(Exception%20e)%20%7B%20System.out.println(e)%3B%20%7D%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20System.out.println(fruit.equals(d))%3B%20%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>在 <code>Holer</code> 类中，<code>set()</code> 方法接受类型参数 <code>T</code> 的对象作为参数，<code>get()</code> 返回一个 <code>T</code> 类型，而 <code>equals()</code> 接受一个 <code>Object</code> 作为参数。<code>fruit</code> 的类型是 <code>Holder&lt;? extends Fruit&gt;</code>，所以<code>set()</code>方法不会接受任何对象的添加，但是 <code>equals()</code> 可以正常工作。</p><p><br /></p><a name=\"下边界限定通配符\"></a><h3 id=\"c2741cb6\">下边界限定通配符</h3><p><br /></p><p>通配符的另一个方向是　“超类型的通配符“: <code>? super T</code>，<code>T</code> 是类型参数的下界。使用这种形式的通配符，我们就可以 ”传递对象” 了。还是用例子解释：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%226a662ae3%22%2C%22code%22%3A%22public%20class%20SuperTypeWildcards%20%7B%5Cn%20%20%20%20static%20void%20writeTo(List%3C%3F%20super%20Apple%3E%20apples)%20%7B%5Cn%20%20%20%20%20%20%20%20apples.add(new%20Apple())%3B%5Cn%20%20%20%20%20%20%20%20apples.add(new%20Jonathan())%3B%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p><code>writeTo</code> 方法的参数 <code>apples</code> 的类型是 <code>List&lt;? super Apple&gt;</code>，它表示某种类型的 List，这个类型是 <code>Apple</code> 的基类型。也就是说，我们不知道实际类型是什么，但是这个类型肯定是 <code>Apple</code> 的父类型。因此，我们可以知道向这个 List 添加一个 <code>Apple</code> 或者其子类型的对象是安全的，这些对象都可以向上转型为 <code>Apple</code>。但是我们不知道加入 <code>Fruit</code> 对象是否安全，因为那样会使得这个 List 添加跟 <code>Apple</code> 无关的类型。</p><p><br /></p><p>在了解了子类型边界和超类型边界之后，我们就可以知道如何向泛型类型中 “写入” ( 传递对象给方法参数) 以及如何从泛型类型中 “读取” ( 从方法中返回对象 )。下面是一个例子：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%224f85a463%22%2C%22code%22%3A%22public%20class%20Collections%20%7B%20%5Cn%20%20public%20static%20%3CT%3E%20void%20copy(List%3C%3F%20super%20T%3E%20dest%2C%20List%3C%3F%20extends%20T%3E%20src)%20%5Cn%20%20%7B%5Cn%20%20%20%20%20%20for%20(int%20i%3D0%3B%20i%3Csrc.size()%3B%20i%2B%2B)%20%5Cn%20%20%20%20%20%20%20%20dest.set(i%2Csrc.get(i))%3B%20%5Cn%20%20%7D%20%5Cn%7D%22%7D\"></card><p><br /></p><p><code>src</code> 是原始数据的 List，因为要从这里面读取数据，所以用了上边界限定通配符：<code>&lt;? extends T&gt;</code>，取出的元素转型为 <code>T</code>。<code>dest</code> 是要写入的目标 List，所以用了下边界限定通配符：<code>&lt;? super T&gt;</code>，可以写入的元素类型是 <code>T</code> 及其子类型。</p><p><br /></p><a name=\"无边界通配符\"></a><h3 id=\"d3e1a032\">无边界通配符</h3><p><br /></p><p>还有一种通配符是无边界通配符，它的使用形式是一个单独的问号：<code>List&lt;?&gt;</code>，也就是没有任何限定。不做任何限制，跟不用类型参数的 <code>List</code> 有什么区别呢？</p><p><br /></p><p><code>List&lt;?&gt; list</code> 表示 <code>list</code> 是持有某种特定类型的 List，但是不知道具体是哪种类型。那么我们可以向其中添加对象吗？当然不可以，因为并不知道实际是哪种类型，所以不能添加任何类型，这是不安全的。而单独的 <code>List list</code> ，也就是没有传入泛型参数，表示这个 list 持有的元素的类型是 <code>Object</code>，因此可以添加任何类型的对象，只不过编译器会有警告信息。</p><p><br /></p><a name=\"总结\"></a><h2 id=\"25f9c7fa\">总结</h2><p><br /></p><p>通配符的使用可以对泛型参数做出某些限制，使代码更安全，对于上边界和下边界限定的通配符总结如下：</p><p><br /></p><ul><li>使用 <code>List&lt;? extends C&gt; list</code> 这种形式，表示 list 可以引用一个 <code>ArrayList</code> ( 或者其它 List 的 子类 ) 的对象，这个对象包含的元素类型是 <code>C</code> 的子类型 ( 包含 <code>C</code> 本身）的一种。</li></ul><ul><li>使用 <code>List&lt;? super C&gt; list</code> 这种形式，表示 list 可以引用一个 <code>ArrayList</code> ( 或者其它 List 的 子类 ) 的对象，这个对象包含的元素就类型是 <code>C</code> 的超类型 ( 包含 <code>C</code> 本身 ) 的一种。</li></ul><p><br /></p><p>大多数情况下泛型的使用比较简单，但是如果自己编写支持泛型的代码需要对泛型有深入的了解。这几篇文章介绍了泛型的基本用法、类型擦除、泛型数组以及通配符的使用，涵盖了最常用的要点，泛型的总结就写到这里。</p><p><br /></p><p><strong>参考</strong></p><p><br /></p><ul><li>Java 编程思想</li></ul><p><br /></p><p><strong><em>如果我的文章对您有帮助，不妨点个赞支持一下(<sup>_</sup>)</em></strong></p>",
    "public": 1,
    "status": 0,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T05:43:15.000Z",
    "deleted_at": null,
    "created_at": "2019-01-22T04:57:08.000Z",
    "updated_at": "2019-01-22T05:43:29.000Z",
    "published_at": "2019-01-22T04:57:08.000Z",
    "first_published_at": null,
    "word_count": 2642,
    "cover": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548135803103-3426b8e3-1697-4fed-81af-8357e6093ff3.png",
    "description": "简介 前两篇文章介绍了泛型的基本用法、类型擦除以及泛型数组。在泛型的使用中，还有个重要的东西叫通配符，本文介绍通配符的使用。 这个系列的另外两篇文章：  Java 泛型总结（一）：基本用法与类型擦除 Java 泛型总结（二）：泛型与数组   数组的协变 在了解通配符之前，先来了解一下数组。Ja...",
    "custom_description": "简介前两篇文章介绍了泛型的基本用法、类型擦除以及泛型数组。在泛型的使用中，还有个重要的东西叫通配符，本文介绍通配符的使用。这个系列的另外两篇文章：Java 泛型总结（一）：基本用法与类型擦除Java 泛型总结（二）：泛型与数组数组的协变在了解通配符之前，先来了解一下数组。Java 中的数组是协...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1171704,
    "slug": "8418769b-810a-b925-dd17-87d77448d6a9",
    "title": "Java 泛型总结（一）：基本用法与类型擦除 - Coding - SegmentFault 思否",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"y1fsyh\"></a>\n## [](#y1fsyh)简介\nJava 在 1.5 引入了泛型机制，泛型本质是参数化类型，也就是说变量的类型是一个参数，在使用时再指定为具体类型。泛型可以用于类、接口、方法，通过使用泛型可以使代码更简单、安全。然而 Java 中的泛型使用了类型擦除，所以只是伪泛型。这篇文章对泛型的使用以及存在的问题做个总结，主要参考自 《Java 编程思想》。\n\n这个系列的另外两篇文章：\n\n- [Java 泛型总结（二）：泛型与数组](https://segmentfault.com/a/1190000005179147)\n\n- [Java 泛型总结（三）：通配符的使用](https://segmentfault.com/a/1190000005337789)\n\n\n<a name=\"rp66wu\"></a>\n## [](#rp66wu)基本用法\n<a name=\"3kpkow\"></a>\n### [](#3kpkow)泛型类\n\n如果有一个类 `Holder` 用于包装一个变量，这个变量的类型可能是任意的，怎么编写 `Holder` 呢？在没有泛型之前可以这样：\n```java\npublic class Holder1 {\n    private Object a;\n\n    public Holder1(Object a) {\n        this.a = a;\n    }\n\n    public void set(Object a) {\n        this.a = a;\n    }\n    public Object get(){\n        return a;\n    }\n\n    public static void main(String[] args) {\n        Holder1 holder1 = new Holder1(\"not Generic\");\n        String s = (String) holder1.get();\n        holder1.set(1);\n        Integer x = (Integer) holder1.get();\n    }\n}j\n```\n\n在 `Holder1` 中，有一个用 `Object` 引用的变量。因为任何类型都可以向上转型为 `Object`，所以这个 `Holder` 可以接受任何类型。在取出的时候 `Holder` 只知道它保存的是一个 `Object` 对象，所以要强制转换为对应的类型。在 `main` 方法中， `holder1` 先是保存了一个字符串，也就是 `String` 对象，接着又变为保存一个 `Integer` 对象(参数 `1` 会自动装箱)。从 `Holder` 中取出变量时强制转换已经比较麻烦，这里还要记住不同的类型，要是转错了就会出现运行时异常。\n\n下面看看 `Holder` 的泛型版本：\n```java\npublic class Holder2<T> {\n\n    private T a;\n    public Holder2(T a) {\n        this.a = a;\n    }\n\n    public T get() {\n        return a;\n    }\n\n    public void set(T a) {\n        this.a = a;\n    }\n\n    public static void main(String[] args) {\n        Holder2<String> holder2 = new Holder2<>(\"Generic\");\n        String s = holder2.get();\n\n        holder2.set(\"test\");\n        holder2.set(1); // 编译不通过\n\n    }\n}\n```\n\n在 `Holder2` 中， 变量 `a` 是一个参数化类型 `T`，T`` 只是一个标识，用其它字母也是可以的。创建 `Holder2` 对象的时候，在尖括号中传入了参数 `T` 的类型，那么在这个对象中，所有出现 `T` 的地方相当于都用 `String` 替换了。现在的 `get` 的取出来的不是 `Object` ，而是 `String` 对象，因此不需要类型转换。另外，当调用 `set` 时，只能传入 `String` 类型，否则编译无法通过。这就保证了 `holder2` 中的类型安全，避免由于不小心传入错误的类型。\n\n通过上面的例子可以看出泛使得代码更简便、安全。引入泛型之后，Java 库的一些类，比如常用的容器类也被改写为支持泛型，我们使用的时候都会传入参数类型，如：`ArrayList<Integer> list = ArrayList<>();`。\n\n<a name=\"1fk2uo\"></a>\n### [](#1fk2uo)泛型方法\n泛型不仅可以针对类，还可以单独使某个方法是泛型的，举个例子：\n```java\npublic class GenericMethod {\n    // 如果在参数中使用了泛型，那么在函数的签名上要用尖括号表现出泛型\n    public <K,V> void f(K k,V v) {\n        System.out.println(k.getClass().getSimpleName());\n        System.out.println(v.getClass().getSimpleName());\n    }\n\n    public static void main(String[] args) {\n        GenericMethod gm = new GenericMethod();\n        gm.f(new Integer(0),new String(\"generic\"));\n    }\n}\n\n代码输出：\n    Integer\n    String\n```\n\n`GenericMethod` 类本身不是泛型的，创建它的对象的时候不需要传入泛型参数，但是它的方法 `f` 是泛型方法。在返回类型之前是它的参数标识 `<K,V>`，注意这里有两个泛型参数，所以泛型参数可以有多个。\n\n调用泛型方法时可以不显式传入泛型参数，上面的调用就没有。这是因为编译器会使用参数类型推断，根据传入的实参的类型 (这里是 `integer` 和 `String`) 推断出 `K` 和 `V` 的类型。\n\n<a name=\"ffqotm\"></a>\n## [](#ffqotm)类型擦除\n<a name=\"e4r1ku\"></a>\n### [](#e4r1ku)什么是类型擦除\nJava 的泛型使用了类型擦除机制，这个引来了很大的争议，以至于 Java 的泛型功能受到限制，只能说是”伪泛型“。什么叫类型擦除呢？简单的说就是，类型参数只存在于编译期，在运行时，Java 的虚拟机 ( JVM ) 并不知道泛型的存在。先看个例子：\n```java\npublic class ErasedTypeEquivalence {\n    public static void main(String[] args) {\n        Class c1 = new ArrayList<String>().getClass();\n        Class c2 = new ArrayList<Integer>().getClass();\n        System.out.println(c1 == c2);\n    }\n}\n```\n\n上面的代码有两个不同的 `ArrayList`：`ArrayList<Integer>` 和 `ArrayList<String>`。在我们看来它们的参数化类型不同，一个保存整性，一个保存字符串。但是通过比较它们的 `Class` 对象，上面的代码输出是 `true`。这说明在 JVM 看来它们是同一个类。而在 C++、C# 这些支持真泛型的语言中，它们就是不同的类。\n\n泛型参数会擦除到它的第一个边界，比如说上面的 `Holder2` 类，参数类型是一个单独的 `T`，那么就擦除到 `Object`,相当于所有出现 `T` 的地方都用 `Object` 替换。所以在 JVM 看来，保存的变量 `a` 还是 `Object` 类型。之所以取出来自动就是我们传入的参数类型，这是因为编译器在编译生成的字节码文件中插入了类型转换的代码，不需要我们手动转型了。如果参数类型有边界那么就擦除到它的第一个边界，这个下一节再说。<br />简而言之：在代码层面，虽有泛型的存在，但是在运行时候的jvm层面却感受不到泛型的存在\n\n<a name=\"gkovvz\"></a>\n### [](#gkovvz)擦除带来的问题\n擦除会出现一些问题，下面是一个例子：\n```java\nclass HasF {\n    public void f() {\n        System.out.println(\"HasF.f()\");\n    }\n}\npublic class Manipulator<T> {\n    private T obj;\n\n    public Manipulator(T obj) {\n        this.obj = obj;\n    }\n\n    public void manipulate() {\n        obj.f(); \n    }\n\n    public static void main(String[] args) {\n        HasF hasF  = new HasF();\n        Manipulator<HasF> manipulator = new Manipulator<>(hasF);\n        manipulator.manipulate();\n    }\n}\n```\n\n上面的 `Manipulator` 是一个泛型类，内部用一个泛型化的变量 `obj`，在 `manipulate` 方法中，调用了 `obj` 的方法 `f()`，但是这行代码无法编译。因为类型擦除，编译器不确定 `obj` 是否有 `f()` 方法。解决这个问题的方法是给 `T` 一个边界:\n\n```java\nclass Manipulator2<T extends HasF> {\n    private T obj;\n    public Manipulator2(T x) { obj = x; }\n    public void manipulate() { obj.f(); }\n}\n```\n\n现在 `T` 的类型是 `<T extends HasF>`，这表示 T`` 必须是 HasF`` 或者 HasF`` 的导出类型。这样，调用 `f()` 方法才安全。`HasF` 就是 `T` 的边界，因此通过类型擦除后，所有出现 `T` 的<br />地方都用 `HasF` 替换。这样编译器就知道 `obj` 是有方法 `f()` 的。\n\n但是这样就抵消了泛型带来的好处，上面的类完全可以改成这样：\n```java\nclass Manipulator3 {\n    private HasF obj;\n    public Manipulator3(HasF x) { obj = x; }\n    public void manipulate() { obj.f(); }\n}\n```\n\n所以泛型只有在比较复杂的类中才体现出作用。但是像 `<T extends HasF>` 这种形式的东西不是完全没有意义的。如果类中有一个返回 `T` 类型的方法，泛型就有用了，因为这样会返回准确类型。比如下面的例子：\n\n```java\nclass ReturnGenericType<T extends HasF> {\n    private T obj;\n    public ReturnGenericType(T x) { obj = x; }\n    public T get() { return obj; }\n}\n```\n\n这里的 `get()` 方法返回的是泛型参数的准确类型，而不是 `HasF`。\n\n<a name=\"i1rmga\"></a>\n### [](#i1rmga)类型擦除的补偿\n类型擦除导致泛型丧失了一些功能，任何在运行期需要知道确切类型的代码都无法工作。比如下面的例子：\n```java\npublic class Erased<T> {\n    private final int SIZE = 100;\n    public static void f(Object arg) {\n        if(arg instanceof T) {} \n        T var = new T(); \n        T[] array = new T[SIZE]; \n        T[] array = (T)new Object[SIZE]; \n    }\n}\n```\n\n通过 `new T()` 创建对象是不行的，一是由于类型擦除，二是由于编译器不知道 `T` 是否有默认的构造器。一种解决的办法是传递一个工厂对象并且通过它创建新的实例。\n```java\ninterface FactoryI<T> {\n    T create();\n}\nclass Foo2<T> {\n    private T x;\n    public <F extends FactoryI<T>> Foo2(F factory) {\n        x = factory.create();\n    }\n}\nclass IntegerFactory implements FactoryI<Integer> {\n    public Integer create() {\n        return new Integer(0);\n    }\n}\nclass Widget {\n    public static class Factory implements FactoryI<Widget> {\n        public Widget create() {\n            return new Widget();\n        }\n    }\n}\npublic class FactoryConstraint {\n    public static void main(String[] args) {\n        new Foo2<Integer>(new IntegerFactory());\n        new Foo2<Widget>(new Widget.Factory());\n    }\n}\n```\n\n另一种解决的方法是利用模板设计模式：\n```java\nabstract class GenericWithCreate<T> {\n    final T element;\n    GenericWithCreate() { element = create(); }\n    abstract T create();\n}\nclass X {}\nclass Creator extends GenericWithCreate<X> {\n    X create() { return new X(); }\n    void f() {\n        System.out.println(element.getClass().getSimpleName());\n    }\n}\npublic class CreatorGeneric {\n    public static void main(String[] args) {\n        Creator c = new Creator();\n        c.f();\n    }\n}\n```\n\n具体类型的创建放到了子类继承父类时，在 `create` 方法中创建实际的类型并返回。\n\n<a name=\"elwdex\"></a>\n## [](#elwdex)总结\n\n本文介绍了 Java 泛型的使用，以及类型擦除相关的问题。一般情况下泛型的使用比较简单，但是某些情况下，尤其是自己编写使用泛型的类或者方法时要注意类型擦除的问题。接下来会介绍数组与泛型的关系以及通配符的使用，有兴趣的读者可进入下一篇：[Java 泛型总结（二）：泛型与数组](https://segmentfault.com/a/1190000005179147)。\n\n**参考**\n\n- Java 编程思想\n\n\n**_如果我的文章对您有帮助，不妨点个赞支持一下(____)_**\n",
    "body_draft": "## <a name=\"y1fsyh\"></a>简介\nJava 在 1.5 引入了泛型机制，泛型本质是参数化类型，也就是说变量的类型是一个参数，在使用时再指定为具体类型。泛型可以用于类、接口、方法，通过使用泛型可以使代码更简单、安全。然而 Java 中的泛型使用了类型擦除，所以只是伪泛型。这篇文章对泛型的使用以及存在的问题做个总结，主要参考自 《Java 编程思想》。\n\n这个系列的另外两篇文章：\n\n* [Java 泛型总结（二）：泛型与数组](https://segmentfault.com/a/1190000005179147)\n* [Java 泛型总结（三）：通配符的使用](https://segmentfault.com/a/1190000005337789)\n\n## <a name=\"rp66wu\"></a>基本用法\n### <a name=\"3kpkow\"></a>泛型类\n\n如果有一个类 `Holder` 用于包装一个变量，这个变量的类型可能是任意的，怎么编写 `Holder` 呢？在没有泛型之前可以这样：\n```java\npublic class Holder1 {\n    private Object a;\n\n    public Holder1(Object a) {\n        this.a = a;\n    }\n\n    public void set(Object a) {\n        this.a = a;\n    }\n    public Object get(){\n        return a;\n    }\n\n    public static void main(String[] args) {\n        Holder1 holder1 = new Holder1(\"not Generic\");\n        String s = (String) holder1.get();\n        holder1.set(1);\n        Integer x = (Integer) holder1.get();\n    }\n}j\n```\n\n在 `Holder1` 中，有一个用 `Object` 引用的变量。因为任何类型都可以向上转型为 `Object`，所以这个 `Holder` 可以接受任何类型。在取出的时候 `Holder` 只知道它保存的是一个 `Object` 对象，所以要强制转换为对应的类型。在 `main` 方法中， `holder1` 先是保存了一个字符串，也就是 `String` 对象，接着又变为保存一个 `Integer` 对象(参数 `1` 会自动装箱)。从 `Holder` 中取出变量时强制转换已经比较麻烦，这里还要记住不同的类型，要是转错了就会出现运行时异常。\n\n下面看看 `Holder` 的泛型版本：\n```java\npublic class Holder2<T> {\n\n    private T a;\n    public Holder2(T a) {\n        this.a = a;\n    }\n\n    public T get() {\n        return a;\n    }\n\n    public void set(T a) {\n        this.a = a;\n    }\n\n    public static void main(String[] args) {\n        Holder2<String> holder2 = new Holder2<>(\"Generic\");\n        String s = holder2.get();\n\n        holder2.set(\"test\");\n        holder2.set(1); // 编译不通过\n\n    }\n}\n```\n\n在 `Holder2` 中， 变量 `a` 是一个参数化类型 `T`，<code><span data-type=\"color\" style=\"color:#F5222D\">T</span></code><span data-type=\"color\" style=\"color:#F5222D\"> 只是一个标识，用其它字母也是可以的</span>。创建 `Holder2` 对象的时候，在尖括号中传入了参数 `T` 的类型，那么在这个对象中，所有出现 `T` 的地方相当于都用 `String` 替换了。现在的 `get` 的取出来的不是 `Object` ，而是 `String` 对象，因此不需要类型转换。另外，当调用 `set` 时，只能传入 `String` 类型，否则编译无法通过。这就保证了 `holder2` 中的类型安全，避免由于不小心传入错误的类型。\n\n通过上面的例子可以看出泛使得代码更简便、安全。引入泛型之后，Java 库的一些类，比如常用的容器类也被改写为支持泛型，我们使用的时候都会传入参数类型，如：`ArrayList<Integer> list = ArrayList<>();`。\n\n### <a name=\"1fk2uo\"></a>泛型方法\n泛型不仅可以针对类，还可以单独使某个方法是泛型的，举个例子：\n```java\npublic class GenericMethod {\n    // 如果在参数中使用了泛型，那么在函数的签名上要用尖括号表现出泛型\n    public <K,V> void f(K k,V v) {\n        System.out.println(k.getClass().getSimpleName());\n        System.out.println(v.getClass().getSimpleName());\n    }\n\n    public static void main(String[] args) {\n        GenericMethod gm = new GenericMethod();\n        gm.f(new Integer(0),new String(\"generic\"));\n    }\n}\n\n代码输出：\n    Integer\n    String\n```\n\n`GenericMethod` 类本身不是泛型的，创建它的对象的时候不需要传入泛型参数，但是它的方法 `f` 是泛型方法。在返回类型之前是它的参数标识 `<K,V>`，注意这里有两个泛型参数，所以泛型参数可以有多个。\n\n调用泛型方法时可以不显式传入泛型参数，上面的调用就没有。这是因为编译器会使用参数类型推断，根据传入的实参的类型 (这里是 `integer` 和 `String`) 推断出 `K` 和 `V` 的类型。\n\n## <a name=\"ffqotm\"></a>类型擦除\n### <a name=\"e4r1ku\"></a>什么是类型擦除\nJava 的泛型使用了类型擦除机制，<span data-type=\"color\" style=\"color:#F5222D\">这个引来了很大的争议，以至于 Java 的泛型功能受到限制，只能说是”伪泛型“</span>。什么叫类型擦除呢？简单的说就是，类型参数只存在于编译期，在运行时，Java 的虚拟机 ( JVM ) 并不知道泛型的存在。先看个例子：\n```java\npublic class ErasedTypeEquivalence {\n    public static void main(String[] args) {\n        Class c1 = new ArrayList<String>().getClass();\n        Class c2 = new ArrayList<Integer>().getClass();\n        System.out.println(c1 == c2);\n    }\n}\n```\n\n上面的代码有两个不同的 `ArrayList`：`ArrayList<Integer>` 和 `ArrayList<String>`。在我们看来它们的参数化类型不同，一个保存整性，一个保存字符串。但是通过比较它们的 `Class` 对象，上面的代码输出是 `true`。这说明在 JVM 看来它们是同一个类。<span data-type=\"color\" style=\"color:#F5222D\">而在 C++、C# 这些支持真泛型的语言中，它们就是不同的类</span>。\n\n泛型参数会擦除到它的第一个边界，比如说上面的 `Holder2` 类，参数类型是一个单独的 `T`，那么就擦除到 `Object`,相当于所有出现 `T` 的地方都用 `Object` 替换。所以在 JVM 看来，保存的变量 `a` 还是 `Object` 类型。之所以取出来自动就是我们传入的参数类型，这是因为编译器在编译生成的字节码文件中插入了类型转换的代码，不需要我们手动转型了。<span data-type=\"color\" style=\"color:#F5222D\">如果参数类型有边界那么就擦除到它的第一个边界</span>，这个下一节再说。\n<span data-type=\"color\" style=\"color:#F5222D\">简而言之：在代码层面，虽有泛型的存在，但是在运行时候的jvm层面却感受不到泛型的存在</span>\n\n### <a name=\"gkovvz\"></a>擦除带来的问题\n擦除会出现一些问题，下面是一个例子：\n```java\nclass HasF {\n    public void f() {\n        System.out.println(\"HasF.f()\");\n    }\n}\npublic class Manipulator<T> {\n    private T obj;\n\n    public Manipulator(T obj) {\n        this.obj = obj;\n    }\n\n    public void manipulate() {\n        obj.f(); \n    }\n\n    public static void main(String[] args) {\n        HasF hasF  = new HasF();\n        Manipulator<HasF> manipulator = new Manipulator<>(hasF);\n        manipulator.manipulate();\n    }\n}\n```\n\n上面的 `Manipulator` 是一个泛型类，内部用一个泛型化的变量 `obj`，在 `manipulate` 方法中，调用了 `obj` 的方法 `f()`，但是这行代码无法编译。因为类型擦除，编译器不确定 `obj` 是否有 `f()` 方法。解决这个问题的方法是给 `T` 一个边界:\n\n```java\nclass Manipulator2<T extends HasF> {\n    private T obj;\n    public Manipulator2(T x) { obj = x; }\n    public void manipulate() { obj.f(); }\n}\n```\n\n现在 `T` 的类型是 `<T extends HasF>`，<span data-type=\"color\" style=\"color:#F5222D\">这表示 </span><code><span data-type=\"color\" style=\"color:#F5222D\">T</span></code><span data-type=\"color\" style=\"color:#F5222D\"> 必须是 </span><code><span data-type=\"color\" style=\"color:#F5222D\">HasF</span></code><span data-type=\"color\" style=\"color:#F5222D\"> 或者 </span><code><span data-type=\"color\" style=\"color:#F5222D\">HasF</span></code><span data-type=\"color\" style=\"color:#F5222D\"> 的导出类型</span>。这样，调用 `f()` 方法才安全。`HasF` 就是 `T` 的边界，因此通过类型擦除后，所有出现 `T` 的\n地方都用 `HasF` 替换。这样编译器就知道 `obj` 是有方法 `f()` 的。\n\n但是这样就抵消了泛型带来的好处，上面的类完全可以改成这样：\n```java\nclass Manipulator3 {\n    private HasF obj;\n    public Manipulator3(HasF x) { obj = x; }\n    public void manipulate() { obj.f(); }\n}\n```\n\n所以泛型只有在比较复杂的类中才体现出作用。但是像 `<T extends HasF>` 这种形式的东西不是完全没有意义的。如果类中有一个返回 `T` 类型的方法，泛型就有用了，因为这样会返回准确类型。比如下面的例子：\n\n```java\nclass ReturnGenericType<T extends HasF> {\n    private T obj;\n    public ReturnGenericType(T x) { obj = x; }\n    public T get() { return obj; }\n}\n```\n\n这里的 `get()` 方法返回的是泛型参数的准确类型，而不是 `HasF`。\n\n### <a name=\"i1rmga\"></a>类型擦除的补偿\n类型擦除导致泛型丧失了一些功能，任何在运行期需要知道确切类型的代码都无法工作。比如下面的例子：\n```java\npublic class Erased<T> {\n    private final int SIZE = 100;\n    public static void f(Object arg) {\n        if(arg instanceof T) {} \n        T var = new T(); \n        T[] array = new T[SIZE]; \n        T[] array = (T)new Object[SIZE]; \n    }\n}\n```\n\n通过 `new T()` 创建对象是不行的，一是由于类型擦除，二是由于编译器不知道 `T` 是否有默认的构造器。一种解决的办法是传递一个工厂对象并且通过它创建新的实例。\n```java\ninterface FactoryI<T> {\n    T create();\n}\nclass Foo2<T> {\n    private T x;\n    public <F extends FactoryI<T>> Foo2(F factory) {\n        x = factory.create();\n    }\n}\nclass IntegerFactory implements FactoryI<Integer> {\n    public Integer create() {\n        return new Integer(0);\n    }\n}\nclass Widget {\n    public static class Factory implements FactoryI<Widget> {\n        public Widget create() {\n            return new Widget();\n        }\n    }\n}\npublic class FactoryConstraint {\n    public static void main(String[] args) {\n        new Foo2<Integer>(new IntegerFactory());\n        new Foo2<Widget>(new Widget.Factory());\n    }\n}\n```\n\n另一种解决的方法是利用模板设计模式：\n```java\nabstract class GenericWithCreate<T> {\n    final T element;\n    GenericWithCreate() { element = create(); }\n    abstract T create();\n}\nclass X {}\nclass Creator extends GenericWithCreate<X> {\n    X create() { return new X(); }\n    void f() {\n        System.out.println(element.getClass().getSimpleName());\n    }\n}\npublic class CreatorGeneric {\n    public static void main(String[] args) {\n        Creator c = new Creator();\n        c.f();\n    }\n}\n```\n\n具体类型的创建放到了子类继承父类时，在 `create` 方法中创建实际的类型并返回。\n\n## <a name=\"elwdex\"></a>总结\n\n本文介绍了 Java 泛型的使用，以及类型擦除相关的问题。一般情况下泛型的使用比较简单，但是某些情况下，尤其是自己编写使用泛型的类或者方法时要注意类型擦除的问题。接下来会介绍数组与泛型的关系以及通配符的使用，有兴趣的读者可进入下一篇：[Java 泛型总结（二）：泛型与数组](https://segmentfault.com/a/1190000005179147)。\n\n__参考__\n\n* Java 编程思想\n\n<strong><em>如果我的文章对您有帮助，不妨点个赞支持一下(</em></strong><strong><em><sup>_</sup></em></strong><strong><em>)</em></strong>\n",
    "body_html": "<h2 id=\"y1fsyh\"><a href=\"#y1fsyh\"></a>简介</h2><p>Java 在 1.5 引入了泛型机制，泛型本质是参数化类型，也就是说变量的类型是一个参数，在使用时再指定为具体类型。泛型可以用于类、接口、方法，通过使用泛型可以使代码更简单、安全。然而 Java 中的泛型使用了类型擦除，所以只是伪泛型。这篇文章对泛型的使用以及存在的问题做个总结，主要参考自 《Java 编程思想》。</p><p><br /></p><p>这个系列的另外两篇文章：</p><p><br /></p><ul><li><p><a href=\"https://segmentfault.com/a/1190000005179147\" target=\"_blank\">Java 泛型总结（二）：泛型与数组</a></p></li></ul><ul><li><p><a href=\"https://segmentfault.com/a/1190000005337789\" target=\"_blank\">Java 泛型总结（三）：通配符的使用</a></p></li></ul><p><br /></p><h2 id=\"rp66wu\"><a href=\"#rp66wu\"></a>基本用法</h2><h3 id=\"3kpkow\"><a href=\"#3kpkow\"></a>泛型类</h3><p><br /></p><p>如果有一个类 <code>Holder</code> 用于包装一个变量，这个变量的类型可能是任意的，怎么编写 <code>Holder</code> 呢？在没有泛型之前可以这样：</p><pre data-lang=\"java\"><code>public class Holder1 {\n    private Object a;\n\n    public Holder1(Object a) {\n        this.a = a;\n    }\n\n    public void set(Object a) {\n        this.a = a;\n    }\n    public Object get(){\n        return a;\n    }\n\n    public static void main(String[] args) {\n        Holder1 holder1 = new Holder1(&quot;not Generic&quot;);\n        String s = (String) holder1.get();\n        holder1.set(1);\n        Integer x = (Integer) holder1.get();\n    }\n}j</code></pre><p><br /></p><p>在 <code>Holder1</code> 中，有一个用 <code>Object</code> 引用的变量。因为任何类型都可以向上转型为 <code>Object</code>，所以这个 <code>Holder</code> 可以接受任何类型。在取出的时候 <code>Holder</code> 只知道它保存的是一个 <code>Object</code> 对象，所以要强制转换为对应的类型。在 <code>main</code> 方法中， <code>holder1</code> 先是保存了一个字符串，也就是 <code>String</code> 对象，接着又变为保存一个 <code>Integer</code> 对象(参数 <code>1</code> 会自动装箱)。从 <code>Holder</code> 中取出变量时强制转换已经比较麻烦，这里还要记住不同的类型，要是转错了就会出现运行时异常。</p><p><br /></p><p>下面看看 <code>Holder</code> 的泛型版本：</p><pre data-lang=\"java\"><code>public class Holder2&lt;T&gt; {\n\n    private T a;\n    public Holder2(T a) {\n        this.a = a;\n    }\n\n    public T get() {\n        return a;\n    }\n\n    public void set(T a) {\n        this.a = a;\n    }\n\n    public static void main(String[] args) {\n        Holder2&lt;String&gt; holder2 = new Holder2&lt;&gt;(&quot;Generic&quot;);\n        String s = holder2.get();\n\n        holder2.set(&quot;test&quot;);\n        holder2.set(1); // 编译不通过\n\n    }\n}</code></pre><p><br /></p><p>在 <code>Holder2</code> 中， 变量 <code>a</code> 是一个参数化类型 <code>T</code>，<span style=\"color: #F5222D;\">T</span><code></code><span style=\"color: #F5222D;\"> 只是一个标识，用其它字母也是可以的</span>。创建 <code>Holder2</code> 对象的时候，在尖括号中传入了参数 <code>T</code> 的类型，那么在这个对象中，所有出现 <code>T</code> 的地方相当于都用 <code>String</code> 替换了。现在的 <code>get</code> 的取出来的不是 <code>Object</code> ，而是 <code>String</code> 对象，因此不需要类型转换。另外，当调用 <code>set</code> 时，只能传入 <code>String</code> 类型，否则编译无法通过。这就保证了 <code>holder2</code> 中的类型安全，避免由于不小心传入错误的类型。</p><p><br /></p><p>通过上面的例子可以看出泛使得代码更简便、安全。引入泛型之后，Java 库的一些类，比如常用的容器类也被改写为支持泛型，我们使用的时候都会传入参数类型，如：<code>ArrayList&lt;Integer&gt; list = ArrayList&lt;&gt;();</code>。</p><p><br /></p><h3 id=\"1fk2uo\"><a href=\"#1fk2uo\"></a>泛型方法</h3><p>泛型不仅可以针对类，还可以单独使某个方法是泛型的，举个例子：</p><pre data-lang=\"java\"><code>public class GenericMethod {\n    // 如果在参数中使用了泛型，那么在函数的签名上要用尖括号表现出泛型\n    public &lt;K,V&gt; void f(K k,V v) {\n        System.out.println(k.getClass().getSimpleName());\n        System.out.println(v.getClass().getSimpleName());\n    }\n\n    public static void main(String[] args) {\n        GenericMethod gm = new GenericMethod();\n        gm.f(new Integer(0),new String(&quot;generic&quot;));\n    }\n}\n\n代码输出：\n    Integer\n    String</code></pre><p><br /></p><p><code>GenericMethod</code> 类本身不是泛型的，创建它的对象的时候不需要传入泛型参数，但是它的方法 <code>f</code> 是泛型方法。在返回类型之前是它的参数标识 <code>&lt;K,V&gt;</code>，注意这里有两个泛型参数，所以泛型参数可以有多个。</p><p><br /></p><p>调用泛型方法时可以不显式传入泛型参数，上面的调用就没有。这是因为编译器会使用参数类型推断，根据传入的实参的类型 (这里是 <code>integer</code> 和 <code>String</code>) 推断出 <code>K</code> 和 <code>V</code> 的类型。</p><p><br /></p><h2 id=\"ffqotm\"><a href=\"#ffqotm\"></a>类型擦除</h2><h3 id=\"e4r1ku\"><a href=\"#e4r1ku\"></a>什么是类型擦除</h3><p>Java 的泛型使用了类型擦除机制，<span style=\"color: #F5222D;\">这个引来了很大的争议，以至于 Java 的泛型功能受到限制，只能说是”伪泛型“</span>。什么叫类型擦除呢？简单的说就是，类型参数只存在于编译期，在运行时，Java 的虚拟机 ( JVM ) 并不知道泛型的存在。先看个例子：</p><pre data-lang=\"java\"><code>public class ErasedTypeEquivalence {\n    public static void main(String[] args) {\n        Class c1 = new ArrayList&lt;String&gt;().getClass();\n        Class c2 = new ArrayList&lt;Integer&gt;().getClass();\n        System.out.println(c1 == c2);\n    }\n}</code></pre><p><br /></p><p>上面的代码有两个不同的 <code>ArrayList</code>：<code>ArrayList&lt;Integer&gt;</code> 和 <code>ArrayList&lt;String&gt;</code>。在我们看来它们的参数化类型不同，一个保存整性，一个保存字符串。但是通过比较它们的 <code>Class</code> 对象，上面的代码输出是 <code>true</code>。这说明在 JVM 看来它们是同一个类。<span style=\"color: #F5222D;\">而在 C++、C# 这些支持真泛型的语言中，它们就是不同的类</span>。</p><p><br /></p><p>泛型参数会擦除到它的第一个边界，比如说上面的 <code>Holder2</code> 类，参数类型是一个单独的 <code>T</code>，那么就擦除到 <code>Object</code>,相当于所有出现 <code>T</code> 的地方都用 <code>Object</code> 替换。所以在 JVM 看来，保存的变量 <code>a</code> 还是 <code>Object</code> 类型。之所以取出来自动就是我们传入的参数类型，这是因为编译器在编译生成的字节码文件中插入了类型转换的代码，不需要我们手动转型了。<span style=\"color: #F5222D;\">如果参数类型有边界那么就擦除到它的第一个边界</span>，这个下一节再说。</p><p><span style=\"color: #F5222D;\">简而言之：在代码层面，虽有泛型的存在，但是在运行时候的jvm层面却感受不到泛型的存在</span></p><p><br /></p><h3 id=\"gkovvz\"><a href=\"#gkovvz\"></a>擦除带来的问题</h3><p>擦除会出现一些问题，下面是一个例子：</p><pre data-lang=\"java\"><code>class HasF {\n    public void f() {\n        System.out.println(&quot;HasF.f()&quot;);\n    }\n}\npublic class Manipulator&lt;T&gt; {\n    private T obj;\n\n    public Manipulator(T obj) {\n        this.obj = obj;\n    }\n\n    public void manipulate() {\n        obj.f(); \n    }\n\n    public static void main(String[] args) {\n        HasF hasF  = new HasF();\n        Manipulator&lt;HasF&gt; manipulator = new Manipulator&lt;&gt;(hasF);\n        manipulator.manipulate();\n    }\n}</code></pre><p><br /></p><p>上面的 <code>Manipulator</code> 是一个泛型类，内部用一个泛型化的变量 <code>obj</code>，在 <code>manipulate</code> 方法中，调用了 <code>obj</code> 的方法 <code>f()</code>，但是这行代码无法编译。因为类型擦除，编译器不确定 <code>obj</code> 是否有 <code>f()</code> 方法。解决这个问题的方法是给 <code>T</code> 一个边界:</p><p><br /></p><pre data-lang=\"java\"><code>class Manipulator2&lt;T extends HasF&gt; {\n    private T obj;\n    public Manipulator2(T x) { obj = x; }\n    public void manipulate() { obj.f(); }\n}</code></pre><p><br /></p><p>现在 <code>T</code> 的类型是 <code>&lt;T extends HasF&gt;</code>，<span style=\"color: #F5222D;\">这表示 </span><span style=\"color: #F5222D;\">T</span><code></code><span style=\"color: #F5222D;\"> 必须是 </span><span style=\"color: #F5222D;\">HasF</span><code></code><span style=\"color: #F5222D;\"> 或者 </span><span style=\"color: #F5222D;\">HasF</span><code></code><span style=\"color: #F5222D;\"> 的导出类型</span>。这样，调用 <code>f()</code> 方法才安全。<code>HasF</code> 就是 <code>T</code> 的边界，因此通过类型擦除后，所有出现 <code>T</code> 的<br />地方都用 <code>HasF</code> 替换。这样编译器就知道 <code>obj</code> 是有方法 <code>f()</code> 的。</p><p><br /></p><p>但是这样就抵消了泛型带来的好处，上面的类完全可以改成这样：</p><pre data-lang=\"java\"><code>class Manipulator3 {\n    private HasF obj;\n    public Manipulator3(HasF x) { obj = x; }\n    public void manipulate() { obj.f(); }\n}</code></pre><p><br /></p><p>所以泛型只有在比较复杂的类中才体现出作用。但是像 <code>&lt;T extends HasF&gt;</code> 这种形式的东西不是完全没有意义的。如果类中有一个返回 <code>T</code> 类型的方法，泛型就有用了，因为这样会返回准确类型。比如下面的例子：</p><p><br /></p><pre data-lang=\"java\"><code>class ReturnGenericType&lt;T extends HasF&gt; {\n    private T obj;\n    public ReturnGenericType(T x) { obj = x; }\n    public T get() { return obj; }\n}</code></pre><p><br /></p><p>这里的 <code>get()</code> 方法返回的是泛型参数的准确类型，而不是 <code>HasF</code>。</p><p><br /></p><h3 id=\"i1rmga\"><a href=\"#i1rmga\"></a>类型擦除的补偿</h3><p>类型擦除导致泛型丧失了一些功能，任何在运行期需要知道确切类型的代码都无法工作。比如下面的例子：</p><pre data-lang=\"java\"><code>public class Erased&lt;T&gt; {\n    private final int SIZE = 100;\n    public static void f(Object arg) {\n        if(arg instanceof T) {} \n        T var = new T(); \n        T[] array = new T[SIZE]; \n        T[] array = (T)new Object[SIZE]; \n    }\n}</code></pre><p><br /></p><p>通过 <code>new T()</code> 创建对象是不行的，一是由于类型擦除，二是由于编译器不知道 <code>T</code> 是否有默认的构造器。一种解决的办法是传递一个工厂对象并且通过它创建新的实例。</p><pre data-lang=\"java\"><code>interface FactoryI&lt;T&gt; {\n    T create();\n}\nclass Foo2&lt;T&gt; {\n    private T x;\n    public &lt;F extends FactoryI&lt;T&gt;&gt; Foo2(F factory) {\n        x = factory.create();\n    }\n}\nclass IntegerFactory implements FactoryI&lt;Integer&gt; {\n    public Integer create() {\n        return new Integer(0);\n    }\n}\nclass Widget {\n    public static class Factory implements FactoryI&lt;Widget&gt; {\n        public Widget create() {\n            return new Widget();\n        }\n    }\n}\npublic class FactoryConstraint {\n    public static void main(String[] args) {\n        new Foo2&lt;Integer&gt;(new IntegerFactory());\n        new Foo2&lt;Widget&gt;(new Widget.Factory());\n    }\n}</code></pre><p><br /></p><p>另一种解决的方法是利用模板设计模式：</p><pre data-lang=\"java\"><code>abstract class GenericWithCreate&lt;T&gt; {\n    final T element;\n    GenericWithCreate() { element = create(); }\n    abstract T create();\n}\nclass X {}\nclass Creator extends GenericWithCreate&lt;X&gt; {\n    X create() { return new X(); }\n    void f() {\n        System.out.println(element.getClass().getSimpleName());\n    }\n}\npublic class CreatorGeneric {\n    public static void main(String[] args) {\n        Creator c = new Creator();\n        c.f();\n    }\n}</code></pre><p><br /></p><p>具体类型的创建放到了子类继承父类时，在 <code>create</code> 方法中创建实际的类型并返回。</p><p><br /></p><h2 id=\"elwdex\"><a href=\"#elwdex\"></a>总结</h2><p><br /></p><p>本文介绍了 Java 泛型的使用，以及类型擦除相关的问题。一般情况下泛型的使用比较简单，但是某些情况下，尤其是自己编写使用泛型的类或者方法时要注意类型擦除的问题。接下来会介绍数组与泛型的关系以及通配符的使用，有兴趣的读者可进入下一篇：<a href=\"https://segmentfault.com/a/1190000005179147\" target=\"_blank\">Java 泛型总结（二）：泛型与数组</a>。</p><p><br /></p><p><strong>参考</strong></p><p><br /></p><ul><li><p>Java 编程思想</p></li></ul><p><br /></p><p><strong><em>如果我的文章对您有帮助，不妨点个赞支持一下(</em></strong><strong><em><sup>_</sup></em></strong><strong><em>)</em></strong></p>",
    "body_lake": "<!doctype lake><h2 id=\"y1fsyh\"><a href=\"#y1fsyh\" id=\"简介\"></a>简介</h2><p>Java 在 1.5 引入了泛型机制，泛型本质是参数化类型，也就是说变量的类型是一个参数，在使用时再指定为具体类型。泛型可以用于类、接口、方法，通过使用泛型可以使代码更简单、安全。然而 Java 中的泛型使用了类型擦除，所以只是伪泛型。这篇文章对泛型的使用以及存在的问题做个总结，主要参考自 《Java 编程思想》。</p><p><br /></p><p>这个系列的另外两篇文章：</p><p><br /></p><ul><li><p><a href=\"https://segmentfault.com/a/1190000005179147\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Java 泛型总结（二）：泛型与数组</a></p></li></ul><ul><li><p><a href=\"https://segmentfault.com/a/1190000005337789\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Java 泛型总结（三）：通配符的使用</a></p></li></ul><p><br /></p><h2 id=\"rp66wu\"><a href=\"#rp66wu\" id=\"基本用法\"></a>基本用法</h2><h3 id=\"3kpkow\"><a href=\"#3kpkow\" id=\"泛型类\"></a>泛型类</h3><p><br /></p><p>如果有一个类 <code>Holder</code> 用于包装一个变量，这个变量的类型可能是任意的，怎么编写 <code>Holder</code> 呢？在没有泛型之前可以这样：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%227026ba45%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Holder1%20%7B%5Cn%20%20%20%20private%20Object%20a%3B%5Cn%5Cn%20%20%20%20public%20Holder1(Object%20a)%20%7B%5Cn%20%20%20%20%20%20%20%20this.a%20%3D%20a%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20set(Object%20a)%20%7B%5Cn%20%20%20%20%20%20%20%20this.a%20%3D%20a%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20public%20Object%20get()%7B%5Cn%20%20%20%20%20%20%20%20return%20a%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20Holder1%20holder1%20%3D%20new%20Holder1(%5C%22not%20Generic%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20String%20s%20%3D%20(String)%20holder1.get()%3B%5Cn%20%20%20%20%20%20%20%20holder1.set(1)%3B%5Cn%20%20%20%20%20%20%20%20Integer%20x%20%3D%20(Integer)%20holder1.get()%3B%5Cn%20%20%20%20%7D%5Cn%7Dj%22%7D\"></card><p><br /></p><p>在 <code>Holder1</code> 中，有一个用 <code>Object</code> 引用的变量。因为任何类型都可以向上转型为 <code>Object</code>，所以这个 <code>Holder</code> 可以接受任何类型。在取出的时候 <code>Holder</code> 只知道它保存的是一个 <code>Object</code> 对象，所以要强制转换为对应的类型。在 <code>main</code> 方法中， <code>holder1</code> 先是保存了一个字符串，也就是 <code>String</code> 对象，接着又变为保存一个 <code>Integer</code> 对象(参数 <code>1</code> 会自动装箱)。从 <code>Holder</code> 中取出变量时强制转换已经比较麻烦，这里还要记住不同的类型，要是转错了就会出现运行时异常。</p><p><br /></p><p>下面看看 <code>Holder</code> 的泛型版本：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fc7002e0%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Holder2%3CT%3E%20%7B%5Cn%5Cn%20%20%20%20private%20T%20a%3B%5Cn%20%20%20%20public%20Holder2(T%20a)%20%7B%5Cn%20%20%20%20%20%20%20%20this.a%20%3D%20a%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20T%20get()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20a%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20set(T%20a)%20%7B%5Cn%20%20%20%20%20%20%20%20this.a%20%3D%20a%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20Holder2%3CString%3E%20holder2%20%3D%20new%20Holder2%3C%3E(%5C%22Generic%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20String%20s%20%3D%20holder2.get()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20holder2.set(%5C%22test%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20holder2.set(1)%3B%20%2F%2F%20%E7%BC%96%E8%AF%91%E4%B8%8D%E9%80%9A%E8%BF%87%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>在 <code>Holder2</code> 中， 变量 <code>a</code> 是一个参数化类型 <code>T</code>，<span style=\"color:#F5222D\">T</span><code></code><span style=\"color:#F5222D\"> 只是一个标识，用其它字母也是可以的</span>。创建 <code>Holder2</code> 对象的时候，在尖括号中传入了参数 <code>T</code> 的类型，那么在这个对象中，所有出现 <code>T</code> 的地方相当于都用 <code>String</code> 替换了。现在的 <code>get</code> 的取出来的不是 <code>Object</code> ，而是 <code>String</code> 对象，因此不需要类型转换。另外，当调用 <code>set</code> 时，只能传入 <code>String</code> 类型，否则编译无法通过。这就保证了 <code>holder2</code> 中的类型安全，避免由于不小心传入错误的类型。</p><p><br /></p><p>通过上面的例子可以看出泛使得代码更简便、安全。引入泛型之后，Java 库的一些类，比如常用的容器类也被改写为支持泛型，我们使用的时候都会传入参数类型，如：<code>ArrayList&lt;Integer&gt; list = ArrayList&lt;&gt;();</code>。</p><p><br /></p><h3 id=\"1fk2uo\"><a href=\"#1fk2uo\" id=\"泛型方法\"></a>泛型方法</h3><p>泛型不仅可以针对类，还可以单独使某个方法是泛型的，举个例子：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22efafccb1%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20GenericMethod%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E5%9C%A8%E5%8F%82%E6%95%B0%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BA%86%E6%B3%9B%E5%9E%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E5%9C%A8%E5%87%BD%E6%95%B0%E7%9A%84%E7%AD%BE%E5%90%8D%E4%B8%8A%E8%A6%81%E7%94%A8%E5%B0%96%E6%8B%AC%E5%8F%B7%E8%A1%A8%E7%8E%B0%E5%87%BA%E6%B3%9B%E5%9E%8B%5Cn%20%20%20%20public%20%3CK%2CV%3E%20void%20f(K%20k%2CV%20v)%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(k.getClass().getSimpleName())%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(v.getClass().getSimpleName())%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20GenericMethod%20gm%20%3D%20new%20GenericMethod()%3B%5Cn%20%20%20%20%20%20%20%20gm.f(new%20Integer(0)%2Cnew%20String(%5C%22generic%5C%22))%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cn%E4%BB%A3%E7%A0%81%E8%BE%93%E5%87%BA%EF%BC%9A%5Cn%20%20%20%20Integer%5Cn%20%20%20%20String%22%7D\"></card><p><br /></p><p><code>GenericMethod</code> 类本身不是泛型的，创建它的对象的时候不需要传入泛型参数，但是它的方法 <code>f</code> 是泛型方法。在返回类型之前是它的参数标识 <code>&lt;K,V&gt;</code>，注意这里有两个泛型参数，所以泛型参数可以有多个。</p><p><br /></p><p>调用泛型方法时可以不显式传入泛型参数，上面的调用就没有。这是因为编译器会使用参数类型推断，根据传入的实参的类型 (这里是 <code>integer</code> 和 <code>String</code>) 推断出 <code>K</code> 和 <code>V</code> 的类型。</p><p><br /></p><h2 id=\"ffqotm\"><a href=\"#ffqotm\" id=\"类型擦除\"></a>类型擦除</h2><h3 id=\"e4r1ku\"><a href=\"#e4r1ku\" id=\"什么是类型擦除\"></a>什么是类型擦除</h3><p>Java 的泛型使用了类型擦除机制，<span style=\"color:#F5222D\">这个引来了很大的争议，以至于 Java 的泛型功能受到限制，只能说是”伪泛型“</span>。什么叫类型擦除呢？简单的说就是，类型参数只存在于编译期，在运行时，Java 的虚拟机 ( JVM ) 并不知道泛型的存在。先看个例子：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22cfb29705%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20ErasedTypeEquivalence%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20Class%20c1%20%3D%20new%20ArrayList%3CString%3E().getClass()%3B%5Cn%20%20%20%20%20%20%20%20Class%20c2%20%3D%20new%20ArrayList%3CInteger%3E().getClass()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(c1%20%3D%3D%20c2)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>上面的代码有两个不同的 <code>ArrayList</code>：<code>ArrayList&lt;Integer&gt;</code> 和 <code>ArrayList&lt;String&gt;</code>。在我们看来它们的参数化类型不同，一个保存整性，一个保存字符串。但是通过比较它们的 <code>Class</code> 对象，上面的代码输出是 <code>true</code>。这说明在 JVM 看来它们是同一个类。<span style=\"color:#F5222D\">而在 C++、C# 这些支持真泛型的语言中，它们就是不同的类</span>。</p><p><br /></p><p>泛型参数会擦除到它的第一个边界，比如说上面的 <code>Holder2</code> 类，参数类型是一个单独的 <code>T</code>，那么就擦除到 <code>Object</code>,相当于所有出现 <code>T</code> 的地方都用 <code>Object</code> 替换。所以在 JVM 看来，保存的变量 <code>a</code> 还是 <code>Object</code> 类型。之所以取出来自动就是我们传入的参数类型，这是因为编译器在编译生成的字节码文件中插入了类型转换的代码，不需要我们手动转型了。<span style=\"color:#F5222D\">如果参数类型有边界那么就擦除到它的第一个边界</span>，这个下一节再说。</p><p><span style=\"color:#F5222D\">简而言之：在代码层面，虽有泛型的存在，但是在运行时候的jvm层面却感受不到泛型的存在</span></p><p><br /></p><h3 id=\"gkovvz\"><a href=\"#gkovvz\" id=\"擦除带来的问题\"></a>擦除带来的问题</h3><p>擦除会出现一些问题，下面是一个例子：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f3fe5203%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22class%20HasF%20%7B%5Cn%20%20%20%20public%20void%20f()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22HasF.f()%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cnpublic%20class%20Manipulator%3CT%3E%20%7B%5Cn%20%20%20%20private%20T%20obj%3B%5Cn%5Cn%20%20%20%20public%20Manipulator(T%20obj)%20%7B%5Cn%20%20%20%20%20%20%20%20this.obj%20%3D%20obj%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20manipulate()%20%7B%5Cn%20%20%20%20%20%20%20%20obj.f()%3B%20%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20HasF%20hasF%20%20%3D%20new%20HasF()%3B%5Cn%20%20%20%20%20%20%20%20Manipulator%3CHasF%3E%20manipulator%20%3D%20new%20Manipulator%3C%3E(hasF)%3B%5Cn%20%20%20%20%20%20%20%20manipulator.manipulate()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>上面的 <code>Manipulator</code> 是一个泛型类，内部用一个泛型化的变量 <code>obj</code>，在 <code>manipulate</code> 方法中，调用了 <code>obj</code> 的方法 <code>f()</code>，但是这行代码无法编译。因为类型擦除，编译器不确定 <code>obj</code> 是否有 <code>f()</code> 方法。解决这个问题的方法是给 <code>T</code> 一个边界:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b661c9ce%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22class%20Manipulator2%3CT%20extends%20HasF%3E%20%7B%5Cn%20%20%20%20private%20T%20obj%3B%5Cn%20%20%20%20public%20Manipulator2(T%20x)%20%7B%20obj%20%3D%20x%3B%20%7D%5Cn%20%20%20%20public%20void%20manipulate()%20%7B%20obj.f()%3B%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>现在 <code>T</code> 的类型是 <code>&lt;T extends HasF&gt;</code>，<span style=\"color:#F5222D\">这表示 </span><span style=\"color:#F5222D\">T</span><code></code><span style=\"color:#F5222D\"> 必须是 </span><span style=\"color:#F5222D\">HasF</span><code></code><span style=\"color:#F5222D\"> 或者 </span><span style=\"color:#F5222D\">HasF</span><code></code><span style=\"color:#F5222D\"> 的导出类型</span>。这样，调用 <code>f()</code> 方法才安全。<code>HasF</code> 就是 <code>T</code> 的边界，因此通过类型擦除后，所有出现 <code>T</code> 的<br />地方都用 <code>HasF</code> 替换。这样编译器就知道 <code>obj</code> 是有方法 <code>f()</code> 的。</p><p><br /></p><p>但是这样就抵消了泛型带来的好处，上面的类完全可以改成这样：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22d54c2cdc%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22class%20Manipulator3%20%7B%5Cn%20%20%20%20private%20HasF%20obj%3B%5Cn%20%20%20%20public%20Manipulator3(HasF%20x)%20%7B%20obj%20%3D%20x%3B%20%7D%5Cn%20%20%20%20public%20void%20manipulate()%20%7B%20obj.f()%3B%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>所以泛型只有在比较复杂的类中才体现出作用。但是像 <code>&lt;T extends HasF&gt;</code> 这种形式的东西不是完全没有意义的。如果类中有一个返回 <code>T</code> 类型的方法，泛型就有用了，因为这样会返回准确类型。比如下面的例子：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b1fe95ad%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22class%20ReturnGenericType%3CT%20extends%20HasF%3E%20%7B%5Cn%20%20%20%20private%20T%20obj%3B%5Cn%20%20%20%20public%20ReturnGenericType(T%20x)%20%7B%20obj%20%3D%20x%3B%20%7D%5Cn%20%20%20%20public%20T%20get()%20%7B%20return%20obj%3B%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>这里的 <code>get()</code> 方法返回的是泛型参数的准确类型，而不是 <code>HasF</code>。</p><p><br /></p><h3 id=\"i1rmga\"><a href=\"#i1rmga\" id=\"类型擦除的补偿\"></a>类型擦除的补偿</h3><p>类型擦除导致泛型丧失了一些功能，任何在运行期需要知道确切类型的代码都无法工作。比如下面的例子：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%224653b41c%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Erased%3CT%3E%20%7B%5Cn%20%20%20%20private%20final%20int%20SIZE%20%3D%20100%3B%5Cn%20%20%20%20public%20static%20void%20f(Object%20arg)%20%7B%5Cn%20%20%20%20%20%20%20%20if(arg%20instanceof%20T)%20%7B%7D%20%5Cn%20%20%20%20%20%20%20%20T%20var%20%3D%20new%20T()%3B%20%5Cn%20%20%20%20%20%20%20%20T%5B%5D%20array%20%3D%20new%20T%5BSIZE%5D%3B%20%5Cn%20%20%20%20%20%20%20%20T%5B%5D%20array%20%3D%20(T)new%20Object%5BSIZE%5D%3B%20%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>通过 <code>new T()</code> 创建对象是不行的，一是由于类型擦除，二是由于编译器不知道 <code>T</code> 是否有默认的构造器。一种解决的办法是传递一个工厂对象并且通过它创建新的实例。</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22eb7c0aff%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22interface%20FactoryI%3CT%3E%20%7B%5Cn%20%20%20%20T%20create()%3B%5Cn%7D%5Cnclass%20Foo2%3CT%3E%20%7B%5Cn%20%20%20%20private%20T%20x%3B%5Cn%20%20%20%20public%20%3CF%20extends%20FactoryI%3CT%3E%3E%20Foo2(F%20factory)%20%7B%5Cn%20%20%20%20%20%20%20%20x%20%3D%20factory.create()%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cnclass%20IntegerFactory%20implements%20FactoryI%3CInteger%3E%20%7B%5Cn%20%20%20%20public%20Integer%20create()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Integer(0)%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cnclass%20Widget%20%7B%5Cn%20%20%20%20public%20static%20class%20Factory%20implements%20FactoryI%3CWidget%3E%20%7B%5Cn%20%20%20%20%20%20%20%20public%20Widget%20create()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20new%20Widget()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%5Cnpublic%20class%20FactoryConstraint%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20new%20Foo2%3CInteger%3E(new%20IntegerFactory())%3B%5Cn%20%20%20%20%20%20%20%20new%20Foo2%3CWidget%3E(new%20Widget.Factory())%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>另一种解决的方法是利用模板设计模式：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2299e1311a%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22abstract%20class%20GenericWithCreate%3CT%3E%20%7B%5Cn%20%20%20%20final%20T%20element%3B%5Cn%20%20%20%20GenericWithCreate()%20%7B%20element%20%3D%20create()%3B%20%7D%5Cn%20%20%20%20abstract%20T%20create()%3B%5Cn%7D%5Cnclass%20X%20%7B%7D%5Cnclass%20Creator%20extends%20GenericWithCreate%3CX%3E%20%7B%5Cn%20%20%20%20X%20create()%20%7B%20return%20new%20X()%3B%20%7D%5Cn%20%20%20%20void%20f()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(element.getClass().getSimpleName())%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cnpublic%20class%20CreatorGeneric%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20Creator%20c%20%3D%20new%20Creator()%3B%5Cn%20%20%20%20%20%20%20%20c.f()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>具体类型的创建放到了子类继承父类时，在 <code>create</code> 方法中创建实际的类型并返回。</p><p><br /></p><h2 id=\"elwdex\"><a href=\"#elwdex\" id=\"总结\"></a>总结</h2><p><br /></p><p>本文介绍了 Java 泛型的使用，以及类型擦除相关的问题。一般情况下泛型的使用比较简单，但是某些情况下，尤其是自己编写使用泛型的类或者方法时要注意类型擦除的问题。接下来会介绍数组与泛型的关系以及通配符的使用，有兴趣的读者可进入下一篇：<a href=\"https://segmentfault.com/a/1190000005179147\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Java 泛型总结（二）：泛型与数组</a>。</p><p><br /></p><p><strong>参考</strong></p><p><br /></p><ul><li><p>Java 编程思想</p></li></ul><p><br /></p><p><strong><em>如果我的文章对您有帮助，不妨点个赞支持一下(</em></strong><strong><em><sup>_</sup></em></strong><strong><em>)</em></strong></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T15:07:55.000Z",
    "deleted_at": null,
    "created_at": "2019-01-22T04:56:27.000Z",
    "updated_at": "2019-06-13T02:29:21.000Z",
    "published_at": "2019-01-22T15:07:55.000Z",
    "first_published_at": null,
    "word_count": 2368,
    "cover": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548169669464-aa77270d-eefb-4deb-824f-b5b35a512fa4.png",
    "description": "简介Java 在 1.5 引入了泛型机制，泛型本质是参数化类型，也就是说变量的类型是一个参数，在使用时再指定为具体类型。泛型可以用于类、接口、方法，通过使用泛型可以使代码更简单、安全。然而 Java 中的泛型使用了类型擦除，所以只是伪泛型。这篇文章对泛型的使用以及存在的问题做个总结，主要参考自...",
    "custom_description": "简介Java 在 1.5 引入了泛型机制，泛型本质是参数化类型，也就是说变量的类型是一个参数，在使用时再指定为具体类型。泛型可以用于类、接口、方法，通过使用泛型可以使代码更简单、安全。然而 Java 中的泛型使用了类型擦除，所以只是伪泛型。这篇文章对泛型的使用以及存在的问题做个总结，主要参考自...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1171218,
    "slug": "lv4qmd",
    "title": "Linux下五种IO模型",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "在Linux(UNIX)操作系统中，共有五种IO模型，分别是：<br />**阻塞IO模型**非阻塞IO模型**IO复用模型**信号驱动IO模型**异步IO模型**。\n\n<a name=\"ae5a94ab\"></a>\n### 到底什么是IO\n\n我们常说的IO，指的是文件的输入和输出，但是在操作系统层面是如何定义IO的呢？到底什么样的过程可以叫做是一次IO呢？<br />拿一次磁盘文件读取为例，我们要读取的文件是存储在磁盘上的，我们的目的是把它读取到内存中。可以把这个步骤简化成把数据从硬件（硬盘）中读取到用户空间中。<br />其实真正的文件读取还涉及到缓存等细节，这里就不展开讲述了。关于用户空间、内核空间以及硬件等的关系如果读者不理解的话，可以通过钓鱼的例子理解。<br />钓鱼的时候，刚开始鱼是在鱼塘里面的，我们的钓鱼动作的最终结束标志是鱼从鱼塘中被我们钓上来，放入鱼篓中。<br />这里面的鱼塘就可以映射成磁盘，中间过渡的鱼钩可以映射成内核空间，最终放鱼的鱼篓可以映射成用户空间。一次完整的钓鱼（IO）操作，是鱼（文件）从鱼塘（硬盘）中转移（拷贝）到鱼篓（用户空间）的过程。\n\n<a name=\"0f2858c7\"></a>\n### 阻塞IO模型\n\n我们钓鱼的时候，有一种方式比较惬意，比较轻松，那就是我们坐在鱼竿面前，这个过程中我们什么也不做，双手一直把着鱼竿，就静静的等着鱼儿咬钩。一旦手上感受到鱼的力道，就把鱼钓起来放入鱼篓中。然后再钓下一条鱼。<br />映射到Linux操作系统中，这就是一种最简单的IO模型，即阻塞IO。 阻塞 I/O 是最简单的 I/O 模型，一般表现为进程或线程等待某个条件，如果条件不满足，则一直等下去。条件满足，则进行下一步操作。\n\n应用进程通过系统调用 `recvfrom` 接收数据，但由于内核还未准备好数据报，应用进程就会阻塞住，直到内核准备好数据报，`recvfrom` 完成数据报复制工作，应用进程才能结束阻塞状态。<br />这种钓鱼方式相对来说比较简单，对于钓鱼的人来说，不需要什么特制的鱼竿，拿一根够长的木棍就可以悠闲的开始钓鱼了（实现简单）。缺点就是比较耗费时间，比较适合那种对鱼的需求量小的情况（并发低，时效性要求低）。<br />![image.png](https://cdn.nlark.com/yuque/18/2019/png/160921/1547631050178-3fbc6593-9829-4ed5-9644-7683df9b22a0.png#align=left&display=inline&height=305&linkTarget=_blank&name=image.png&originHeight=338&originWidth=621&size=58684&width=561#alt=image.png)\n\n<a name=\"4090cb84\"></a>\n### 非阻塞IO模型\n\n我们钓鱼的时候，在等待鱼儿咬钩的过程中，我们可以做点别的事情，比如玩一把王者荣耀、看一集《延禧攻略》等等。但是，我们要时不时的去看一下鱼竿，一旦发现有鱼儿上钩了，就把鱼钓上来。<br />映射到Linux操作系统中，这就是非阻塞的IO模型。应用进程与内核交互，目的未达到之前，不再一味的等着，而是直接返回。然后通过轮询的方式，不停的去问内核数据准备有没有准备好。如果某一次轮询发现数据已经准备好了，那就把数据拷贝到用户空间中。\n\n应用进程通过 `recvfrom` 调用不停的去和内核交互，直到内核准备好数据。如果没有准备好，内核会返回`error`，应用进程在得到`error`后，过一段时间再发送`recvfrom`请求。在两次发送请求的时间段，进程可以先做别的事情。<br />这种方式钓鱼，和阻塞IO比，所使用的工具没有什么变化，但是钓鱼的时候可以做些其他事情，增加时间的利用率。<br />![image.png](https://cdn.nlark.com/yuque/18/2019/png/160921/1547631026635-a675f09e-b8cd-426e-8b72-01b69e7066b0.png#align=left&display=inline&height=312&linkTarget=_blank&name=image.png&originHeight=374&originWidth=702&size=101545&width=585#alt=image.png)\n\n<a name=\"6b7a84da\"></a>\n### 信号驱动IO模型\n\n我们钓鱼的时候，为了避免自己一遍一遍的去查看鱼竿，我们可以给鱼竿安装一个报警器。当有鱼儿咬钩的时候立刻报警。然后我们再收到报警后，去把鱼钓起来。<br />映射到Linux操作系统中，这就是信号驱动IO。应用进程在读取文件时通知内核，如果某个 socket 的某个事件发生时，请向我发一个信号。在收到信号后，信号对应的处理函数会进行后续处理。\n\n应用进程预先向内核注册一个信号处理函数，然后用户进程返回，并且不阻塞，当内核数据准备就绪时会发送一个信号给进程，用户进程便在信号处理函数中开始把数据拷贝的用户空间中。<br />这种方式钓鱼，和前几种相比，所使用的工具有了一些变化，需要有一些定制（实现复杂）。但是钓鱼的人就可以在鱼儿咬钩之前彻底做别的事儿去了。等着报警器响就行了。<br />![image.png](https://cdn.nlark.com/yuque/18/2019/png/160921/1547631002027-13f3fa45-c8a8-485c-8331-0d3d633eedc0.png#align=left&display=inline&height=320&linkTarget=_blank&name=image.png&originHeight=391&originWidth=710&size=85909&width=579#alt=image.png)\n\n<a name=\"ba83054e\"></a>\n### IO复用模型\n\n我们钓鱼的时候，为了保证可以最短的时间钓到最多的鱼，我们同一时间摆放多个鱼竿，同时钓鱼。然后哪个鱼竿有鱼儿咬钩了，我们就把哪个鱼竿上面的鱼钓起来。<br />映射到Linux操作系统中，这就是IO复用模型。多个进程的IO可以注册到同一个管道上，这个管道会统一和内核进行交互。当管道中的某一个请求需要的数据准备好之后，进程再把对应的数据拷贝到用户空间中。\n\nIO多路转接是多了一个`select`函数，多个进程的IO可以注册到同一个`select`上，当用户进程调用该`select`，`select`会监听所有注册好的IO，如果所有被监听的IO需要的数据都没有准备好时，`select`调用进程会阻塞。当任意一个IO所需的数据准备好之后，`select`调用就会返回，然后进程在通过`recvfrom`来进行数据拷贝。<br />**这里的IO复用模型，并没有向内核注册信号处理函数，所以，他并不是非阻塞的。**进程在发出`select`后，要等到`select`监听的所有IO操作中至少有一个需要的数据准备好，才会有返回，并且也需要再次发送请求去进行文件的拷贝。<br />这种方式的钓鱼，通过增加鱼竿的方式，可以有效的提升效率。<br />![image.png](https://cdn.nlark.com/yuque/18/2019/png/160921/1547630980222-495b3752-9566-4785-8ef3-d299ec1ae72c.png#align=left&display=inline&height=302&linkTarget=_blank&name=image.png&originHeight=373&originWidth=710&size=103126&width=573#alt=image.png)\n\n<a name=\"cce95bbd\"></a>\n### 为什么以上四种都是同步的\n\n我们说阻塞IO模型、非阻塞IO模型、IO复用模型和信号驱动IO模型都是同步的IO模型。原因是因为，无论以上那种模型，真正的数据拷贝过程，都是同步进行的。<br />**信号驱动难道不是异步的么？** 信号驱动，内核是在数据准备好之后通知进程，然后进程再通过`recvfrom`操作进行数据拷贝。我们可以认为数据准备阶段是异步的，但是，数据拷贝操作是同步的。所以，整个IO过程也不能认为是异步的。\n\n我们把钓鱼过程，可以拆分为两个步骤：1、鱼咬钩（数据准备）。2、把鱼钓起来放进鱼篓里（数据拷贝）。无论以上提到的哪种钓鱼方式，在第二步，都是需要人主动去做的，并不是鱼竿自己完成的。所以，这个钓鱼过程其实还是同步进行的。<br />\n\n烧水的报警器一响，整个烧水过程就完成了。水已经是开水了。<br />钓鱼的报警器一响，只能说明鱼儿已经咬钩了，但是还没有真正的钓上来。\n\n所以 ，使用带有报警器的水壶烧水，烧水过程是异步的。<br />而使用带有报警器的鱼竿钓鱼，钓鱼的过程还是同步的。\n\n<a name=\"7fc2d09a\"></a>\n### 异步IO模型\n\n我们钓鱼的时候，采用一种高科技钓鱼竿，即全自动钓鱼竿。可以自动感应鱼上钩，自动收竿，更厉害的可以自动把鱼放进鱼篓里。然后，通知我们鱼已经钓到了，他就继续去钓下一条鱼去了。<br />映射到Linux操作系统中，这就是异步IO模型。应用进程把IO请求传给内核后，完全由内核去操作文件拷贝。内核完成相关操作后，会发信号告诉应用进程本次IO已经完成。\n\n用户进程发起`aio_read`操作之后，给内核传递描述符、缓冲区指针、缓冲区大小等，告诉内核当整个操作完成时，如何通知进程，然后就立刻去做其他事情了。当内核收到`aio_read`后，会立刻返回，然后内核开始等待数据准备，数据准备好以后，直接把数据拷贝到用户控件，然后再通知进程本次IO已经完成。<br />这种方式的钓鱼，无疑是最省事儿的。啥都不需要管，只需要交给鱼竿就可以了。<br />![image.png](https://cdn.nlark.com/yuque/18/2019/png/160921/1547630948762-d55b7c4d-5d9d-456f-83b1-71e1f221a3f6.png#align=left&display=inline&height=335&linkTarget=_blank&name=image.png&originHeight=420&originWidth=697&size=70068&width=556#alt=image.png)\n\n<a name=\"bef5c8b5\"></a>\n### 5种IO模型对比\n\n![image.png](https://cdn.nlark.com/yuque/18/2019/png/160921/1547630915753-b20ea786-09a3-4f5c-a91f-77fabf109343.png#align=left&display=inline&height=271&linkTarget=_blank&name=image.png&originHeight=541&originWidth=1080&size=199212&width=540#alt=image.png)\n\n\n作者：漫话编程_公众号mhcoding<br />链接：[https://juejin.im/post/5b94e93b5188255c672e901e](https://juejin.im/post/5b94e93b5188255c672e901e)<br />来源：掘金<br />著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n",
    "body_draft": "",
    "body_html": "<p>在Linux(UNIX)操作系统中，共有五种IO模型，分别是：<br /><strong>阻塞IO模型</strong>非阻塞IO模型<strong>IO复用模型</strong>信号驱动IO模型<strong>异步IO模型</strong>。</p><p><br /></p><h3 id=\"ae5a94ab\">到底什么是IO</h3><p><br /></p><p>我们常说的IO，指的是文件的输入和输出，但是在操作系统层面是如何定义IO的呢？到底什么样的过程可以叫做是一次IO呢？<br />拿一次磁盘文件读取为例，我们要读取的文件是存储在磁盘上的，我们的目的是把它读取到内存中。可以把这个步骤简化成把数据从硬件（硬盘）中读取到用户空间中。<br />其实真正的文件读取还涉及到缓存等细节，这里就不展开讲述了。关于用户空间、内核空间以及硬件等的关系如果读者不理解的话，可以通过钓鱼的例子理解。<br />钓鱼的时候，刚开始鱼是在鱼塘里面的，我们的钓鱼动作的最终结束标志是鱼从鱼塘中被我们钓上来，放入鱼篓中。<br />这里面的鱼塘就可以映射成磁盘，中间过渡的鱼钩可以映射成内核空间，最终放鱼的鱼篓可以映射成用户空间。一次完整的钓鱼（IO）操作，是鱼（文件）从鱼塘（硬盘）中转移（拷贝）到鱼篓（用户空间）的过程。</p><p><br /></p><h3 id=\"0f2858c7\">阻塞IO模型</h3><p><br /></p><p>我们钓鱼的时候，有一种方式比较惬意，比较轻松，那就是我们坐在鱼竿面前，这个过程中我们什么也不做，双手一直把着鱼竿，就静静的等着鱼儿咬钩。一旦手上感受到鱼的力道，就把鱼钓起来放入鱼篓中。然后再钓下一条鱼。<br />映射到Linux操作系统中，这就是一种最简单的IO模型，即阻塞IO。 阻塞 I/O 是最简单的 I/O 模型，一般表现为进程或线程等待某个条件，如果条件不满足，则一直等下去。条件满足，则进行下一步操作。</p><p><br /></p><p>应用进程通过系统调用 <code>recvfrom</code> 接收数据，但由于内核还未准备好数据报，应用进程就会阻塞住，直到内核准备好数据报，<code>recvfrom</code> 完成数据报复制工作，应用进程才能结束阻塞状态。<br />这种钓鱼方式相对来说比较简单，对于钓鱼的人来说，不需要什么特制的鱼竿，拿一根够长的木棍就可以悠闲的开始钓鱼了（实现简单）。缺点就是比较耗费时间，比较适合那种对鱼的需求量小的情况（并发低，时效性要求低）。<br /><img src=\"https://cdn.nlark.com/yuque/18/2019/png/160921/1547631050178-3fbc6593-9829-4ed5-9644-7683df9b22a0.png#align=left&amp;display=inline&amp;height=305&amp;linkTarget=_blank&amp;name=image.png&amp;originHeight=338&amp;originWidth=621&amp;size=58684&amp;width=561#alt=image.png\" style=\"max-width: 600px;\" /></p><p><br /></p><h3 id=\"4090cb84\">非阻塞IO模型</h3><p><br /></p><p>我们钓鱼的时候，在等待鱼儿咬钩的过程中，我们可以做点别的事情，比如玩一把王者荣耀、看一集《延禧攻略》等等。但是，我们要时不时的去看一下鱼竿，一旦发现有鱼儿上钩了，就把鱼钓上来。<br />映射到Linux操作系统中，这就是非阻塞的IO模型。应用进程与内核交互，目的未达到之前，不再一味的等着，而是直接返回。然后通过轮询的方式，不停的去问内核数据准备有没有准备好。如果某一次轮询发现数据已经准备好了，那就把数据拷贝到用户空间中。</p><p><br /></p><p>应用进程通过 <code>recvfrom</code> 调用不停的去和内核交互，直到内核准备好数据。如果没有准备好，内核会返回<code>error</code>，应用进程在得到<code>error</code>后，过一段时间再发送<code>recvfrom</code>请求。在两次发送请求的时间段，进程可以先做别的事情。<br />这种方式钓鱼，和阻塞IO比，所使用的工具没有什么变化，但是钓鱼的时候可以做些其他事情，增加时间的利用率。<br /><img src=\"https://cdn.nlark.com/yuque/18/2019/png/160921/1547631026635-a675f09e-b8cd-426e-8b72-01b69e7066b0.png#align=left&amp;display=inline&amp;height=312&amp;linkTarget=_blank&amp;name=image.png&amp;originHeight=374&amp;originWidth=702&amp;size=101545&amp;width=585#alt=image.png\" style=\"max-width: 600px;\" /><br /><br /></p><p><br /></p><h3 id=\"6b7a84da\">信号驱动IO模型</h3><p><br /></p><p>我们钓鱼的时候，为了避免自己一遍一遍的去查看鱼竿，我们可以给鱼竿安装一个报警器。当有鱼儿咬钩的时候立刻报警。然后我们再收到报警后，去把鱼钓起来。<br />映射到Linux操作系统中，这就是信号驱动IO。应用进程在读取文件时通知内核，如果某个 socket 的某个事件发生时，请向我发一个信号。在收到信号后，信号对应的处理函数会进行后续处理。<br /><br />应用进程预先向内核注册一个信号处理函数，然后用户进程返回，并且不阻塞，当内核数据准备就绪时会发送一个信号给进程，用户进程便在信号处理函数中开始把数据拷贝的用户空间中。<br />这种方式钓鱼，和前几种相比，所使用的工具有了一些变化，需要有一些定制（实现复杂）。但是钓鱼的人就可以在鱼儿咬钩之前彻底做别的事儿去了。等着报警器响就行了。<br /><img src=\"https://cdn.nlark.com/yuque/18/2019/png/160921/1547631002027-13f3fa45-c8a8-485c-8331-0d3d633eedc0.png#align=left&amp;display=inline&amp;height=320&amp;linkTarget=_blank&amp;name=image.png&amp;originHeight=391&amp;originWidth=710&amp;size=85909&amp;width=579#alt=image.png\" style=\"max-width: 600px;\" /><br /><br /></p><p><br /></p><h3 id=\"ba83054e\">IO复用模型</h3><p><br /></p><p>我们钓鱼的时候，为了保证可以最短的时间钓到最多的鱼，我们同一时间摆放多个鱼竿，同时钓鱼。然后哪个鱼竿有鱼儿咬钩了，我们就把哪个鱼竿上面的鱼钓起来。<br />映射到Linux操作系统中，这就是IO复用模型。多个进程的IO可以注册到同一个管道上，这个管道会统一和内核进行交互。当管道中的某一个请求需要的数据准备好之后，进程再把对应的数据拷贝到用户空间中。<br /><br />IO多路转接是多了一个<code>select</code>函数，多个进程的IO可以注册到同一个<code>select</code>上，当用户进程调用该<code>select</code>，<code>select</code>会监听所有注册好的IO，如果所有被监听的IO需要的数据都没有准备好时，<code>select</code>调用进程会阻塞。当任意一个IO所需的数据准备好之后，<code>select</code>调用就会返回，然后进程在通过<code>recvfrom</code>来进行数据拷贝。<br />**这里的IO复用模型，并没有向内核注册信号处理函数，所以，他并不是非阻塞的。**进程在发出<code>select</code>后，要等到<code>select</code>监听的所有IO操作中至少有一个需要的数据准备好，才会有返回，并且也需要再次发送请求去进行文件的拷贝。<br />这种方式的钓鱼，通过增加鱼竿的方式，可以有效的提升效率。<br /><img src=\"https://cdn.nlark.com/yuque/18/2019/png/160921/1547630980222-495b3752-9566-4785-8ef3-d299ec1ae72c.png#align=left&amp;display=inline&amp;height=302&amp;linkTarget=_blank&amp;name=image.png&amp;originHeight=373&amp;originWidth=710&amp;size=103126&amp;width=573#alt=image.png\" style=\"max-width: 600px;\" /></p><p><br /></p><h3 id=\"cce95bbd\">为什么以上四种都是同步的</h3><p><br /></p><p>我们说阻塞IO模型、非阻塞IO模型、IO复用模型和信号驱动IO模型都是同步的IO模型。原因是因为，无论以上那种模型，真正的数据拷贝过程，都是同步进行的。<br /><strong>信号驱动难道不是异步的么？</strong> 信号驱动，内核是在数据准备好之后通知进程，然后进程再通过<code>recvfrom</code>操作进行数据拷贝。我们可以认为数据准备阶段是异步的，但是，数据拷贝操作是同步的。所以，整个IO过程也不能认为是异步的。<br /><br /><br />我们把钓鱼过程，可以拆分为两个步骤：1、鱼咬钩（数据准备）。2、把鱼钓起来放进鱼篓里（数据拷贝）。无论以上提到的哪种钓鱼方式，在第二步，都是需要人主动去做的，并不是鱼竿自己完成的。所以，这个钓鱼过程其实还是同步进行的。<br /></p><p><br /></p><p>烧水的报警器一响，整个烧水过程就完成了。水已经是开水了。<br />钓鱼的报警器一响，只能说明鱼儿已经咬钩了，但是还没有真正的钓上来。<br /><br />所以 ，使用带有报警器的水壶烧水，烧水过程是异步的。<br />而使用带有报警器的鱼竿钓鱼，钓鱼的过程还是同步的。</p><p><br /></p><h3 id=\"7fc2d09a\"><br />异步IO模型</h3><p><br /></p><p>我们钓鱼的时候，采用一种高科技钓鱼竿，即全自动钓鱼竿。可以自动感应鱼上钩，自动收竿，更厉害的可以自动把鱼放进鱼篓里。然后，通知我们鱼已经钓到了，他就继续去钓下一条鱼去了。<br />映射到Linux操作系统中，这就是异步IO模型。应用进程把IO请求传给内核后，完全由内核去操作文件拷贝。内核完成相关操作后，会发信号告诉应用进程本次IO已经完成。<br /><br />用户进程发起<code>aio_read</code>操作之后，给内核传递描述符、缓冲区指针、缓冲区大小等，告诉内核当整个操作完成时，如何通知进程，然后就立刻去做其他事情了。当内核收到<code>aio_read</code>后，会立刻返回，然后内核开始等待数据准备，数据准备好以后，直接把数据拷贝到用户控件，然后再通知进程本次IO已经完成。<br />这种方式的钓鱼，无疑是最省事儿的。啥都不需要管，只需要交给鱼竿就可以了。<br /><img src=\"https://cdn.nlark.com/yuque/18/2019/png/160921/1547630948762-d55b7c4d-5d9d-456f-83b1-71e1f221a3f6.png#align=left&amp;display=inline&amp;height=335&amp;linkTarget=_blank&amp;name=image.png&amp;originHeight=420&amp;originWidth=697&amp;size=70068&amp;width=556#alt=image.png\" style=\"max-width: 600px;\" /></p><p><br /></p><h3 id=\"bef5c8b5\">5种IO模型对比</h3><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/18/2019/png/160921/1547630915753-b20ea786-09a3-4f5c-a91f-77fabf109343.png#align=left&amp;display=inline&amp;height=271&amp;linkTarget=_blank&amp;name=image.png&amp;originHeight=541&amp;originWidth=1080&amp;size=199212&amp;width=540#alt=image.png\" style=\"max-width: 600px;\" /><br /><br />\n作者：漫话编程_公众号mhcoding<br />链接：<a href=\"https://juejin.im/post/5b94e93b5188255c672e901e\" target=\"_blank\">https://juejin.im/post/5b94e93b5188255c672e901e</a><br />来源：掘金<br />著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>",
    "body_lake": "<!doctype lake><p>在Linux(UNIX)操作系统中，共有五种IO模型，分别是：<br /><strong>阻塞IO模型</strong>非阻塞IO模型<strong>IO复用模型</strong>信号驱动IO模型<strong>异步IO模型</strong>。</p><p><br /></p><h3 id=\"ae5a94ab\">到底什么是IO</h3><p><br /></p><p>我们常说的IO，指的是文件的输入和输出，但是在操作系统层面是如何定义IO的呢？到底什么样的过程可以叫做是一次IO呢？<br />拿一次磁盘文件读取为例，我们要读取的文件是存储在磁盘上的，我们的目的是把它读取到内存中。可以把这个步骤简化成把数据从硬件（硬盘）中读取到用户空间中。<br />其实真正的文件读取还涉及到缓存等细节，这里就不展开讲述了。关于用户空间、内核空间以及硬件等的关系如果读者不理解的话，可以通过钓鱼的例子理解。<br />钓鱼的时候，刚开始鱼是在鱼塘里面的，我们的钓鱼动作的最终结束标志是鱼从鱼塘中被我们钓上来，放入鱼篓中。<br />这里面的鱼塘就可以映射成磁盘，中间过渡的鱼钩可以映射成内核空间，最终放鱼的鱼篓可以映射成用户空间。一次完整的钓鱼（IO）操作，是鱼（文件）从鱼塘（硬盘）中转移（拷贝）到鱼篓（用户空间）的过程。</p><p><br /></p><h3 id=\"0f2858c7\">阻塞IO模型</h3><p><br /></p><p>我们钓鱼的时候，有一种方式比较惬意，比较轻松，那就是我们坐在鱼竿面前，这个过程中我们什么也不做，双手一直把着鱼竿，就静静的等着鱼儿咬钩。一旦手上感受到鱼的力道，就把鱼钓起来放入鱼篓中。然后再钓下一条鱼。<br />映射到Linux操作系统中，这就是一种最简单的IO模型，即阻塞IO。 阻塞 I/O 是最简单的 I/O 模型，一般表现为进程或线程等待某个条件，如果条件不满足，则一直等下去。条件满足，则进行下一步操作。</p><p><br /></p><p>应用进程通过系统调用 <code>recvfrom</code> 接收数据，但由于内核还未准备好数据报，应用进程就会阻塞住，直到内核准备好数据报，<code>recvfrom</code> 完成数据报复制工作，应用进程才能结束阻塞状态。<br />这种钓鱼方式相对来说比较简单，对于钓鱼的人来说，不需要什么特制的鱼竿，拿一根够长的木棍就可以悠闲的开始钓鱼了（实现简单）。缺点就是比较耗费时间，比较适合那种对鱼的需求量小的情况（并发低，时效性要求低）。<br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fpng%2F160921%2F1547631050178-3fbc6593-9829-4ed5-9644-7683df9b22a0.png%23align%3Dleft%26display%3Dinline%26height%3D305%26linkTarget%3D_blank%26name%3Dimage.png%26originHeight%3D338%26originWidth%3D621%26size%3D58684%26width%3D561%22%2C%22alt%22%3A%22image.png%22%7D\"></card></p><p><br /></p><h3 id=\"4090cb84\">非阻塞IO模型</h3><p><br /></p><p>我们钓鱼的时候，在等待鱼儿咬钩的过程中，我们可以做点别的事情，比如玩一把王者荣耀、看一集《延禧攻略》等等。但是，我们要时不时的去看一下鱼竿，一旦发现有鱼儿上钩了，就把鱼钓上来。<br />映射到Linux操作系统中，这就是非阻塞的IO模型。应用进程与内核交互，目的未达到之前，不再一味的等着，而是直接返回。然后通过轮询的方式，不停的去问内核数据准备有没有准备好。如果某一次轮询发现数据已经准备好了，那就把数据拷贝到用户空间中。</p><p><br /></p><p>应用进程通过 <code>recvfrom</code> 调用不停的去和内核交互，直到内核准备好数据。如果没有准备好，内核会返回<code>error</code>，应用进程在得到<code>error</code>后，过一段时间再发送<code>recvfrom</code>请求。在两次发送请求的时间段，进程可以先做别的事情。<br />这种方式钓鱼，和阻塞IO比，所使用的工具没有什么变化，但是钓鱼的时候可以做些其他事情，增加时间的利用率。<br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fpng%2F160921%2F1547631026635-a675f09e-b8cd-426e-8b72-01b69e7066b0.png%23align%3Dleft%26display%3Dinline%26height%3D312%26linkTarget%3D_blank%26name%3Dimage.png%26originHeight%3D374%26originWidth%3D702%26size%3D101545%26width%3D585%22%2C%22alt%22%3A%22image.png%22%7D\"></card><br /><br /></p><p><br /></p><h3 id=\"6b7a84da\">信号驱动IO模型</h3><p><br /></p><p>我们钓鱼的时候，为了避免自己一遍一遍的去查看鱼竿，我们可以给鱼竿安装一个报警器。当有鱼儿咬钩的时候立刻报警。然后我们再收到报警后，去把鱼钓起来。<br />映射到Linux操作系统中，这就是信号驱动IO。应用进程在读取文件时通知内核，如果某个 socket 的某个事件发生时，请向我发一个信号。在收到信号后，信号对应的处理函数会进行后续处理。<br /><br />应用进程预先向内核注册一个信号处理函数，然后用户进程返回，并且不阻塞，当内核数据准备就绪时会发送一个信号给进程，用户进程便在信号处理函数中开始把数据拷贝的用户空间中。<br />这种方式钓鱼，和前几种相比，所使用的工具有了一些变化，需要有一些定制（实现复杂）。但是钓鱼的人就可以在鱼儿咬钩之前彻底做别的事儿去了。等着报警器响就行了。<br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fpng%2F160921%2F1547631002027-13f3fa45-c8a8-485c-8331-0d3d633eedc0.png%23align%3Dleft%26display%3Dinline%26height%3D320%26linkTarget%3D_blank%26name%3Dimage.png%26originHeight%3D391%26originWidth%3D710%26size%3D85909%26width%3D579%22%2C%22alt%22%3A%22image.png%22%7D\"></card><br /><br /></p><p><br /></p><h3 id=\"ba83054e\">IO复用模型</h3><p><br /></p><p>我们钓鱼的时候，为了保证可以最短的时间钓到最多的鱼，我们同一时间摆放多个鱼竿，同时钓鱼。然后哪个鱼竿有鱼儿咬钩了，我们就把哪个鱼竿上面的鱼钓起来。<br />映射到Linux操作系统中，这就是IO复用模型。多个进程的IO可以注册到同一个管道上，这个管道会统一和内核进行交互。当管道中的某一个请求需要的数据准备好之后，进程再把对应的数据拷贝到用户空间中。<br /><br />IO多路转接是多了一个<code>select</code>函数，多个进程的IO可以注册到同一个<code>select</code>上，当用户进程调用该<code>select</code>，<code>select</code>会监听所有注册好的IO，如果所有被监听的IO需要的数据都没有准备好时，<code>select</code>调用进程会阻塞。当任意一个IO所需的数据准备好之后，<code>select</code>调用就会返回，然后进程在通过<code>recvfrom</code>来进行数据拷贝。<br />**这里的IO复用模型，并没有向内核注册信号处理函数，所以，他并不是非阻塞的。**进程在发出<code>select</code>后，要等到<code>select</code>监听的所有IO操作中至少有一个需要的数据准备好，才会有返回，并且也需要再次发送请求去进行文件的拷贝。<br />这种方式的钓鱼，通过增加鱼竿的方式，可以有效的提升效率。<br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fpng%2F160921%2F1547630980222-495b3752-9566-4785-8ef3-d299ec1ae72c.png%23align%3Dleft%26display%3Dinline%26height%3D302%26linkTarget%3D_blank%26name%3Dimage.png%26originHeight%3D373%26originWidth%3D710%26size%3D103126%26width%3D573%22%2C%22alt%22%3A%22image.png%22%7D\"></card></p><p><br /></p><h3 id=\"cce95bbd\">为什么以上四种都是同步的</h3><p><br /></p><p>我们说阻塞IO模型、非阻塞IO模型、IO复用模型和信号驱动IO模型都是同步的IO模型。原因是因为，无论以上那种模型，真正的数据拷贝过程，都是同步进行的。<br /><strong>信号驱动难道不是异步的么？</strong> 信号驱动，内核是在数据准备好之后通知进程，然后进程再通过<code>recvfrom</code>操作进行数据拷贝。我们可以认为数据准备阶段是异步的，但是，数据拷贝操作是同步的。所以，整个IO过程也不能认为是异步的。<br /><br /><br />我们把钓鱼过程，可以拆分为两个步骤：1、鱼咬钩（数据准备）。2、把鱼钓起来放进鱼篓里（数据拷贝）。无论以上提到的哪种钓鱼方式，在第二步，都是需要人主动去做的，并不是鱼竿自己完成的。所以，这个钓鱼过程其实还是同步进行的。<br /></p><p><br /></p><p>烧水的报警器一响，整个烧水过程就完成了。水已经是开水了。<br />钓鱼的报警器一响，只能说明鱼儿已经咬钩了，但是还没有真正的钓上来。<br /><br />所以 ，使用带有报警器的水壶烧水，烧水过程是异步的。<br />而使用带有报警器的鱼竿钓鱼，钓鱼的过程还是同步的。</p><p><br /></p><h3 id=\"7fc2d09a\"><br />异步IO模型</h3><p><br /></p><p>我们钓鱼的时候，采用一种高科技钓鱼竿，即全自动钓鱼竿。可以自动感应鱼上钩，自动收竿，更厉害的可以自动把鱼放进鱼篓里。然后，通知我们鱼已经钓到了，他就继续去钓下一条鱼去了。<br />映射到Linux操作系统中，这就是异步IO模型。应用进程把IO请求传给内核后，完全由内核去操作文件拷贝。内核完成相关操作后，会发信号告诉应用进程本次IO已经完成。<br /><br />用户进程发起<code>aio_read</code>操作之后，给内核传递描述符、缓冲区指针、缓冲区大小等，告诉内核当整个操作完成时，如何通知进程，然后就立刻去做其他事情了。当内核收到<code>aio_read</code>后，会立刻返回，然后内核开始等待数据准备，数据准备好以后，直接把数据拷贝到用户控件，然后再通知进程本次IO已经完成。<br />这种方式的钓鱼，无疑是最省事儿的。啥都不需要管，只需要交给鱼竿就可以了。<br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fpng%2F160921%2F1547630948762-d55b7c4d-5d9d-456f-83b1-71e1f221a3f6.png%23align%3Dleft%26display%3Dinline%26height%3D335%26linkTarget%3D_blank%26name%3Dimage.png%26originHeight%3D420%26originWidth%3D697%26size%3D70068%26width%3D556%22%2C%22alt%22%3A%22image.png%22%7D\"></card></p><p><br /></p><h3 id=\"bef5c8b5\">5种IO模型对比</h3><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fpng%2F160921%2F1547630915753-b20ea786-09a3-4f5c-a91f-77fabf109343.png%23align%3Dleft%26display%3Dinline%26height%3D271%26linkTarget%3D_blank%26name%3Dimage.png%26originHeight%3D541%26originWidth%3D1080%26size%3D199212%26width%3D540%22%2C%22alt%22%3A%22image.png%22%7D\"></card><br /><br />\n作者：漫话编程_公众号mhcoding<br />链接：<a href=\"https://juejin.im/post/5b94e93b5188255c672e901e\" target=\"_blank\">https://juejin.im/post/5b94e93b5188255c672e901e</a><br />来源：掘金<br />著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T03:35:44.000Z",
    "deleted_at": null,
    "created_at": "2019-01-22T03:35:36.000Z",
    "updated_at": "2019-05-23T07:23:12.000Z",
    "published_at": "2019-01-22T03:35:44.000Z",
    "first_published_at": "2019-01-22T03:35:44.000Z",
    "word_count": 2411,
    "cover": "",
    "description": "在Linux(UNIX)操作系统中，共有五种IO模型，分别是：阻塞IO模型非阻塞IO模型IO复用模型信号驱动IO模型异步IO模型。到底什么是IO我们常说的IO，指的是文件的输入和输出，但是在操作系统层面是如何定义IO的呢？到底什么样的过程可以叫做是一次IO呢？拿一次磁盘文件读取为例，我们要读取...",
    "custom_description": "在Linux(UNIX)操作系统中，共有五种IO模型，分别是：阻塞IO模型非阻塞IO模型IO复用模型信号驱动IO模型异步IO模型。到底什么是IO我们常说的IO，指的是文件的输入和输出，但是在操作系统层面是如何定义IO的呢？到底什么样的过程可以叫做是一次IO呢？拿一次磁盘文件读取为例，我们要读取...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1171213,
    "slug": "ylqo2u",
    "title": "同步、异步、阻塞、非阻塞",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"c69714e1\"></a>\n### 什么是同步和异步\n\n说到烧水，我们都是通过热水壶来烧水的。在很久之前，科技还没有这么发达的时候，如果我们要烧水，需要把水壶放到火炉上，我们通过观察水壶内的水的沸腾程度来判断水有没有烧开。<br />随着科技的发展，现在市面上的水壶都有了提醒功能，当我们把水壶插电之后，水壶水烧开之后会通过声音提醒我们水开了。<br />对于烧水这件事儿来说，传统水壶的烧水就是同步的，高科技水壶的烧水就是异步的。<br />**同步请求**，A调用B，B的处理是同步的，在处理完之前他不会通知A，只有处理完之后才会明确的通知A。<br />**异步请求**，A调用B，B的处理是异步的，B在接到请求后先告诉A我已经接到请求了，然后异步去处理，处理完之后通过回调等方式再通知A。<br />所以说，同步和异步最大的区别就是被调用方的执行方式和返回时机。同步指的是被调用方做完事情之后再返回，异步指的是被调用方先返回，然后再做事情，做完之后再想办法通知调用方。\n\n<a name=\"03d51ecf\"></a>\n### 什么是阻塞和非阻塞\n\n还是那个烧水的例子，当你把水放到水壶里面，按下开关后，你可以坐在水壶前面，别的事情什么都不做，一直等着水烧好。你还可以先去客厅看电视，等着水开就好了。<br />对于你来说，坐在水壶前面等就是阻塞的，去客厅看电视等着水开就是非阻塞的。<br />**阻塞请求**，A调用B，A一直等着B的返回，别的事情什么也不干。<br />**非阻塞请求**，A调用B，A不用一直等着B的返回，先去忙别的事情了。<br />所以说，阻塞和非阻塞最大的区别就是在被调用方返回结果之前的这段时间内，调用方是否一直等待。阻塞指的是调用方一直等待别的事情什么都不做。非阻塞指的是调用方先去忙别的事情。\n\n<a name=\"31012f88\"></a>\n### 阻塞、非阻塞和同步、异步的区别\n\n首先，前面已经提到过，阻塞、非阻塞和同步、异步其实针对的对象是不一样的。**阻塞、非阻塞说的是调用者，同步、异步说的是被调用者**。<br />有人认为阻塞和同步是一回事儿，非阻塞和异步是一回事。但是这是不对的。<br />**先来看同步场景中是如何包含阻塞和非阻塞情况的。**<br />我们是用传统的水壶烧水。在水烧开之前我们一直做在水壶前面，等着水开。这就是阻塞的。<br />我们是用传统的水壶烧水。在水烧开之前我们先去客厅看电视了，但是水壶不会主动通知我们，需要我们时不时的去厨房看一下水有没有烧开。这就是非阻塞的。<br />**再来看异步场景中是如何包含阻塞和非阻塞情况的。**<br />我们是用带有提醒功能的水壶烧水。在水烧发出提醒之前我们一直做在水壶前面，等着水开。这就是阻塞的。<br />我们是用带有提醒功能的水壶烧水。在水烧发出提醒之前我们先去客厅看电视了，等水壶发出声音提醒我们。这就是非阻塞的。\n\n<a name=\"c3160154\"></a>\n### Java中的三种IO模型\n\n在Java语言中，一共提供了三种IO模型，分别是阻塞IO（BIO）、非阻塞IO（NIO）、异步IO（AIO）。<br />这里面的BIO和NIO都是同步的IO模型，即同步阻塞IO和同步非阻塞IO，异步IO指的是异步非阻塞IO。<br />**BIO （Blocking I/O）**：同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。<br />**NIO （New I/O）**：同时支持阻塞与非阻塞模式，但主要是使用同步非阻塞IO。<br />**AIO （Asynchronous I/O）**：异步非阻塞I/O模型。\n\n作者：漫话编程_公众号mhcoding<br />链接：[https://juejin.im/post/5b94e2995188255c5c45d0ec](https://juejin.im/post/5b94e2995188255c5c45d0ec)<br />来源：掘金<br />著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n",
    "body_draft": "",
    "body_html": "<h3 id=\"c69714e1\">什么是同步和异步</h3><p><br /></p><p>说到烧水，我们都是通过热水壶来烧水的。在很久之前，科技还没有这么发达的时候，如果我们要烧水，需要把水壶放到火炉上，我们通过观察水壶内的水的沸腾程度来判断水有没有烧开。<br />随着科技的发展，现在市面上的水壶都有了提醒功能，当我们把水壶插电之后，水壶水烧开之后会通过声音提醒我们水开了。<br />对于烧水这件事儿来说，传统水壶的烧水就是同步的，高科技水壶的烧水就是异步的。<br /><strong>同步请求</strong>，A调用B，B的处理是同步的，在处理完之前他不会通知A，只有处理完之后才会明确的通知A。<br /><strong>异步请求</strong>，A调用B，B的处理是异步的，B在接到请求后先告诉A我已经接到请求了，然后异步去处理，处理完之后通过回调等方式再通知A。<br />所以说，同步和异步最大的区别就是被调用方的执行方式和返回时机。同步指的是被调用方做完事情之后再返回，异步指的是被调用方先返回，然后再做事情，做完之后再想办法通知调用方。</p><p><br /></p><h3 id=\"03d51ecf\">什么是阻塞和非阻塞</h3><p><br /></p><p>还是那个烧水的例子，当你把水放到水壶里面，按下开关后，你可以坐在水壶前面，别的事情什么都不做，一直等着水烧好。你还可以先去客厅看电视，等着水开就好了。<br />对于你来说，坐在水壶前面等就是阻塞的，去客厅看电视等着水开就是非阻塞的。<br /><strong>阻塞请求</strong>，A调用B，A一直等着B的返回，别的事情什么也不干。<br /><strong>非阻塞请求</strong>，A调用B，A不用一直等着B的返回，先去忙别的事情了。<br />所以说，阻塞和非阻塞最大的区别就是在被调用方返回结果之前的这段时间内，调用方是否一直等待。阻塞指的是调用方一直等待别的事情什么都不做。非阻塞指的是调用方先去忙别的事情。</p><p><br /></p><h3 id=\"31012f88\">阻塞、非阻塞和同步、异步的区别</h3><p><br /></p><p>首先，前面已经提到过，阻塞、非阻塞和同步、异步其实针对的对象是不一样的。<strong>阻塞、非阻塞说的是调用者，同步、异步说的是被调用者</strong>。<br />有人认为阻塞和同步是一回事儿，非阻塞和异步是一回事。但是这是不对的。<br /><strong>先来看同步场景中是如何包含阻塞和非阻塞情况的。</strong><br />我们是用传统的水壶烧水。在水烧开之前我们一直做在水壶前面，等着水开。这就是阻塞的。<br />我们是用传统的水壶烧水。在水烧开之前我们先去客厅看电视了，但是水壶不会主动通知我们，需要我们时不时的去厨房看一下水有没有烧开。这就是非阻塞的。<br /><strong>再来看异步场景中是如何包含阻塞和非阻塞情况的。</strong><br />我们是用带有提醒功能的水壶烧水。在水烧发出提醒之前我们一直做在水壶前面，等着水开。这就是阻塞的。<br />我们是用带有提醒功能的水壶烧水。在水烧发出提醒之前我们先去客厅看电视了，等水壶发出声音提醒我们。这就是非阻塞的。</p><p><br /></p><h3 id=\"c3160154\">Java中的三种IO模型</h3><p><br /></p><p>在Java语言中，一共提供了三种IO模型，分别是阻塞IO（BIO）、非阻塞IO（NIO）、异步IO（AIO）。<br />这里面的BIO和NIO都是同步的IO模型，即同步阻塞IO和同步非阻塞IO，异步IO指的是异步非阻塞IO。<br /><strong>BIO （Blocking I/O）</strong>：同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。<br /><strong>NIO （New I/O）</strong>：同时支持阻塞与非阻塞模式，但主要是使用同步非阻塞IO。<br /><strong>AIO （Asynchronous I/O）</strong>：异步非阻塞I/O模型。</p><p><br /></p><p>作者：漫话编程_公众号mhcoding<br />链接：<a href=\"https://juejin.im/post/5b94e2995188255c5c45d0ec\" target=\"_blank\">https://juejin.im/post/5b94e2995188255c5c45d0ec</a><br />来源：掘金<br />著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>",
    "body_lake": "<!doctype lake><h3 id=\"c69714e1\">什么是同步和异步</h3><p><br /></p><p>说到烧水，我们都是通过热水壶来烧水的。在很久之前，科技还没有这么发达的时候，如果我们要烧水，需要把水壶放到火炉上，我们通过观察水壶内的水的沸腾程度来判断水有没有烧开。<br />随着科技的发展，现在市面上的水壶都有了提醒功能，当我们把水壶插电之后，水壶水烧开之后会通过声音提醒我们水开了。<br />对于烧水这件事儿来说，传统水壶的烧水就是同步的，高科技水壶的烧水就是异步的。<br /><strong>同步请求</strong>，A调用B，B的处理是同步的，在处理完之前他不会通知A，只有处理完之后才会明确的通知A。<br /><strong>异步请求</strong>，A调用B，B的处理是异步的，B在接到请求后先告诉A我已经接到请求了，然后异步去处理，处理完之后通过回调等方式再通知A。<br />所以说，同步和异步最大的区别就是被调用方的执行方式和返回时机。同步指的是被调用方做完事情之后再返回，异步指的是被调用方先返回，然后再做事情，做完之后再想办法通知调用方。</p><p><br /></p><h3 id=\"03d51ecf\">什么是阻塞和非阻塞</h3><p><br /></p><p>还是那个烧水的例子，当你把水放到水壶里面，按下开关后，你可以坐在水壶前面，别的事情什么都不做，一直等着水烧好。你还可以先去客厅看电视，等着水开就好了。<br />对于你来说，坐在水壶前面等就是阻塞的，去客厅看电视等着水开就是非阻塞的。<br /><strong>阻塞请求</strong>，A调用B，A一直等着B的返回，别的事情什么也不干。<br /><strong>非阻塞请求</strong>，A调用B，A不用一直等着B的返回，先去忙别的事情了。<br />所以说，阻塞和非阻塞最大的区别就是在被调用方返回结果之前的这段时间内，调用方是否一直等待。阻塞指的是调用方一直等待别的事情什么都不做。非阻塞指的是调用方先去忙别的事情。</p><p><br /></p><h3 id=\"31012f88\">阻塞、非阻塞和同步、异步的区别</h3><p><br /></p><p>首先，前面已经提到过，阻塞、非阻塞和同步、异步其实针对的对象是不一样的。<strong>阻塞、非阻塞说的是调用者，同步、异步说的是被调用者</strong>。<br />有人认为阻塞和同步是一回事儿，非阻塞和异步是一回事。但是这是不对的。<br /><strong>先来看同步场景中是如何包含阻塞和非阻塞情况的。</strong><br />我们是用传统的水壶烧水。在水烧开之前我们一直做在水壶前面，等着水开。这就是阻塞的。<br />我们是用传统的水壶烧水。在水烧开之前我们先去客厅看电视了，但是水壶不会主动通知我们，需要我们时不时的去厨房看一下水有没有烧开。这就是非阻塞的。<br /><strong>再来看异步场景中是如何包含阻塞和非阻塞情况的。</strong><br />我们是用带有提醒功能的水壶烧水。在水烧发出提醒之前我们一直做在水壶前面，等着水开。这就是阻塞的。<br />我们是用带有提醒功能的水壶烧水。在水烧发出提醒之前我们先去客厅看电视了，等水壶发出声音提醒我们。这就是非阻塞的。</p><p><br /></p><h3 id=\"c3160154\">Java中的三种IO模型</h3><p><br /></p><p>在Java语言中，一共提供了三种IO模型，分别是阻塞IO（BIO）、非阻塞IO（NIO）、异步IO（AIO）。<br />这里面的BIO和NIO都是同步的IO模型，即同步阻塞IO和同步非阻塞IO，异步IO指的是异步非阻塞IO。<br /><strong>BIO （Blocking I/O）</strong>：同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。<br /><strong>NIO （New I/O）</strong>：同时支持阻塞与非阻塞模式，但主要是使用同步非阻塞IO。<br /><strong>AIO （Asynchronous I/O）</strong>：异步非阻塞I/O模型。</p><p><br /></p><p>作者：漫话编程_公众号mhcoding<br />链接：<a href=\"https://juejin.im/post/5b94e2995188255c5c45d0ec\" target=\"_blank\">https://juejin.im/post/5b94e2995188255c5c45d0ec</a><br />来源：掘金<br />著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T03:34:59.000Z",
    "deleted_at": null,
    "created_at": "2019-01-22T03:34:51.000Z",
    "updated_at": "2019-01-22T03:34:59.000Z",
    "published_at": "2019-01-22T03:34:59.000Z",
    "first_published_at": "2019-01-22T03:34:59.000Z",
    "word_count": 1137,
    "cover": "",
    "description": "什么是同步和异步说到烧水，我们都是通过热水壶来烧水的。在很久之前，科技还没有这么发达的时候，如果我们要烧水，需要把水壶放到火炉上，我们通过观察水壶内的水的沸腾程度来判断水有没有烧开。随着科技的发展，现在市面上的水壶都有了提醒功能，当我们把水壶插电之后，水壶水烧开之后会通过声音提醒我们水开了。对...",
    "custom_description": "什么是同步和异步说到烧水，我们都是通过热水壶来烧水的。在很久之前，科技还没有这么发达的时候，如果我们要烧水，需要把水壶放到火炉上，我们通过观察水壶内的水的沸腾程度来判断水有没有烧开。随着科技的发展，现在市面上的水壶都有了提醒功能，当我们把水壶插电之后，水壶水烧开之后会通过声音提醒我们水开了。对...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1171209,
    "slug": "zuu7gs",
    "title": "BAT 经典算法笔试题 —— 磁盘多路归并排序",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [https://juejin.im/post/5c3fe473f265da615c5980de](https://juejin.im/post/5c3fe473f265da615c5980de)\n\n\n\n在 LevelDB 数据库中高层数据下沉到低层时需要经历一次 Major Compaction，将高层文件的有序键值对和低层文件的多个有序键值对进行归并排序。磁盘多路归并排序算法的输入是来自多个磁盘文件的有序键值对，在内存中将这些文件的键值对进行排序，然后输出到一到多个新的磁盘文件中。\n\n![](https://user-gold-cdn.xitu.io/2019/1/17/1685994296d730e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=)\n\n多路归并排序在大数据领域也是常用的算法，常用于海量数据排序。当数据量特别大时，这些数据无法被单个机器内存容纳，它需要被切分位多个集合分别由不同的机器进行内存排序（map 过程），然后再进行多路归并算法将来自多个不同机器的数据进行排序（reduce 过程），这是流式多路归并排序，为什么说是流式排序呢，因为数据源来源于网络套接字。\n\n![](https://user-gold-cdn.xitu.io/2019/1/17/16859942908a6035?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=)\n\n多路归并排序的优势在于内存消耗极低，它的内存占用和输入文件的数量成正比，和数据总量无关，数据总量只会线性正比影响排序的时间。\n\n下面我们来亲自实现一下磁盘多路归并算法，为什么是磁盘，因为它的输入来自磁盘文件。\n\n<a name=\"71add235\"></a>\n## 算法思路\n\n我们需要在内存里维护一个有序数组。每个输入文件当前最小的元素作为一个元素放在数组里。数组按照元素的大小保持排序状态。\n\n![](https://user-gold-cdn.xitu.io/2019/1/17/1685994285919537?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=)\n\n接下来我们开始进入循环，循环的逻辑总是从最小的元素下手，在其所在的文件取出下一个元素，和当前数组中的元素进行比较。根据比较结果进行不同的处理，这里我们使用二分查找算法进行快速比较。注意每个输入文件里面的元素都是有序的。\n\n1. 如果取出来的元素和当前数组中的最小元素相等，那么就可以直接将这个元素输出。再继续下一轮循环。不可能取出比当前数组最小元素还要小的元素，因为输入文件本身也是有序的。\n\n![](https://user-gold-cdn.xitu.io/2019/1/17/168599428a394d82?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=)\n\n1. 否则就需要将元素插入到当前的数组中的指定位置，继续保持数组有序。然后将数组中当前最小的元素输出并移除。再进行下一轮循环。\n\n![](https://user-gold-cdn.xitu.io/2019/1/17/1685994286796823?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=) 3. 如果遇到文件结尾，那就无法继续调用 next() 方法了，这时可以直接将数组中的最小元素输出并移除，数组也跟着变小了。再进行下一轮循环。当数组空了，说明所有的文件都处理完了，算法就可以结束了。![](https://user-gold-cdn.xitu.io/2019/1/17/168599428898c463?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=) 值得注意的是，数组中永远不会存在同一个文件的两个元素，如此才保证了数组的长度不会超过输入文件的数量，同时它也不会把没有结尾的文件挤出数组导致漏排序的问题。\n\n<a name=\"0ac6e5c6\"></a>\n## 二分查找\n\n需要特别注意的是 Java 内置了二分查找算法在使用上比较精巧。\n\n```\npublic class Collections {\n  ...\n  public static <T> int binarySearch(List<T> list, T key) {\n    ...\n    if (found) {\n      return index;\n    } else {\n      return -(insertIndex+1);\n    }\n  }\n  ...\n}\n复制代码\n```\n\n如果 key 可以在 list 中找到，那就直接返回相应的位置。如果找不到，它会返回负数，还不是简单的 -1，这个负数指明了插入的位置，也就是说在这个位置插入 key，数组将可以继续保持有序。\n\n比如 binarySearch 返回了 index=-1，那么 insertIndex 就是 -(index+1)，也就是 0，插入点在数组开头。如果返回了 index=-size-1，那么 insertIndex 就是 size，是数组末尾。其它负数会插入数组中间。\n\n![](https://user-gold-cdn.xitu.io/2019/1/17/16859943cc887c0c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=)\n\n<a name=\"ef74daa2\"></a>\n## 输入文件类\n\n对于每一个输入文件都会创建一个 MergeSource 对象，它提供了 hasNext() 和 next() 方法用于判断和获取下一个元素。注意输入文件是有序的，下一个元素就是当前输入文件最小的元素。 hasNext() 方法负责读取下一行并缓存在 cachedLine 变量中，调用 next() 方法将 cachedLine 变量转换成整数并返回。\n\n```\nclass MergeSource implements Closeable {\n\tprivate BufferedReader reader;\n\tprivate String cachedLine;\n\tprivate String filename;\n\n\tpublic MergeSource(String filename) {\n\t\tthis.filename = filename;\n\t\ttry {\n            FileReader fr = new FileReader(filename);\n\t\t\tthis.reader = new BufferedReader(fr);\n\t\t} catch (FileNotFoundException e) {\n\t\t}\n\t}\n\n\tpublic boolean hasNext() {\n\t\tString line;\n\t\ttry {\n\t\t\tline = this.reader.readLine();\n\t\t\tif (line == null || line.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cachedLine = line.trim();\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic int next() {\n\t\tif (this.cachedLine == null) {\n\t\t\tif (!hasNext()) {\n\t\t\t\tthrow new IllegalStateException(\"no content\");\n\t\t\t}\n\t\t}\n\t\tint num = Integer.parseInt(this.cachedLine);\n\t\tthis.cachedLine = null;\n\t\treturn num;\n\t}\n\n\t@Override\n\tpublic void close() throws IOException {\n\t\tthis.reader.close();\n\t}\n}\n复制代码\n```\n\n<a name=\"c3bdef97\"></a>\n## 内存有序数组元素类\n\n在排序前先把这个数组准备好，将每个输入文件的最小元素放入数组，并排序。\n\n```\nclass Bin implements Comparable<Bin> {\n\tint num;\n\tMergeSource source;\n\n\tBin(MergeSource source, int num) {\n\t\tthis.source = source;\n\t\tthis.num = num;\n\t}\n\n\t@Override\n\tpublic int compareTo(Bin o) {\n\t\treturn this.num - o.num;\n\t}\n\n}\n\nList<Bin> prepare() {\n  \tList<Bin> bins = new ArrayList<>();\n\tfor (MergeSource source : sources) {\n\t\tBin newBin = new Bin(source, source.next());\n\t\tbins.add(newBin);\n\t}\n    Collections.sort(bins);\n    return bins;\n}\n复制代码\n```\n\n<a name=\"e045cb99\"></a>\n## 输出文件类\n\n关闭输出文件时注意要先 flush()，避免丢失 PrintWriter 中缓冲的内容。\n\n```\nclass MergeOut implements Closeable {\n\tprivate PrintWriter writer;\n\n\tpublic MergeOut(String filename) {\n\t\ttry {\n            FileOutputStream out = new FileOutputStream(filename);\n\t\t\tthis.writer = new PrintWriter(out);\n\t\t} catch (FileNotFoundException e) {\n\t\t}\n\t}\n\n\tpublic void write(Bin bin) {\n\t\twriter.println(bin.num);\n\t}\n\n\t@Override\n\tpublic void close() throws IOException {\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n}\n复制代码\n```\n\n<a name=\"13e490ba\"></a>\n## 准备输入文件的内容\n\n下面我们来生成一系列输入文件，每个输入文件中包含一堆随机整数。一共生成 n 个文件，每个文件的整数数量在 minEntries 到 minEntries 之间。返回所有输入文件的文件名列表。\n\n```\nList<String> generateFiles(int n, int minEntries, int maxEntries) {\n\tList<String> files = new ArrayList<>();\n\tfor (int i = 0; i < n; i++) {\n\t\tString filename = \"input-\" + i + \".txt\";\n\t\tPrintWriter writer;\n\t\ttry {\n\t\t\twriter = new PrintWriter(new FileOutputStream(filename));\n            ThreadLocalRandom rand = ThreadLocalRandom.current();\n\t\t\tint entries = rand.nextInt(minEntries, maxEntries);\n\t\t\tList<Integer> nums = new ArrayList<>();\n\t\t\tfor (int k = 0; k < entries; k++) {\n\t\t\t\tint num = rand.nextInt(10000000);\n\t\t\t\tnums.add(num);\n\t\t\t}\n\t\t\tCollections.sort(nums);\n\t\t\tfor (int num : nums) {\n\t\t\t\twriter.println(num);\n\t\t\t}\n\t\t\twriter.flush();\n\t\t\twriter.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t}\n\t\tfiles.add(filename);\n\t}\n\treturn files;\n}\n复制代码\n```\n\n<a name=\"4772f735\"></a>\n## 排序算法\n\n万事俱备，只欠东风。将上面的类都准备好之后，排序算法很简单，代码量非常少。对照上面算法思路来理解下面的算法就很容易了。\n\n```\npublic void sort() {\n\tList<Bin> bins = prepare();\n\twhile (true) {\n        // 取数组中最小的元素\n\t\tMergeSource current = bins.get(0).source;\n\t\tif (current.hasNext()) {\n            // 从输入文件中取出下一个元素\n\t\t\tBin newBin = new Bin(current, current.next());\n            // 二分查找，也就是和数组中已有元素进行比较\n\t\t\tint index = Collections.binarySearch(bins, newBin);\n\t\t\tif (index == 0) {\n                // 算法思路情况1\n\t\t\t\tthis.out.write(newBin);\n\t\t\t} else {\n                // 算法思路情况2\n\t\t\t\tif (index < 0) {\n\t\t\t\t\tindex = -(index+1）;\n\t\t\t\t}\n\t\t\t\tbins.add(index, newBin);\n\t\t\t\tBin minBin = bins.remove(0);\n\t\t\t\tthis.out.write(minBin);\n\t\t\t}\n\t\t} else {\n            // 算法思路情况3:遇到文件尾\n\t\t\tBin minBin = bins.remove(0);\n\t\t\tthis.out.write(minBin);\n\t\t\tif (bins.isEmpty()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n复制代码\n```\n\n<a name=\"9705bbf6\"></a>\n## 全部代码\n\n读者可以直接将下面的代码拷贝粘贴到 IDE 中运行。\n\n```\npackage leetcode;\n\nimport java.io.BufferedReader;\nimport java.io.Closeable;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class DiskMergeSort implements Closeable {\n\n\tpublic static List<String> generateFiles(int n, int minEntries, int maxEntries) {\n\t\tList<String> files = new ArrayList<>();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tString filename = \"input-\" + i + \".txt\";\n\t\t\tPrintWriter writer;\n\t\t\ttry {\n\t\t\t\twriter = new PrintWriter(new FileOutputStream(filename));\n\t\t\t\tint entries = ThreadLocalRandom.current().nextInt(minEntries, maxEntries);\n\t\t\t\tList<Integer> nums = new ArrayList<>();\n\t\t\t\tfor (int k = 0; k < entries; k++) {\n\t\t\t\t\tint num = ThreadLocalRandom.current().nextInt(10000000);\n\t\t\t\t\tnums.add(num);\n\t\t\t\t}\n\t\t\t\tCollections.sort(nums);\n\t\t\t\tfor (int num : nums) {\n\t\t\t\t\twriter.println(num);\n\t\t\t\t}\n\t\t\t\twriter.close();\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t}\n\t\t\tfiles.add(filename);\n\t\t}\n\t\treturn files;\n\t}\n\n\tprivate List<MergeSource> sources;\n\tprivate MergeOut out;\n\n\tpublic DiskMergeSort(List<String> files, String outFilename) {\n\t\tthis.sources = new ArrayList<>();\n\t\tfor (String filename : files) {\n\t\t\tthis.sources.add(new MergeSource(filename));\n\t\t}\n\t\tthis.out = new MergeOut(outFilename);\n\t}\n\n\tstatic class MergeOut implements Closeable {\n\t\tprivate PrintWriter writer;\n\n\t\tpublic MergeOut(String filename) {\n\t\t\ttry {\n\t\t\t\tthis.writer = new PrintWriter(new FileOutputStream(filename));\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t}\n\t\t}\n\n\t\tpublic void write(Bin bin) {\n\t\t\twriter.println(bin.num);\n\t\t}\n\n\t\t@Override\n\t\tpublic void close() throws IOException {\n\t\t\twriter.flush();\n\t\t\twriter.close();\n\t\t}\n\t}\n\n\tstatic class MergeSource implements Closeable {\n\t\tprivate BufferedReader reader;\n\t\tprivate String cachedLine;\n\n\t\tpublic MergeSource(String filename) {\n\t\t\ttry {\n\t\t\t\tFileReader fr = new FileReader(filename);\n\t\t\t\tthis.reader = new BufferedReader(fr);\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t}\n\t\t}\n\n\t\tpublic boolean hasNext() {\n\t\t\tString line;\n\t\t\ttry {\n\t\t\t\tline = this.reader.readLine();\n\t\t\t\tif (line == null || line.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.cachedLine = line.trim();\n\t\t\t\treturn true;\n\t\t\t} catch (IOException e) {\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic int next() {\n\t\t\tif (this.cachedLine == null) {\n\t\t\t\tif (!hasNext()) {\n\t\t\t\t\tthrow new IllegalStateException(\"no content\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tint num = Integer.parseInt(this.cachedLine);\n\t\t\tthis.cachedLine = null;\n\t\t\treturn num;\n\t\t}\n\n\t\t@Override\n\t\tpublic void close() throws IOException {\n\t\t\tthis.reader.close();\n\t\t}\n\t}\n\n\tstatic class Bin implements Comparable<Bin> {\n\t\tint num;\n\t\tMergeSource source;\n\n\t\tBin(MergeSource source, int num) {\n\t\t\tthis.source = source;\n\t\t\tthis.num = num;\n\t\t}\n\n\t\t@Override\n\t\tpublic int compareTo(Bin o) {\n\t\t\treturn this.num - o.num;\n\t\t}\n\t}\n\n\tpublic List<Bin> prepare() {\n\t\tList<Bin> bins = new ArrayList<>();\n\t\tfor (MergeSource source : sources) {\n\t\t\tBin newBin = new Bin(source, source.next());\n\t\t\tbins.add(newBin);\n\t\t}\n\t\tCollections.sort(bins);\n\t\treturn bins;\n\t}\n\n\tpublic void sort() {\n\t\tList<Bin> bins = prepare();\n\t\twhile (true) {\n\t\t\tMergeSource current = bins.get(0).source;\n\t\t\tif (current.hasNext()) {\n\t\t\t\tBin newBin = new Bin(current, current.next());\n\t\t\t\tint index = Collections.binarySearch(bins, newBin);\n\t\t\t\tif (index == 0 || index == -1) {\n\t\t\t\t\tthis.out.write(newBin);\n\t\t\t\t\tif (index == -1) {\n\t\t\t\t\t\tthrow new IllegalStateException(\"impossible\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (index < 0) {\n\t\t\t\t\t\tindex = -index - 1;\n\t\t\t\t\t}\n\t\t\t\t\tbins.add(index, newBin);\n\t\t\t\t\tBin minBin = bins.remove(0);\n\t\t\t\t\tthis.out.write(minBin);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tBin minBin = bins.remove(0);\n\t\t\t\tthis.out.write(minBin);\n\t\t\t\tif (bins.isEmpty()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void close() throws IOException {\n\t\tfor (MergeSource source : sources) {\n\t\t\tsource.close();\n\t\t}\n\t\tthis.out.close();\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tList<String> inputs = DiskMergeSort.generateFiles(100, 10000, 20000);\n\t\t// 运行多次看算法耗时\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tDiskMergeSort sorter = new DiskMergeSort(inputs, \"output.txt\");\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\tsorter.sort();\n\t\t\tlong duration = System.currentTimeMillis() - start;\n\t\t\tSystem.out.printf(\"%dms\\n\", duration);\n\t\t\tsorter.close();\n\t\t}\n\t}\n}\n复制代码\n```\n\n本算法还有一个小缺陷，那就是如果输入文件数量非常多，那么内存中的数组就会特别大，对数组的插入删除操作肯定会很耗时，这时可以考虑使用 TreeSet 来代替数组，读者们可以自行尝试一下。\n\n![](https://user-gold-cdn.xitu.io/2019/1/17/16859951b20ebd48?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=)\n",
    "body_draft": "",
    "body_html": "<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\" target=\"_blank\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://juejin.im/post/5c3fe473f265da615c5980de\" target=\"_blank\">https://juejin.im/post/5c3fe473f265da615c5980de</a></p>\n</blockquote><p><br /></p><p>在 LevelDB 数据库中高层数据下沉到低层时需要经历一次 Major Compaction，将高层文件的有序键值对和低层文件的多个有序键值对进行归并排序。磁盘多路归并排序算法的输入是来自多个磁盘文件的有序键值对，在内存中将这些文件的键值对进行排序，然后输出到一到多个新的磁盘文件中。</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2019/1/17/1685994296d730e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>多路归并排序在大数据领域也是常用的算法，常用于海量数据排序。当数据量特别大时，这些数据无法被单个机器内存容纳，它需要被切分位多个集合分别由不同的机器进行内存排序（map 过程），然后再进行多路归并算法将来自多个不同机器的数据进行排序（reduce 过程），这是流式多路归并排序，为什么说是流式排序呢，因为数据源来源于网络套接字。</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2019/1/17/16859942908a6035?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>多路归并排序的优势在于内存消耗极低，它的内存占用和输入文件的数量成正比，和数据总量无关，数据总量只会线性正比影响排序的时间。</p><p><br /></p><p>下面我们来亲自实现一下磁盘多路归并算法，为什么是磁盘，因为它的输入来自磁盘文件。</p><p><br /></p><h2 id=\"71add235\">算法思路</h2><p><br /></p><p>我们需要在内存里维护一个有序数组。每个输入文件当前最小的元素作为一个元素放在数组里。数组按照元素的大小保持排序状态。</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2019/1/17/1685994285919537?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>接下来我们开始进入循环，循环的逻辑总是从最小的元素下手，在其所在的文件取出下一个元素，和当前数组中的元素进行比较。根据比较结果进行不同的处理，这里我们使用二分查找算法进行快速比较。注意每个输入文件里面的元素都是有序的。</p><p><br /></p><ol start=\"1\"><li>如果取出来的元素和当前数组中的最小元素相等，那么就可以直接将这个元素输出。再继续下一轮循环。不可能取出比当前数组最小元素还要小的元素，因为输入文件本身也是有序的。</li></ol><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2019/1/17/168599428a394d82?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><ol start=\"1\"><li>否则就需要将元素插入到当前的数组中的指定位置，继续保持数组有序。然后将数组中当前最小的元素输出并移除。再进行下一轮循环。</li></ol><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2019/1/17/1685994286796823?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=\" style=\"max-width: 600px;\" /> 3. 如果遇到文件结尾，那就无法继续调用 next() 方法了，这时可以直接将数组中的最小元素输出并移除，数组也跟着变小了。再进行下一轮循环。当数组空了，说明所有的文件都处理完了，算法就可以结束了。<img src=\"https://user-gold-cdn.xitu.io/2019/1/17/168599428898c463?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=\" style=\"max-width: 600px;\" /> 值得注意的是，数组中永远不会存在同一个文件的两个元素，如此才保证了数组的长度不会超过输入文件的数量，同时它也不会把没有结尾的文件挤出数组导致漏排序的问题。</p><p><br /></p><h2 id=\"0ac6e5c6\">二分查找</h2><p><br /></p><p>需要特别注意的是 Java 内置了二分查找算法在使用上比较精巧。</p><p><br /></p><pre><code>public class Collections {\n  ...\n  public static &lt;T&gt; int binarySearch(List&lt;T&gt; list, T key) {\n    ...\n    if (found) {\n      return index;\n    } else {\n      return -(insertIndex+1);\n    }\n  }\n  ...\n}\n复制代码</code></pre><p><br /></p><p>如果 key 可以在 list 中找到，那就直接返回相应的位置。如果找不到，它会返回负数，还不是简单的 -1，这个负数指明了插入的位置，也就是说在这个位置插入 key，数组将可以继续保持有序。</p><p><br /></p><p>比如 binarySearch 返回了 index=-1，那么 insertIndex 就是 -(index+1)，也就是 0，插入点在数组开头。如果返回了 index=-size-1，那么 insertIndex 就是 size，是数组末尾。其它负数会插入数组中间。</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2019/1/17/16859943cc887c0c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><h2 id=\"ef74daa2\">输入文件类</h2><p><br /></p><p>对于每一个输入文件都会创建一个 MergeSource 对象，它提供了 hasNext() 和 next() 方法用于判断和获取下一个元素。注意输入文件是有序的，下一个元素就是当前输入文件最小的元素。 hasNext() 方法负责读取下一行并缓存在 cachedLine 变量中，调用 next() 方法将 cachedLine 变量转换成整数并返回。</p><p><br /></p><pre><code>class MergeSource implements Closeable {\n\tprivate BufferedReader reader;\n\tprivate String cachedLine;\n\tprivate String filename;\n\n\tpublic MergeSource(String filename) {\n\t\tthis.filename = filename;\n\t\ttry {\n            FileReader fr = new FileReader(filename);\n\t\t\tthis.reader = new BufferedReader(fr);\n\t\t} catch (FileNotFoundException e) {\n\t\t}\n\t}\n\n\tpublic boolean hasNext() {\n\t\tString line;\n\t\ttry {\n\t\t\tline = this.reader.readLine();\n\t\t\tif (line == null || line.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cachedLine = line.trim();\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic int next() {\n\t\tif (this.cachedLine == null) {\n\t\t\tif (!hasNext()) {\n\t\t\t\tthrow new IllegalStateException(&quot;no content&quot;);\n\t\t\t}\n\t\t}\n\t\tint num = Integer.parseInt(this.cachedLine);\n\t\tthis.cachedLine = null;\n\t\treturn num;\n\t}\n\n\t@Override\n\tpublic void close() throws IOException {\n\t\tthis.reader.close();\n\t}\n}\n复制代码</code></pre><p><br /></p><h2 id=\"c3bdef97\">内存有序数组元素类</h2><p><br /></p><p>在排序前先把这个数组准备好，将每个输入文件的最小元素放入数组，并排序。</p><p><br /></p><pre><code>class Bin implements Comparable&lt;Bin&gt; {\n\tint num;\n\tMergeSource source;\n\n\tBin(MergeSource source, int num) {\n\t\tthis.source = source;\n\t\tthis.num = num;\n\t}\n\n\t@Override\n\tpublic int compareTo(Bin o) {\n\t\treturn this.num - o.num;\n\t}\n\n}\n\nList&lt;Bin&gt; prepare() {\n  \tList&lt;Bin&gt; bins = new ArrayList&lt;&gt;();\n\tfor (MergeSource source : sources) {\n\t\tBin newBin = new Bin(source, source.next());\n\t\tbins.add(newBin);\n\t}\n    Collections.sort(bins);\n    return bins;\n}\n复制代码</code></pre><p><br /></p><h2 id=\"e045cb99\">输出文件类</h2><p><br /></p><p>关闭输出文件时注意要先 flush()，避免丢失 PrintWriter 中缓冲的内容。</p><p><br /></p><pre><code>class MergeOut implements Closeable {\n\tprivate PrintWriter writer;\n\n\tpublic MergeOut(String filename) {\n\t\ttry {\n            FileOutputStream out = new FileOutputStream(filename);\n\t\t\tthis.writer = new PrintWriter(out);\n\t\t} catch (FileNotFoundException e) {\n\t\t}\n\t}\n\n\tpublic void write(Bin bin) {\n\t\twriter.println(bin.num);\n\t}\n\n\t@Override\n\tpublic void close() throws IOException {\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n}\n复制代码</code></pre><p><br /></p><h2 id=\"13e490ba\">准备输入文件的内容</h2><p><br /></p><p>下面我们来生成一系列输入文件，每个输入文件中包含一堆随机整数。一共生成 n 个文件，每个文件的整数数量在 minEntries 到 minEntries 之间。返回所有输入文件的文件名列表。</p><p><br /></p><pre><code>List&lt;String&gt; generateFiles(int n, int minEntries, int maxEntries) {\n\tList&lt;String&gt; files = new ArrayList&lt;&gt;();\n\tfor (int i = 0; i &lt; n; i++) {\n\t\tString filename = &quot;input-&quot; + i + &quot;.txt&quot;;\n\t\tPrintWriter writer;\n\t\ttry {\n\t\t\twriter = new PrintWriter(new FileOutputStream(filename));\n            ThreadLocalRandom rand = ThreadLocalRandom.current();\n\t\t\tint entries = rand.nextInt(minEntries, maxEntries);\n\t\t\tList&lt;Integer&gt; nums = new ArrayList&lt;&gt;();\n\t\t\tfor (int k = 0; k &lt; entries; k++) {\n\t\t\t\tint num = rand.nextInt(10000000);\n\t\t\t\tnums.add(num);\n\t\t\t}\n\t\t\tCollections.sort(nums);\n\t\t\tfor (int num : nums) {\n\t\t\t\twriter.println(num);\n\t\t\t}\n\t\t\twriter.flush();\n\t\t\twriter.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t}\n\t\tfiles.add(filename);\n\t}\n\treturn files;\n}\n复制代码</code></pre><p><br /></p><h2 id=\"4772f735\">排序算法</h2><p><br /></p><p>万事俱备，只欠东风。将上面的类都准备好之后，排序算法很简单，代码量非常少。对照上面算法思路来理解下面的算法就很容易了。</p><p><br /></p><pre><code>public void sort() {\n\tList&lt;Bin&gt; bins = prepare();\n\twhile (true) {\n        // 取数组中最小的元素\n\t\tMergeSource current = bins.get(0).source;\n\t\tif (current.hasNext()) {\n            // 从输入文件中取出下一个元素\n\t\t\tBin newBin = new Bin(current, current.next());\n            // 二分查找，也就是和数组中已有元素进行比较\n\t\t\tint index = Collections.binarySearch(bins, newBin);\n\t\t\tif (index == 0) {\n                // 算法思路情况1\n\t\t\t\tthis.out.write(newBin);\n\t\t\t} else {\n                // 算法思路情况2\n\t\t\t\tif (index &lt; 0) {\n\t\t\t\t\tindex = -(index+1）;\n\t\t\t\t}\n\t\t\t\tbins.add(index, newBin);\n\t\t\t\tBin minBin = bins.remove(0);\n\t\t\t\tthis.out.write(minBin);\n\t\t\t}\n\t\t} else {\n            // 算法思路情况3:遇到文件尾\n\t\t\tBin minBin = bins.remove(0);\n\t\t\tthis.out.write(minBin);\n\t\t\tif (bins.isEmpty()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n复制代码</code></pre><p><br /></p><h2 id=\"9705bbf6\">全部代码</h2><p><br /></p><p>读者可以直接将下面的代码拷贝粘贴到 IDE 中运行。</p><p><br /></p><pre><code>package leetcode;\n\nimport java.io.BufferedReader;\nimport java.io.Closeable;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class DiskMergeSort implements Closeable {\n\n\tpublic static List&lt;String&gt; generateFiles(int n, int minEntries, int maxEntries) {\n\t\tList&lt;String&gt; files = new ArrayList&lt;&gt;();\n\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\tString filename = &quot;input-&quot; + i + &quot;.txt&quot;;\n\t\t\tPrintWriter writer;\n\t\t\ttry {\n\t\t\t\twriter = new PrintWriter(new FileOutputStream(filename));\n\t\t\t\tint entries = ThreadLocalRandom.current().nextInt(minEntries, maxEntries);\n\t\t\t\tList&lt;Integer&gt; nums = new ArrayList&lt;&gt;();\n\t\t\t\tfor (int k = 0; k &lt; entries; k++) {\n\t\t\t\t\tint num = ThreadLocalRandom.current().nextInt(10000000);\n\t\t\t\t\tnums.add(num);\n\t\t\t\t}\n\t\t\t\tCollections.sort(nums);\n\t\t\t\tfor (int num : nums) {\n\t\t\t\t\twriter.println(num);\n\t\t\t\t}\n\t\t\t\twriter.close();\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t}\n\t\t\tfiles.add(filename);\n\t\t}\n\t\treturn files;\n\t}\n\n\tprivate List&lt;MergeSource&gt; sources;\n\tprivate MergeOut out;\n\n\tpublic DiskMergeSort(List&lt;String&gt; files, String outFilename) {\n\t\tthis.sources = new ArrayList&lt;&gt;();\n\t\tfor (String filename : files) {\n\t\t\tthis.sources.add(new MergeSource(filename));\n\t\t}\n\t\tthis.out = new MergeOut(outFilename);\n\t}\n\n\tstatic class MergeOut implements Closeable {\n\t\tprivate PrintWriter writer;\n\n\t\tpublic MergeOut(String filename) {\n\t\t\ttry {\n\t\t\t\tthis.writer = new PrintWriter(new FileOutputStream(filename));\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t}\n\t\t}\n\n\t\tpublic void write(Bin bin) {\n\t\t\twriter.println(bin.num);\n\t\t}\n\n\t\t@Override\n\t\tpublic void close() throws IOException {\n\t\t\twriter.flush();\n\t\t\twriter.close();\n\t\t}\n\t}\n\n\tstatic class MergeSource implements Closeable {\n\t\tprivate BufferedReader reader;\n\t\tprivate String cachedLine;\n\n\t\tpublic MergeSource(String filename) {\n\t\t\ttry {\n\t\t\t\tFileReader fr = new FileReader(filename);\n\t\t\t\tthis.reader = new BufferedReader(fr);\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t}\n\t\t}\n\n\t\tpublic boolean hasNext() {\n\t\t\tString line;\n\t\t\ttry {\n\t\t\t\tline = this.reader.readLine();\n\t\t\t\tif (line == null || line.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.cachedLine = line.trim();\n\t\t\t\treturn true;\n\t\t\t} catch (IOException e) {\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic int next() {\n\t\t\tif (this.cachedLine == null) {\n\t\t\t\tif (!hasNext()) {\n\t\t\t\t\tthrow new IllegalStateException(&quot;no content&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint num = Integer.parseInt(this.cachedLine);\n\t\t\tthis.cachedLine = null;\n\t\t\treturn num;\n\t\t}\n\n\t\t@Override\n\t\tpublic void close() throws IOException {\n\t\t\tthis.reader.close();\n\t\t}\n\t}\n\n\tstatic class Bin implements Comparable&lt;Bin&gt; {\n\t\tint num;\n\t\tMergeSource source;\n\n\t\tBin(MergeSource source, int num) {\n\t\t\tthis.source = source;\n\t\t\tthis.num = num;\n\t\t}\n\n\t\t@Override\n\t\tpublic int compareTo(Bin o) {\n\t\t\treturn this.num - o.num;\n\t\t}\n\t}\n\n\tpublic List&lt;Bin&gt; prepare() {\n\t\tList&lt;Bin&gt; bins = new ArrayList&lt;&gt;();\n\t\tfor (MergeSource source : sources) {\n\t\t\tBin newBin = new Bin(source, source.next());\n\t\t\tbins.add(newBin);\n\t\t}\n\t\tCollections.sort(bins);\n\t\treturn bins;\n\t}\n\n\tpublic void sort() {\n\t\tList&lt;Bin&gt; bins = prepare();\n\t\twhile (true) {\n\t\t\tMergeSource current = bins.get(0).source;\n\t\t\tif (current.hasNext()) {\n\t\t\t\tBin newBin = new Bin(current, current.next());\n\t\t\t\tint index = Collections.binarySearch(bins, newBin);\n\t\t\t\tif (index == 0 || index == -1) {\n\t\t\t\t\tthis.out.write(newBin);\n\t\t\t\t\tif (index == -1) {\n\t\t\t\t\t\tthrow new IllegalStateException(&quot;impossible&quot;);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (index &lt; 0) {\n\t\t\t\t\t\tindex = -index - 1;\n\t\t\t\t\t}\n\t\t\t\t\tbins.add(index, newBin);\n\t\t\t\t\tBin minBin = bins.remove(0);\n\t\t\t\t\tthis.out.write(minBin);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tBin minBin = bins.remove(0);\n\t\t\t\tthis.out.write(minBin);\n\t\t\t\tif (bins.isEmpty()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void close() throws IOException {\n\t\tfor (MergeSource source : sources) {\n\t\t\tsource.close();\n\t\t}\n\t\tthis.out.close();\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tList&lt;String&gt; inputs = DiskMergeSort.generateFiles(100, 10000, 20000);\n\t\t// 运行多次看算法耗时\n\t\tfor (int i = 0; i &lt; 20; i++) {\n\t\t\tDiskMergeSort sorter = new DiskMergeSort(inputs, &quot;output.txt&quot;);\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\tsorter.sort();\n\t\t\tlong duration = System.currentTimeMillis() - start;\n\t\t\tSystem.out.printf(&quot;%dms\\n&quot;, duration);\n\t\t\tsorter.close();\n\t\t}\n\t}\n}\n复制代码</code></pre><p><br /></p><p>本算法还有一个小缺陷，那就是如果输入文件数量非常多，那么内存中的数组就会特别大，对数组的插入删除操作肯定会很耗时，这时可以考虑使用 TreeSet 来代替数组，读者们可以自行尝试一下。</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2019/1/17/16859951b20ebd48?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=#alt=\" style=\"max-width: 600px;\" /></p>",
    "body_lake": "<!doctype lake><blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\" target=\"_blank\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://juejin.im/post/5c3fe473f265da615c5980de\" target=\"_blank\">https://juejin.im/post/5c3fe473f265da615c5980de</a></p>\n</blockquote><p><br /></p><p>在 LevelDB 数据库中高层数据下沉到低层时需要经历一次 Major Compaction，将高层文件的有序键值对和低层文件的多个有序键值对进行归并排序。磁盘多路归并排序算法的输入是来自多个磁盘文件的有序键值对，在内存中将这些文件的键值对进行排序，然后输出到一到多个新的磁盘文件中。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F1%2F17%2F1685994296d730e0%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%23alt%3D%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>多路归并排序在大数据领域也是常用的算法，常用于海量数据排序。当数据量特别大时，这些数据无法被单个机器内存容纳，它需要被切分位多个集合分别由不同的机器进行内存排序（map 过程），然后再进行多路归并算法将来自多个不同机器的数据进行排序（reduce 过程），这是流式多路归并排序，为什么说是流式排序呢，因为数据源来源于网络套接字。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F1%2F17%2F16859942908a6035%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%23alt%3D%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>多路归并排序的优势在于内存消耗极低，它的内存占用和输入文件的数量成正比，和数据总量无关，数据总量只会线性正比影响排序的时间。</p><p><br /></p><p>下面我们来亲自实现一下磁盘多路归并算法，为什么是磁盘，因为它的输入来自磁盘文件。</p><p><br /></p><h2 id=\"71add235\">算法思路</h2><p><br /></p><p>我们需要在内存里维护一个有序数组。每个输入文件当前最小的元素作为一个元素放在数组里。数组按照元素的大小保持排序状态。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F1%2F17%2F1685994285919537%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%23alt%3D%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><p>接下来我们开始进入循环，循环的逻辑总是从最小的元素下手，在其所在的文件取出下一个元素，和当前数组中的元素进行比较。根据比较结果进行不同的处理，这里我们使用二分查找算法进行快速比较。注意每个输入文件里面的元素都是有序的。</p><p><br /></p><ol start=\"1\"><li>如果取出来的元素和当前数组中的最小元素相等，那么就可以直接将这个元素输出。再继续下一轮循环。不可能取出比当前数组最小元素还要小的元素，因为输入文件本身也是有序的。</li></ol><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F1%2F17%2F168599428a394d82%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%23alt%3D%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><ol start=\"1\"><li>否则就需要将元素插入到当前的数组中的指定位置，继续保持数组有序。然后将数组中当前最小的元素输出并移除。再进行下一轮循环。</li></ol><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F1%2F17%2F1685994286796823%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%23alt%3D%22%2C%22alt%22%3A%22%22%7D\"></card> 3. 如果遇到文件结尾，那就无法继续调用 next() 方法了，这时可以直接将数组中的最小元素输出并移除，数组也跟着变小了。再进行下一轮循环。当数组空了，说明所有的文件都处理完了，算法就可以结束了。<card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F1%2F17%2F168599428898c463%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%23alt%3D%22%2C%22alt%22%3A%22%22%7D\"></card> 值得注意的是，数组中永远不会存在同一个文件的两个元素，如此才保证了数组的长度不会超过输入文件的数量，同时它也不会把没有结尾的文件挤出数组导致漏排序的问题。</p><p><br /></p><h2 id=\"0ac6e5c6\">二分查找</h2><p><br /></p><p>需要特别注意的是 Java 内置了二分查找算法在使用上比较精巧。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22public%20class%20Collections%20%7B%5Cn%20%20...%5Cn%20%20public%20static%20%3CT%3E%20int%20binarySearch(List%3CT%3E%20list%2C%20T%20key)%20%7B%5Cn%20%20%20%20...%5Cn%20%20%20%20if%20(found)%20%7B%5Cn%20%20%20%20%20%20return%20index%3B%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20return%20-(insertIndex%2B1)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20...%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>如果 key 可以在 list 中找到，那就直接返回相应的位置。如果找不到，它会返回负数，还不是简单的 -1，这个负数指明了插入的位置，也就是说在这个位置插入 key，数组将可以继续保持有序。</p><p><br /></p><p>比如 binarySearch 返回了 index=-1，那么 insertIndex 就是 -(index+1)，也就是 0，插入点在数组开头。如果返回了 index=-size-1，那么 insertIndex 就是 size，是数组末尾。其它负数会插入数组中间。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F1%2F17%2F16859943cc887c0c%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%23alt%3D%22%2C%22alt%22%3A%22%22%7D\"></card></p><p><br /></p><h2 id=\"ef74daa2\">输入文件类</h2><p><br /></p><p>对于每一个输入文件都会创建一个 MergeSource 对象，它提供了 hasNext() 和 next() 方法用于判断和获取下一个元素。注意输入文件是有序的，下一个元素就是当前输入文件最小的元素。 hasNext() 方法负责读取下一行并缓存在 cachedLine 变量中，调用 next() 方法将 cachedLine 变量转换成整数并返回。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22class%20MergeSource%20implements%20Closeable%20%7B%5Cn%5Ctprivate%20BufferedReader%20reader%3B%5Cn%5Ctprivate%20String%20cachedLine%3B%5Cn%5Ctprivate%20String%20filename%3B%5Cn%5Cn%5Ctpublic%20MergeSource(String%20filename)%20%7B%5Cn%5Ct%5Ctthis.filename%20%3D%20filename%3B%5Cn%5Ct%5Cttry%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20FileReader%20fr%20%3D%20new%20FileReader(filename)%3B%5Cn%5Ct%5Ct%5Ctthis.reader%20%3D%20new%20BufferedReader(fr)%3B%5Cn%5Ct%5Ct%7D%20catch%20(FileNotFoundException%20e)%20%7B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Cn%5Ctpublic%20boolean%20hasNext()%20%7B%5Cn%5Ct%5CtString%20line%3B%5Cn%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ctline%20%3D%20this.reader.readLine()%3B%5Cn%5Ct%5Ct%5Ctif%20(line%20%3D%3D%20null%20%7C%7C%20line.isEmpty())%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctreturn%20false%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ctthis.cachedLine%20%3D%20line.trim()%3B%5Cn%5Ct%5Ct%5Ctreturn%20true%3B%5Cn%5Ct%5Ct%7D%20catch%20(IOException%20e)%20%7B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%5Ctreturn%20false%3B%5Cn%5Ct%7D%5Cn%5Cn%5Ctpublic%20int%20next()%20%7B%5Cn%5Ct%5Ctif%20(this.cachedLine%20%3D%3D%20null)%20%7B%5Cn%5Ct%5Ct%5Ctif%20(!hasNext())%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctthrow%20new%20IllegalStateException(%5C%22no%20content%5C%22)%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%5Ctint%20num%20%3D%20Integer.parseInt(this.cachedLine)%3B%5Cn%5Ct%5Ctthis.cachedLine%20%3D%20null%3B%5Cn%5Ct%5Ctreturn%20num%3B%5Cn%5Ct%7D%5Cn%5Cn%5Ct%40Override%5Cn%5Ctpublic%20void%20close()%20throws%20IOException%20%7B%5Cn%5Ct%5Ctthis.reader.close()%3B%5Cn%5Ct%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"c3bdef97\">内存有序数组元素类</h2><p><br /></p><p>在排序前先把这个数组准备好，将每个输入文件的最小元素放入数组，并排序。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22class%20Bin%20implements%20Comparable%3CBin%3E%20%7B%5Cn%5Ctint%20num%3B%5Cn%5CtMergeSource%20source%3B%5Cn%5Cn%5CtBin(MergeSource%20source%2C%20int%20num)%20%7B%5Cn%5Ct%5Ctthis.source%20%3D%20source%3B%5Cn%5Ct%5Ctthis.num%20%3D%20num%3B%5Cn%5Ct%7D%5Cn%5Cn%5Ct%40Override%5Cn%5Ctpublic%20int%20compareTo(Bin%20o)%20%7B%5Cn%5Ct%5Ctreturn%20this.num%20-%20o.num%3B%5Cn%5Ct%7D%5Cn%5Cn%7D%5Cn%5CnList%3CBin%3E%20prepare()%20%7B%5Cn%20%20%5CtList%3CBin%3E%20bins%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%5Ctfor%20(MergeSource%20source%20%3A%20sources)%20%7B%5Cn%5Ct%5CtBin%20newBin%20%3D%20new%20Bin(source%2C%20source.next())%3B%5Cn%5Ct%5Ctbins.add(newBin)%3B%5Cn%5Ct%7D%5Cn%20%20%20%20Collections.sort(bins)%3B%5Cn%20%20%20%20return%20bins%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"e045cb99\">输出文件类</h2><p><br /></p><p>关闭输出文件时注意要先 flush()，避免丢失 PrintWriter 中缓冲的内容。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22class%20MergeOut%20implements%20Closeable%20%7B%5Cn%5Ctprivate%20PrintWriter%20writer%3B%5Cn%5Cn%5Ctpublic%20MergeOut(String%20filename)%20%7B%5Cn%5Ct%5Cttry%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20FileOutputStream%20out%20%3D%20new%20FileOutputStream(filename)%3B%5Cn%5Ct%5Ct%5Ctthis.writer%20%3D%20new%20PrintWriter(out)%3B%5Cn%5Ct%5Ct%7D%20catch%20(FileNotFoundException%20e)%20%7B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Cn%5Ctpublic%20void%20write(Bin%20bin)%20%7B%5Cn%5Ct%5Ctwriter.println(bin.num)%3B%5Cn%5Ct%7D%5Cn%5Cn%5Ct%40Override%5Cn%5Ctpublic%20void%20close()%20throws%20IOException%20%7B%5Cn%5Ct%5Ctwriter.flush()%3B%5Cn%5Ct%5Ctwriter.close()%3B%5Cn%5Ct%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"13e490ba\">准备输入文件的内容</h2><p><br /></p><p>下面我们来生成一系列输入文件，每个输入文件中包含一堆随机整数。一共生成 n 个文件，每个文件的整数数量在 minEntries 到 minEntries 之间。返回所有输入文件的文件名列表。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22List%3CString%3E%20generateFiles(int%20n%2C%20int%20minEntries%2C%20int%20maxEntries)%20%7B%5Cn%5CtList%3CString%3E%20files%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%5Ctfor%20(int%20i%20%3D%200%3B%20i%20%3C%20n%3B%20i%2B%2B)%20%7B%5Cn%5Ct%5CtString%20filename%20%3D%20%5C%22input-%5C%22%20%2B%20i%20%2B%20%5C%22.txt%5C%22%3B%5Cn%5Ct%5CtPrintWriter%20writer%3B%5Cn%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ctwriter%20%3D%20new%20PrintWriter(new%20FileOutputStream(filename))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ThreadLocalRandom%20rand%20%3D%20ThreadLocalRandom.current()%3B%5Cn%5Ct%5Ct%5Ctint%20entries%20%3D%20rand.nextInt(minEntries%2C%20maxEntries)%3B%5Cn%5Ct%5Ct%5CtList%3CInteger%3E%20nums%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%5Ct%5Ct%5Ctfor%20(int%20k%20%3D%200%3B%20k%20%3C%20entries%3B%20k%2B%2B)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctint%20num%20%3D%20rand.nextInt(10000000)%3B%5Cn%5Ct%5Ct%5Ct%5Ctnums.add(num)%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5CtCollections.sort(nums)%3B%5Cn%5Ct%5Ct%5Ctfor%20(int%20num%20%3A%20nums)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctwriter.println(num)%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ctwriter.flush()%3B%5Cn%5Ct%5Ct%5Ctwriter.close()%3B%5Cn%5Ct%5Ct%7D%20catch%20(FileNotFoundException%20e)%20%7B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%5Ctfiles.add(filename)%3B%5Cn%5Ct%7D%5Cn%5Ctreturn%20files%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"4772f735\">排序算法</h2><p><br /></p><p>万事俱备，只欠东风。将上面的类都准备好之后，排序算法很简单，代码量非常少。对照上面算法思路来理解下面的算法就很容易了。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22public%20void%20sort()%20%7B%5Cn%5CtList%3CBin%3E%20bins%20%3D%20prepare()%3B%5Cn%5Ctwhile%20(true)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%96%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%80%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0%5Cn%5Ct%5CtMergeSource%20current%20%3D%20bins.get(0).source%3B%5Cn%5Ct%5Ctif%20(current.hasNext())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8E%E8%BE%93%E5%85%A5%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8F%96%E5%87%BA%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%5Cn%5Ct%5Ct%5CtBin%20newBin%20%3D%20new%20Bin(current%2C%20current.next())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E5%92%8C%E6%95%B0%E7%BB%84%E4%B8%AD%E5%B7%B2%E6%9C%89%E5%85%83%E7%B4%A0%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83%5Cn%5Ct%5Ct%5Ctint%20index%20%3D%20Collections.binarySearch(bins%2C%20newBin)%3B%5Cn%5Ct%5Ct%5Ctif%20(index%20%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF%E6%83%85%E5%86%B51%5Cn%5Ct%5Ct%5Ct%5Ctthis.out.write(newBin)%3B%5Cn%5Ct%5Ct%5Ct%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF%E6%83%85%E5%86%B52%5Cn%5Ct%5Ct%5Ct%5Ctif%20(index%20%3C%200)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctindex%20%3D%20-(index%2B1%EF%BC%89%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ctbins.add(index%2C%20newBin)%3B%5Cn%5Ct%5Ct%5Ct%5CtBin%20minBin%20%3D%20bins.remove(0)%3B%5Cn%5Ct%5Ct%5Ct%5Ctthis.out.write(minBin)%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF%E6%83%85%E5%86%B53%3A%E9%81%87%E5%88%B0%E6%96%87%E4%BB%B6%E5%B0%BE%5Cn%5Ct%5Ct%5CtBin%20minBin%20%3D%20bins.remove(0)%3B%5Cn%5Ct%5Ct%5Ctthis.out.write(minBin)%3B%5Cn%5Ct%5Ct%5Ctif%20(bins.isEmpty())%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctbreak%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"9705bbf6\">全部代码</h2><p><br /></p><p>读者可以直接将下面的代码拷贝粘贴到 IDE 中运行。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22package%20leetcode%3B%5Cn%5Cnimport%20java.io.BufferedReader%3B%5Cnimport%20java.io.Closeable%3B%5Cnimport%20java.io.FileNotFoundException%3B%5Cnimport%20java.io.FileOutputStream%3B%5Cnimport%20java.io.FileReader%3B%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.io.PrintWriter%3B%5Cnimport%20java.util.ArrayList%3B%5Cnimport%20java.util.Collections%3B%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.concurrent.ThreadLocalRandom%3B%5Cn%5Cnpublic%20class%20DiskMergeSort%20implements%20Closeable%20%7B%5Cn%5Cn%5Ctpublic%20static%20List%3CString%3E%20generateFiles(int%20n%2C%20int%20minEntries%2C%20int%20maxEntries)%20%7B%5Cn%5Ct%5CtList%3CString%3E%20files%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%5Ct%5Ctfor%20(int%20i%20%3D%200%3B%20i%20%3C%20n%3B%20i%2B%2B)%20%7B%5Cn%5Ct%5Ct%5CtString%20filename%20%3D%20%5C%22input-%5C%22%20%2B%20i%20%2B%20%5C%22.txt%5C%22%3B%5Cn%5Ct%5Ct%5CtPrintWriter%20writer%3B%5Cn%5Ct%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctwriter%20%3D%20new%20PrintWriter(new%20FileOutputStream(filename))%3B%5Cn%5Ct%5Ct%5Ct%5Ctint%20entries%20%3D%20ThreadLocalRandom.current().nextInt(minEntries%2C%20maxEntries)%3B%5Cn%5Ct%5Ct%5Ct%5CtList%3CInteger%3E%20nums%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%5Ct%5Ct%5Ct%5Ctfor%20(int%20k%20%3D%200%3B%20k%20%3C%20entries%3B%20k%2B%2B)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctint%20num%20%3D%20ThreadLocalRandom.current().nextInt(10000000)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctnums.add(num)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5CtCollections.sort(nums)%3B%5Cn%5Ct%5Ct%5Ct%5Ctfor%20(int%20num%20%3A%20nums)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctwriter.println(num)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ctwriter.close()%3B%5Cn%5Ct%5Ct%5Ct%7D%20catch%20(FileNotFoundException%20e)%20%7B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ctfiles.add(filename)%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%5Ctreturn%20files%3B%5Cn%5Ct%7D%5Cn%5Cn%5Ctprivate%20List%3CMergeSource%3E%20sources%3B%5Cn%5Ctprivate%20MergeOut%20out%3B%5Cn%5Cn%5Ctpublic%20DiskMergeSort(List%3CString%3E%20files%2C%20String%20outFilename)%20%7B%5Cn%5Ct%5Ctthis.sources%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%5Ct%5Ctfor%20(String%20filename%20%3A%20files)%20%7B%5Cn%5Ct%5Ct%5Ctthis.sources.add(new%20MergeSource(filename))%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%5Ctthis.out%20%3D%20new%20MergeOut(outFilename)%3B%5Cn%5Ct%7D%5Cn%5Cn%5Ctstatic%20class%20MergeOut%20implements%20Closeable%20%7B%5Cn%5Ct%5Ctprivate%20PrintWriter%20writer%3B%5Cn%5Cn%5Ct%5Ctpublic%20MergeOut(String%20filename)%20%7B%5Cn%5Ct%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctthis.writer%20%3D%20new%20PrintWriter(new%20FileOutputStream(filename))%3B%5Cn%5Ct%5Ct%5Ct%7D%20catch%20(FileNotFoundException%20e)%20%7B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Cn%5Ct%5Ctpublic%20void%20write(Bin%20bin)%20%7B%5Cn%5Ct%5Ct%5Ctwriter.println(bin.num)%3B%5Cn%5Ct%5Ct%7D%5Cn%5Cn%5Ct%5Ct%40Override%5Cn%5Ct%5Ctpublic%20void%20close()%20throws%20IOException%20%7B%5Cn%5Ct%5Ct%5Ctwriter.flush()%3B%5Cn%5Ct%5Ct%5Ctwriter.close()%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Cn%5Ctstatic%20class%20MergeSource%20implements%20Closeable%20%7B%5Cn%5Ct%5Ctprivate%20BufferedReader%20reader%3B%5Cn%5Ct%5Ctprivate%20String%20cachedLine%3B%5Cn%5Cn%5Ct%5Ctpublic%20MergeSource(String%20filename)%20%7B%5Cn%5Ct%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ct%5CtFileReader%20fr%20%3D%20new%20FileReader(filename)%3B%5Cn%5Ct%5Ct%5Ct%5Ctthis.reader%20%3D%20new%20BufferedReader(fr)%3B%5Cn%5Ct%5Ct%5Ct%7D%20catch%20(FileNotFoundException%20e)%20%7B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Cn%5Ct%5Ctpublic%20boolean%20hasNext()%20%7B%5Cn%5Ct%5Ct%5CtString%20line%3B%5Cn%5Ct%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctline%20%3D%20this.reader.readLine()%3B%5Cn%5Ct%5Ct%5Ct%5Ctif%20(line%20%3D%3D%20null%20%7C%7C%20line.isEmpty())%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctreturn%20false%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ctthis.cachedLine%20%3D%20line.trim()%3B%5Cn%5Ct%5Ct%5Ct%5Ctreturn%20true%3B%5Cn%5Ct%5Ct%5Ct%7D%20catch%20(IOException%20e)%20%7B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ctreturn%20false%3B%5Cn%5Ct%5Ct%7D%5Cn%5Cn%5Ct%5Ctpublic%20int%20next()%20%7B%5Cn%5Ct%5Ct%5Ctif%20(this.cachedLine%20%3D%3D%20null)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctif%20(!hasNext())%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctthrow%20new%20IllegalStateException(%5C%22no%20content%5C%22)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ctint%20num%20%3D%20Integer.parseInt(this.cachedLine)%3B%5Cn%5Ct%5Ct%5Ctthis.cachedLine%20%3D%20null%3B%5Cn%5Ct%5Ct%5Ctreturn%20num%3B%5Cn%5Ct%5Ct%7D%5Cn%5Cn%5Ct%5Ct%40Override%5Cn%5Ct%5Ctpublic%20void%20close()%20throws%20IOException%20%7B%5Cn%5Ct%5Ct%5Ctthis.reader.close()%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Cn%5Ctstatic%20class%20Bin%20implements%20Comparable%3CBin%3E%20%7B%5Cn%5Ct%5Ctint%20num%3B%5Cn%5Ct%5CtMergeSource%20source%3B%5Cn%5Cn%5Ct%5CtBin(MergeSource%20source%2C%20int%20num)%20%7B%5Cn%5Ct%5Ct%5Ctthis.source%20%3D%20source%3B%5Cn%5Ct%5Ct%5Ctthis.num%20%3D%20num%3B%5Cn%5Ct%5Ct%7D%5Cn%5Cn%5Ct%5Ct%40Override%5Cn%5Ct%5Ctpublic%20int%20compareTo(Bin%20o)%20%7B%5Cn%5Ct%5Ct%5Ctreturn%20this.num%20-%20o.num%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Cn%5Ctpublic%20List%3CBin%3E%20prepare()%20%7B%5Cn%5Ct%5CtList%3CBin%3E%20bins%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%5Ct%5Ctfor%20(MergeSource%20source%20%3A%20sources)%20%7B%5Cn%5Ct%5Ct%5CtBin%20newBin%20%3D%20new%20Bin(source%2C%20source.next())%3B%5Cn%5Ct%5Ct%5Ctbins.add(newBin)%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%5CtCollections.sort(bins)%3B%5Cn%5Ct%5Ctreturn%20bins%3B%5Cn%5Ct%7D%5Cn%5Cn%5Ctpublic%20void%20sort()%20%7B%5Cn%5Ct%5CtList%3CBin%3E%20bins%20%3D%20prepare()%3B%5Cn%5Ct%5Ctwhile%20(true)%20%7B%5Cn%5Ct%5Ct%5CtMergeSource%20current%20%3D%20bins.get(0).source%3B%5Cn%5Ct%5Ct%5Ctif%20(current.hasNext())%20%7B%5Cn%5Ct%5Ct%5Ct%5CtBin%20newBin%20%3D%20new%20Bin(current%2C%20current.next())%3B%5Cn%5Ct%5Ct%5Ct%5Ctint%20index%20%3D%20Collections.binarySearch(bins%2C%20newBin)%3B%5Cn%5Ct%5Ct%5Ct%5Ctif%20(index%20%3D%3D%200%20%7C%7C%20index%20%3D%3D%20-1)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctthis.out.write(newBin)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctif%20(index%20%3D%3D%20-1)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%5Ctthrow%20new%20IllegalStateException(%5C%22impossible%5C%22)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ct%7D%20else%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctif%20(index%20%3C%200)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%5Ctindex%20%3D%20-index%20-%201%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctbins.add(index%2C%20newBin)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5CtBin%20minBin%20%3D%20bins.remove(0)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctthis.out.write(minBin)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%7D%20else%20%7B%5Cn%5Ct%5Ct%5Ct%5CtBin%20minBin%20%3D%20bins.remove(0)%3B%5Cn%5Ct%5Ct%5Ct%5Ctthis.out.write(minBin)%3B%5Cn%5Ct%5Ct%5Ct%5Ctif%20(bins.isEmpty())%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ctbreak%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Cn%5Ct%40Override%5Cn%5Ctpublic%20void%20close()%20throws%20IOException%20%7B%5Cn%5Ct%5Ctfor%20(MergeSource%20source%20%3A%20sources)%20%7B%5Cn%5Ct%5Ct%5Ctsource.close()%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%5Ctthis.out.close()%3B%5Cn%5Ct%7D%5Cn%5Cn%5Ctpublic%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%20%7B%5Cn%5Ct%5CtList%3CString%3E%20inputs%20%3D%20DiskMergeSort.generateFiles(100%2C%2010000%2C%2020000)%3B%5Cn%5Ct%5Ct%2F%2F%20%E8%BF%90%E8%A1%8C%E5%A4%9A%E6%AC%A1%E7%9C%8B%E7%AE%97%E6%B3%95%E8%80%97%E6%97%B6%5Cn%5Ct%5Ctfor%20(int%20i%20%3D%200%3B%20i%20%3C%2020%3B%20i%2B%2B)%20%7B%5Cn%5Ct%5Ct%5CtDiskMergeSort%20sorter%20%3D%20new%20DiskMergeSort(inputs%2C%20%5C%22output.txt%5C%22)%3B%5Cn%5Ct%5Ct%5Ctlong%20start%20%3D%20System.currentTimeMillis()%3B%5Cn%5Ct%5Ct%5Ctsorter.sort()%3B%5Cn%5Ct%5Ct%5Ctlong%20duration%20%3D%20System.currentTimeMillis()%20-%20start%3B%5Cn%5Ct%5Ct%5CtSystem.out.printf(%5C%22%25dms%5C%5Cn%5C%22%2C%20duration)%3B%5Cn%5Ct%5Ct%5Ctsorter.close()%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>本算法还有一个小缺陷，那就是如果输入文件数量非常多，那么内存中的数组就会特别大，对数组的插入删除操作肯定会很耗时，这时可以考虑使用 TreeSet 来代替数组，读者们可以自行尝试一下。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F1%2F17%2F16859951b20ebd48%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%23alt%3D%22%2C%22alt%22%3A%22%22%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T03:34:10.000Z",
    "deleted_at": null,
    "created_at": "2019-01-22T03:34:01.000Z",
    "updated_at": "2019-05-28T08:12:55.000Z",
    "published_at": "2019-01-22T03:34:10.000Z",
    "first_published_at": "2019-01-22T03:34:10.000Z",
    "word_count": 2527,
    "cover": "",
    "description": "本文由 简悦 SimpRead 转码， 原文地址 https://juejin.im/post/5c3fe473f265da615c5980de 在 LevelDB 数据库中高层数据下沉到低层时需要经历一次 Major Compaction，将高层文件的有序键值对和低层文件的多个有序键值对进行...",
    "custom_description": "本文由 简悦 SimpRead 转码， 原文地址 https://juejin.im/post/5c3fe473f265da615c5980de 在 LevelDB 数据库中高层数据下沉到低层时需要经历一次 Major Compaction，将高层文件的有序键值对和低层文件的多个有序键值对进行...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1171208,
    "slug": "xfn8ar",
    "title": "无标题",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "",
    "body_draft": "",
    "body_html": "",
    "body_lake": "",
    "public": 1,
    "status": 0,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T03:33:49.000Z",
    "deleted_at": null,
    "created_at": "2019-01-22T03:33:49.000Z",
    "updated_at": "2019-02-19T09:41:52.000Z",
    "published_at": null,
    "first_published_at": null,
    "word_count": 0,
    "cover": null,
    "description": "",
    "custom_description": "",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1171200,
    "slug": "gndhd8",
    "title": "无标题",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "",
    "body_draft": "",
    "body_html": "",
    "body_lake": "",
    "public": 1,
    "status": 0,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T03:33:07.000Z",
    "deleted_at": null,
    "created_at": "2019-01-22T03:32:29.000Z",
    "updated_at": "2019-02-19T09:41:52.000Z",
    "published_at": null,
    "first_published_at": null,
    "word_count": 0,
    "cover": null,
    "description": "本文由 简悦 SimpRead 转码， 原文地址 https://juejin.im/post/5c3fe473f265da615c5980de在 LevelDB 数据库中高层数据下沉到低层时需要经历一次 Major Compaction，将高层文件的有序键值对和低层文件的多个有序键值对进行归...",
    "custom_description": "本文由 简悦 SimpRead 转码， 原文地址 https://juejin.im/post/5c3fe473f265da615c5980de在 LevelDB 数据库中高层数据下沉到低层时需要经历一次 Major Compaction，将高层文件的有序键值对和低层文件的多个有序键值对进行归...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1171194,
    "slug": "gauus1",
    "title": "跟着动画来学习 TCP 三次握手和四次挥手",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [https://juejin.im/post/5b29d2c4e51d4558b80b1d8c](https://juejin.im/post/5b29d2c4e51d4558b80b1d8c)\n\n\nTCP 三次握手和四次挥手的问题在面试中是最为常见的考点之一。很多读者都知道三次和四次，但是如果问深入一点，他们往往都无法作出准确回答。\n\n本篇尝试使用动画来对这个知识点进行讲解，期望读者们可以更加简单地地理解 TCP 交互的本质。\n\n<a name=\"e518c6a4\"></a>\n## TCP 三次握手\n\nTCP 三次握手就好比两个人在街上隔着 50 米看见了对方，但是因为雾霾等原因不能 100% 确认，所以要通过招手的方式相互确定对方是否认识自己。\n\n![](https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912493-b6ded71c-8a9e-4eab-8756-1f98b471b716.gif#align=left&display=inline&height=900&originHeight=900&originWidth=720&size=0&width=720)\n\n张三首先向李四招手 (**syn**)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑 (**ack**)。张三看到李四微笑后确认了李四成功辨认出了自己 (进入 **estalished** 状态)。\n\n但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手 (**syn**)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑 (**ack**)，李四看到对方的微笑后确认了张三就是在向自己打招呼 (进入 **established** 状态)。\n\n于是两人加快步伐，走到了一起，相互拥抱。\n\n![](https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912466-816c90f7-7ec9-4502-8578-2fd3beca8131.gif#align=left&display=inline&height=398&originHeight=480&originWidth=900&size=0&width=746)\n\n我们看到这个过程中一共是四个动作，张三招手 -- 李四点头微笑 -- 李四招手 -- 张三点头微笑。其中李四连续进行了 2 个动作，先是点头微笑 (回复对方)，然后再次招手 (寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑 (**syn+ack**)。于是四个动作就简化成了三个动作，张三招手 -- 李四点头微笑并招手 -- 张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。\n\n我们看到有两个中间状态，**syn_sent** 和 **syn_rcvd**，这两个状态叫着「半打开」状态，就是向对方招手了，但是还没来得及看到对方的点头微笑。**syn_sent** 是主动打开方的「半打开」状态，**syn_rcvd** 是被动打开方的「半打开」状态。客户端是主动打开方，服务器是被动打开方。\n\n- syn_sent: syn package has been sent\n- syn_rcvd: syn package has been received\n\n<a name=\"d03d6057\"></a>\n## TCP 数据传输\n\nTCP 数据传输就是两个人隔空对话，差了一点距离，所以需要对方反复确认听见了自己的话。\n\n![](https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912513-e410671a-076b-48a0-abf0-9da8e3fa7a77.gif#align=left&display=inline&height=900&originHeight=900&originWidth=640&size=0&width=640)\n\n张三喊了一句话 (data)，李四听见了之后要向张三回复自己听见了 (ack)。\n\n如果张三喊了一句，半天没听到李四回复，张三就认为自己的话被大风吹走了，李四没听见，所以需要重新喊话，这就是 tcp 重传。\n\n也有可能是李四听到了张三的话，但是李四向张三的回复被大风吹走了，以至于张三没听见李四的回复。张三并不能判断究竟是自己的话被大风吹走了还是李四的回复被大风吹走了，张三也不用管，重传一下就是。\n\n既然会重传，李四就有可能同一句话听见了两次，这就是「去重」。「重传」和「去重」工作操作系统的网络内核模块都已经帮我们处理好了，用户层是不用关心的。\n\n![](https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912461-52d8902c-0f8b-4fc0-ad15-d40e7bb79786.gif#align=left&display=inline&height=311&originHeight=400&originWidth=960&size=0&width=746)\n\n张三可以向李四喊话，同样李四也可以向张三喊话，因为 tcp 链接是「双工的」，双方都可以主动发起数据传输。不过无论是哪方喊话，都需要收到对方的确认才能认为对方收到了自己的喊话。\n\n张三可能是个高射炮，一说连说了八句话，这时候李四可以不用一句一句回复，而是连续听了这八句话之后，一起向对方回复说前面你说的八句话我都听见了，这就是批量 ack。但是张三也不能一次性说了太多话，李四的脑子短时间可能无法消化太多，两人之间需要有协商好的合适的发送和接受速率，这个就是「TCP 窗口大小」。\n\n网络环境的数据交互同人类之间的对话还要复杂一些，它存在数据包乱序的现象。同一个来源发出来的不同数据包在「网际路由」上可能会走过不同的路径，最终达到同一个地方时，顺序就不一样了。操作系统的网络内核模块会负责对数据包进行排序，到用户层时顺序就已经完全一致了。\n\n<a name=\"6d1e120a\"></a>\n## TCP 四次挥手\n\nTCP 断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了 4 个动作，张三挥手 (fin)——李四伤感地微笑 (ack)——李四挥手 (fin)——张三伤感地微笑 (ack)。\n\n![](https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912515-4f88e8e6-71fe-458e-9c1b-d31c1970fb75.gif#align=left&display=inline&height=900&originHeight=900&originWidth=720&size=0&width=720)\n\n之所以中间的两个动作没有合并，是因为 tcp 存在「半关闭」状态，也就是单向关闭。张三已经挥了手，可是人还没有走，只是不再说话，但是耳朵还是可以继续听，李四呢继续喊话。等待李四累了，也不再说话了，朝张三挥了挥手，张三伤感地微笑了一下，才彻底结束了。\n\n![](https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912481-5df7bcc4-382c-4b22-a9cd-c5e4549a6cf6.gif#align=left&display=inline&height=360&originHeight=360&originWidth=676&size=0&width=676)\n\n上面有一个非常特殊的状态`time_wait`，它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是 4 分钟，4 分钟后才会进入到 closed 状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。\n\n它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续 4 分钟的`time_wait`状态，不能释放套接字资源 (端口)，就好比守寡期，这段时间内套接字资源(端口) 不得回收利用。\n\n它的作用是重传最后一个 ack 报文，确保对方可以收到。因为如果对方没有收到 ack 的话，会重传 fin 报文，处于 time_wait 状态的套接字会立即向对方重发 ack 报文。\n\n同时在这段时间内，该链接在对话期间于网际路由上产生的残留报文 (因为路径过于崎岖，数据报文走的时间太长，重传的报文都收到了，原始报文还在路上) 传过来时，都会被立即丢弃掉。4 分钟的时间足以使得这些残留报文彻底消逝。不然当新的端口被重复利用时，这些残留报文可能会干扰新的链接。\n\n4 分钟就是 2 个 MSL，每个 MSL 是 2 分钟。MSL 就是`maximium segment lifetime`——最长报文寿命。这个时间是由官方 RFC 协议规定的。至于为什么是 2 个 MSL 而不是 1 个 MSL，我还没有看到一个非常满意的解释。\n\n四次挥手也并不总是四次挥手，中间的两个动作有时候是可以合并一起进行的，这个时候就成了三次挥手，主动关闭方就会从`fin_wait_1`状态直接进入到`time_wait`状态，跳过了`fin_wait_2`状态。\n\n<a name=\"25f9c7fa\"></a>\n## 总结\n\nTCP 状态转换是一个非常复杂的过程，本文仅对一些简单的基础知识点进行了类比讲解。关于 TCP 的更多知识还需要读者去搜寻相关技术文章进入深入学习。如果读者对 TCP 的基础知识掌握得比较牢固，高级的知识理解起来就不会太过于吃力。\n\n\n\n关于 TCP 的更多文章，还请关注微信公众号「码洞」进行订阅，后续我会持续更新更多细节。\n\n如果觉得本文写的质量还可以，就给我的掘金小册捧捧场吧\n\n[**深入理解 RPC**](https://juejin.im/book/5af56a3c518825426642e004) [**深入理解 RPC**](https://juejin.im/book/5af56a3c518825426642e004) [**深入理解 RPC**](https://juejin.im/book/5af56a3c518825426642e004)\n\n\n\n[**深入理解 RPC**](https://juejin.im/book/5af56a3c518825426642e004) [**深入理解 RPC**](https://juejin.im/book/5af56a3c518825426642e004) [**深入理解 RPC**](https://juejin.im/book/5af56a3c518825426642e004)\n",
    "body_draft": "",
    "body_html": "<blockquote style=\"padding-left: 1em;\"><p>本文由 <a href=\"http://ksria.com/simpread/\" target=\"_blank\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://juejin.im/post/5b29d2c4e51d4558b80b1d8c\" target=\"_blank\">https://juejin.im/post/5b29d2c4e51d4558b80b1d8c</a></p></blockquote><p><br /></p><p>TCP 三次握手和四次挥手的问题在面试中是最为常见的考点之一。很多读者都知道三次和四次，但是如果问深入一点，他们往往都无法作出准确回答。</p><p><br /></p><p>本篇尝试使用动画来对这个知识点进行讲解，期望读者们可以更加简单地地理解 TCP 交互的本质。</p><p><br /></p><h2 id=\"e518c6a4\">TCP 三次握手</h2><p><br /></p><p>TCP 三次握手就好比两个人在街上隔着 50 米看见了对方，但是因为雾霾等原因不能 100% 确认，所以要通过招手的方式相互确定对方是否认识自己。</p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912493-b6ded71c-8a9e-4eab-8756-1f98b471b716.gif#align=left&amp;display=inline&amp;height=900&amp;originHeight=900&amp;originWidth=720&amp;size=0&amp;width=720\" style=\"max-width: 600px; width: 720px;\" /></p><p><br /></p><p>张三首先向李四招手 (<strong>syn</strong>)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑 (<strong>ack</strong>)。张三看到李四微笑后确认了李四成功辨认出了自己 (进入 <strong>estalished</strong> 状态)。</p><p><br /></p><p>但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手 (<strong>syn</strong>)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑 (<strong>ack</strong>)，李四看到对方的微笑后确认了张三就是在向自己打招呼 (进入 <strong>established</strong> 状态)。</p><p><br /></p><p>于是两人加快步伐，走到了一起，相互拥抱。</p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912466-816c90f7-7ec9-4502-8578-2fd3beca8131.gif#align=left&amp;display=inline&amp;height=398&amp;originHeight=480&amp;originWidth=900&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>我们看到这个过程中一共是四个动作，张三招手 -- 李四点头微笑 -- 李四招手 -- 张三点头微笑。其中李四连续进行了 2 个动作，先是点头微笑 (回复对方)，然后再次招手 (寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑 (<strong>syn+ack</strong>)。于是四个动作就简化成了三个动作，张三招手 -- 李四点头微笑并招手 -- 张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。</p><p><br /></p><p>我们看到有两个中间状态，<strong>syn_sent</strong> 和 <strong>syn_rcvd</strong>，这两个状态叫着「半打开」状态，就是向对方招手了，但是还没来得及看到对方的点头微笑。<strong>syn_sent</strong> 是主动打开方的「半打开」状态，<strong>syn_rcvd</strong> 是被动打开方的「半打开」状态。客户端是主动打开方，服务器是被动打开方。</p><p><br /></p><ul><li>syn_sent: syn package has been sent</li></ul><ul><li>syn_rcvd: syn package has been received</li></ul><p><br /></p><h2 id=\"d03d6057\">TCP 数据传输</h2><p><br /></p><p>TCP 数据传输就是两个人隔空对话，差了一点距离，所以需要对方反复确认听见了自己的话。</p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912513-e410671a-076b-48a0-abf0-9da8e3fa7a77.gif#align=left&amp;display=inline&amp;height=900&amp;originHeight=900&amp;originWidth=640&amp;size=0&amp;width=640\" style=\"max-width: 600px; width: 640px;\" /></p><p><br /></p><p>张三喊了一句话 (data)，李四听见了之后要向张三回复自己听见了 (ack)。</p><p><br /></p><p>如果张三喊了一句，半天没听到李四回复，张三就认为自己的话被大风吹走了，李四没听见，所以需要重新喊话，这就是 tcp 重传。</p><p><br /></p><p>也有可能是李四听到了张三的话，但是李四向张三的回复被大风吹走了，以至于张三没听见李四的回复。张三并不能判断究竟是自己的话被大风吹走了还是李四的回复被大风吹走了，张三也不用管，重传一下就是。</p><p><br /></p><p>既然会重传，李四就有可能同一句话听见了两次，这就是「去重」。「重传」和「去重」工作操作系统的网络内核模块都已经帮我们处理好了，用户层是不用关心的。</p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912461-52d8902c-0f8b-4fc0-ad15-d40e7bb79786.gif#align=left&amp;display=inline&amp;height=311&amp;originHeight=400&amp;originWidth=960&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><p>张三可以向李四喊话，同样李四也可以向张三喊话，因为 tcp 链接是「双工的」，双方都可以主动发起数据传输。不过无论是哪方喊话，都需要收到对方的确认才能认为对方收到了自己的喊话。</p><p><br /></p><p>张三可能是个高射炮，一说连说了八句话，这时候李四可以不用一句一句回复，而是连续听了这八句话之后，一起向对方回复说前面你说的八句话我都听见了，这就是批量 ack。但是张三也不能一次性说了太多话，李四的脑子短时间可能无法消化太多，两人之间需要有协商好的合适的发送和接受速率，这个就是「TCP 窗口大小」。</p><p><br /></p><p>网络环境的数据交互同人类之间的对话还要复杂一些，它存在数据包乱序的现象。同一个来源发出来的不同数据包在「网际路由」上可能会走过不同的路径，最终达到同一个地方时，顺序就不一样了。操作系统的网络内核模块会负责对数据包进行排序，到用户层时顺序就已经完全一致了。</p><p><br /></p><h2 id=\"6d1e120a\">TCP 四次挥手</h2><p><br /></p><p>TCP 断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了 4 个动作，张三挥手 (fin)——李四伤感地微笑 (ack)——李四挥手 (fin)——张三伤感地微笑 (ack)。</p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912515-4f88e8e6-71fe-458e-9c1b-d31c1970fb75.gif#align=left&amp;display=inline&amp;height=900&amp;originHeight=900&amp;originWidth=720&amp;size=0&amp;width=720\" style=\"max-width: 600px; width: 720px;\" /></p><p><br /></p><p>之所以中间的两个动作没有合并，是因为 tcp 存在「半关闭」状态，也就是单向关闭。张三已经挥了手，可是人还没有走，只是不再说话，但是耳朵还是可以继续听，李四呢继续喊话。等待李四累了，也不再说话了，朝张三挥了挥手，张三伤感地微笑了一下，才彻底结束了。</p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/gif/99434/1548127912481-5df7bcc4-382c-4b22-a9cd-c5e4549a6cf6.gif#align=left&amp;display=inline&amp;height=360&amp;originHeight=360&amp;originWidth=676&amp;size=0&amp;width=676\" style=\"max-width: 600px; width: 676px;\" /></p><p><br /></p><p>上面有一个非常特殊的状态<code>time_wait</code>，它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是 4 分钟，4 分钟后才会进入到 closed 状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。</p><p><br /></p><p>它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续 4 分钟的<code>time_wait</code>状态，不能释放套接字资源 (端口)，就好比守寡期，这段时间内套接字资源(端口) 不得回收利用。</p><p><br /></p><p>它的作用是重传最后一个 ack 报文，确保对方可以收到。因为如果对方没有收到 ack 的话，会重传 fin 报文，处于 time_wait 状态的套接字会立即向对方重发 ack 报文。</p><p><br /></p><p>同时在这段时间内，该链接在对话期间于网际路由上产生的残留报文 (因为路径过于崎岖，数据报文走的时间太长，重传的报文都收到了，原始报文还在路上) 传过来时，都会被立即丢弃掉。4 分钟的时间足以使得这些残留报文彻底消逝。不然当新的端口被重复利用时，这些残留报文可能会干扰新的链接。</p><p><br /></p><p>4 分钟就是 2 个 MSL，每个 MSL 是 2 分钟。MSL 就是<code>maximium segment lifetime</code>——最长报文寿命。这个时间是由官方 RFC 协议规定的。至于为什么是 2 个 MSL 而不是 1 个 MSL，我还没有看到一个非常满意的解释。</p><p><br /></p><p>四次挥手也并不总是四次挥手，中间的两个动作有时候是可以合并一起进行的，这个时候就成了三次挥手，主动关闭方就会从<code>fin_wait_1</code>状态直接进入到<code>time_wait</code>状态，跳过了<code>fin_wait_2</code>状态。</p><p><br /></p><h2 id=\"25f9c7fa\">总结</h2><p><br /></p><p>TCP 状态转换是一个非常复杂的过程，本文仅对一些简单的基础知识点进行了类比讲解。关于 TCP 的更多知识还需要读者去搜寻相关技术文章进入深入学习。如果读者对 TCP 的基础知识掌握得比较牢固，高级的知识理解起来就不会太过于吃力。</p><p><br /></p><p></p><p><br /></p><p>关于 TCP 的更多文章，还请关注微信公众号「码洞」进行订阅，后续我会持续更新更多细节。</p><p><br /></p><p>如果觉得本文写的质量还可以，就给我的掘金小册捧捧场吧</p><p><br /></p><p><a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a> <a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a> <a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a></p><p><br /></p><p></p><p><br /></p><p><a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a> <a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a> <a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a></p>",
    "body_lake": "<!doctype lake><blockquote style=\"padding-left: 1em;\"><p>本文由 <a href=\"http://ksria.com/simpread/\" target=\"_blank\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://juejin.im/post/5b29d2c4e51d4558b80b1d8c\" target=\"_blank\">https://juejin.im/post/5b29d2c4e51d4558b80b1d8c</a></p></blockquote><p><br /></p><p>TCP 三次握手和四次挥手的问题在面试中是最为常见的考点之一。很多读者都知道三次和四次，但是如果问深入一点，他们往往都无法作出准确回答。</p><p><br /></p><p>本篇尝试使用动画来对这个知识点进行讲解，期望读者们可以更加简单地地理解 TCP 交互的本质。</p><p><br /></p><h2 id=\"e518c6a4\">TCP 三次握手</h2><p><br /></p><p>TCP 三次握手就好比两个人在街上隔着 50 米看见了对方，但是因为雾霾等原因不能 100% 确认，所以要通过招手的方式相互确定对方是否认识自己。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fgif%2F99434%2F1548127912493-b6ded71c-8a9e-4eab-8756-1f98b471b716.gif%22%2C%22originWidth%22%3A720%2C%22originHeight%22%3A900%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A720%2C%22height%22%3A900%7D\"></card></p><p><br /></p><p>张三首先向李四招手 (<strong>syn</strong>)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑 (<strong>ack</strong>)。张三看到李四微笑后确认了李四成功辨认出了自己 (进入 <strong>estalished</strong> 状态)。</p><p><br /></p><p>但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手 (<strong>syn</strong>)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑 (<strong>ack</strong>)，李四看到对方的微笑后确认了张三就是在向自己打招呼 (进入 <strong>established</strong> 状态)。</p><p><br /></p><p>于是两人加快步伐，走到了一起，相互拥抱。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fgif%2F99434%2F1548127912466-816c90f7-7ec9-4502-8578-2fd3beca8131.gif%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A480%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A398%7D\"></card></p><p><br /></p><p>我们看到这个过程中一共是四个动作，张三招手 -- 李四点头微笑 -- 李四招手 -- 张三点头微笑。其中李四连续进行了 2 个动作，先是点头微笑 (回复对方)，然后再次招手 (寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑 (<strong>syn+ack</strong>)。于是四个动作就简化成了三个动作，张三招手 -- 李四点头微笑并招手 -- 张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。</p><p><br /></p><p>我们看到有两个中间状态，<strong>syn_sent</strong> 和 <strong>syn_rcvd</strong>，这两个状态叫着「半打开」状态，就是向对方招手了，但是还没来得及看到对方的点头微笑。<strong>syn_sent</strong> 是主动打开方的「半打开」状态，<strong>syn_rcvd</strong> 是被动打开方的「半打开」状态。客户端是主动打开方，服务器是被动打开方。</p><p><br /></p><ul><li>syn_sent: syn package has been sent</li></ul><ul><li>syn_rcvd: syn package has been received</li></ul><p><br /></p><h2 id=\"d03d6057\">TCP 数据传输</h2><p><br /></p><p>TCP 数据传输就是两个人隔空对话，差了一点距离，所以需要对方反复确认听见了自己的话。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fgif%2F99434%2F1548127912513-e410671a-076b-48a0-abf0-9da8e3fa7a77.gif%22%2C%22originWidth%22%3A640%2C%22originHeight%22%3A900%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A640%2C%22height%22%3A900%7D\"></card></p><p><br /></p><p>张三喊了一句话 (data)，李四听见了之后要向张三回复自己听见了 (ack)。</p><p><br /></p><p>如果张三喊了一句，半天没听到李四回复，张三就认为自己的话被大风吹走了，李四没听见，所以需要重新喊话，这就是 tcp 重传。</p><p><br /></p><p>也有可能是李四听到了张三的话，但是李四向张三的回复被大风吹走了，以至于张三没听见李四的回复。张三并不能判断究竟是自己的话被大风吹走了还是李四的回复被大风吹走了，张三也不用管，重传一下就是。</p><p><br /></p><p>既然会重传，李四就有可能同一句话听见了两次，这就是「去重」。「重传」和「去重」工作操作系统的网络内核模块都已经帮我们处理好了，用户层是不用关心的。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fgif%2F99434%2F1548127912461-52d8902c-0f8b-4fc0-ad15-d40e7bb79786.gif%22%2C%22originWidth%22%3A960%2C%22originHeight%22%3A400%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A311%7D\"></card></p><p><br /></p><p>张三可以向李四喊话，同样李四也可以向张三喊话，因为 tcp 链接是「双工的」，双方都可以主动发起数据传输。不过无论是哪方喊话，都需要收到对方的确认才能认为对方收到了自己的喊话。</p><p><br /></p><p>张三可能是个高射炮，一说连说了八句话，这时候李四可以不用一句一句回复，而是连续听了这八句话之后，一起向对方回复说前面你说的八句话我都听见了，这就是批量 ack。但是张三也不能一次性说了太多话，李四的脑子短时间可能无法消化太多，两人之间需要有协商好的合适的发送和接受速率，这个就是「TCP 窗口大小」。</p><p><br /></p><p>网络环境的数据交互同人类之间的对话还要复杂一些，它存在数据包乱序的现象。同一个来源发出来的不同数据包在「网际路由」上可能会走过不同的路径，最终达到同一个地方时，顺序就不一样了。操作系统的网络内核模块会负责对数据包进行排序，到用户层时顺序就已经完全一致了。</p><p><br /></p><h2 id=\"6d1e120a\">TCP 四次挥手</h2><p><br /></p><p>TCP 断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了 4 个动作，张三挥手 (fin)——李四伤感地微笑 (ack)——李四挥手 (fin)——张三伤感地微笑 (ack)。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fgif%2F99434%2F1548127912515-4f88e8e6-71fe-458e-9c1b-d31c1970fb75.gif%22%2C%22originWidth%22%3A720%2C%22originHeight%22%3A900%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A720%2C%22height%22%3A900%7D\"></card></p><p><br /></p><p>之所以中间的两个动作没有合并，是因为 tcp 存在「半关闭」状态，也就是单向关闭。张三已经挥了手，可是人还没有走，只是不再说话，但是耳朵还是可以继续听，李四呢继续喊话。等待李四累了，也不再说话了，朝张三挥了挥手，张三伤感地微笑了一下，才彻底结束了。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fgif%2F99434%2F1548127912481-5df7bcc4-382c-4b22-a9cd-c5e4549a6cf6.gif%22%2C%22originWidth%22%3A676%2C%22originHeight%22%3A360%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A676%2C%22height%22%3A360%7D\"></card></p><p><br /></p><p>上面有一个非常特殊的状态<code>time_wait</code>，它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是 4 分钟，4 分钟后才会进入到 closed 状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。</p><p><br /></p><p>它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续 4 分钟的<code>time_wait</code>状态，不能释放套接字资源 (端口)，就好比守寡期，这段时间内套接字资源(端口) 不得回收利用。</p><p><br /></p><p>它的作用是重传最后一个 ack 报文，确保对方可以收到。因为如果对方没有收到 ack 的话，会重传 fin 报文，处于 time_wait 状态的套接字会立即向对方重发 ack 报文。</p><p><br /></p><p>同时在这段时间内，该链接在对话期间于网际路由上产生的残留报文 (因为路径过于崎岖，数据报文走的时间太长，重传的报文都收到了，原始报文还在路上) 传过来时，都会被立即丢弃掉。4 分钟的时间足以使得这些残留报文彻底消逝。不然当新的端口被重复利用时，这些残留报文可能会干扰新的链接。</p><p><br /></p><p>4 分钟就是 2 个 MSL，每个 MSL 是 2 分钟。MSL 就是<code>maximium segment lifetime</code>——最长报文寿命。这个时间是由官方 RFC 协议规定的。至于为什么是 2 个 MSL 而不是 1 个 MSL，我还没有看到一个非常满意的解释。</p><p><br /></p><p>四次挥手也并不总是四次挥手，中间的两个动作有时候是可以合并一起进行的，这个时候就成了三次挥手，主动关闭方就会从<code>fin_wait_1</code>状态直接进入到<code>time_wait</code>状态，跳过了<code>fin_wait_2</code>状态。</p><p><br /></p><h2 id=\"25f9c7fa\">总结</h2><p><br /></p><p>TCP 状态转换是一个非常复杂的过程，本文仅对一些简单的基础知识点进行了类比讲解。关于 TCP 的更多知识还需要读者去搜寻相关技术文章进入深入学习。如果读者对 TCP 的基础知识掌握得比较牢固，高级的知识理解起来就不会太过于吃力。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22%22%2C%22originWidth%22%3A258%2C%22originHeight%22%3A258%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A258%2C%22height%22%3A258%2C%22status%22%3A%22error%22%2C%22percent%22%3A0%2C%22message%22%3A%22%E5%9B%BE%E7%89%87%E4%B8%8D%E6%94%AF%E6%8C%81%E6%8B%B7%E8%B4%9D%E5%A4%8D%E5%88%B6%EF%BC%8C%E8%AF%B7%E5%8D%95%E7%8B%AC%E5%A4%8D%E5%88%B6%E4%B8%8A%E4%BC%A0%22%2C%22size%22%3A0%7D\"></card></p><p><br /></p><p>关于 TCP 的更多文章，还请关注微信公众号「码洞」进行订阅，后续我会持续更新更多细节。</p><p><br /></p><p>如果觉得本文写的质量还可以，就给我的掘金小册捧捧场吧</p><p><br /></p><p><a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a> <a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a> <a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22%22%2C%22originWidth%22%3A650%2C%22originHeight%22%3A910%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A650%2C%22height%22%3A910%2C%22status%22%3A%22error%22%2C%22message%22%3A%22%E5%9B%BE%E7%89%87%E4%B8%8D%E6%94%AF%E6%8C%81%E6%8B%B7%E8%B4%9D%E5%A4%8D%E5%88%B6%EF%BC%8C%E8%AF%B7%E5%8D%95%E7%8B%AC%E5%A4%8D%E5%88%B6%E4%B8%8A%E4%BC%A0%22%2C%22size%22%3A0%7D\"></card></p><p><br /></p><p><a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a> <a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a> <a href=\"https://juejin.im/book/5af56a3c518825426642e004\" target=\"_blank\"><strong>深入理解 RPC</strong></a></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T03:32:04.000Z",
    "deleted_at": null,
    "created_at": "2019-01-22T03:31:31.000Z",
    "updated_at": "2019-05-21T08:16:29.000Z",
    "published_at": "2019-01-22T03:32:04.000Z",
    "first_published_at": "2019-01-22T03:32:04.000Z",
    "word_count": 2120,
    "cover": "",
    "description": "本文由 简悦 SimpRead 转码， 原文地址 https://juejin.im/post/5b29d2c4e51d4558b80b1d8cTCP 三次握手和四次挥手的问题在面试中是最为常见的考点之一。很多读者都知道三次和四次，但是如果问深入一点，他们往往都无法作出准确回答。本篇尝试使用动...",
    "custom_description": "本文由 简悦 SimpRead 转码， 原文地址 https://juejin.im/post/5b29d2c4e51d4558b80b1d8cTCP 三次握手和四次挥手的问题在面试中是最为常见的考点之一。很多读者都知道三次和四次，但是如果问深入一点，他们往往都无法作出准确回答。本篇尝试使用动...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1171192,
    "slug": "xdngk8",
    "title": "Java8 新特性指导手册",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [https://juejin.im/post/5c3d7c8a51882525dd591ac7](https://juejin.im/post/5c3d7c8a51882525dd591ac7)\n\n\n> 本教程翻译整理自 [github.com/winterbe/ja…](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fwinterbe%2Fjava8-tutorial)\n\n\n<a name=\"cfeff30d\"></a>\n## 目录：\n\n- [一、接口内允许添加默认实现的方法](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E6%8E%A5%E5%8F%A3%E5%86%85%E5%85%81%E8%AE%B8%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%96%B9%E6%B3%95)\n- [二、Lambda 表达式](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F)\n- [三、函数式接口 Functional Interface](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3-Functional-Interface)\n- [四、便捷的引用类的构造器及方法](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E4%BE%BF%E6%8D%B7%E7%9A%84%E5%BC%95%E7%94%A8%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E5%8F%8A%E6%96%B9%E6%B3%95)\n- [五、Lambda 访问外部变量及接口默认方法](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Lambda-%E8%AE%BF%E9%97%AE%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F%E5%8F%8A%E6%8E%A5%E5%8F%A3%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95)\n  - [5.1 访问局部变量](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E8%AE%BF%E9%97%AE%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F)\n  - [5.2 访问成员变量和静态变量](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E8%AE%BF%E9%97%AE%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F)\n  - [5.3 访问接口的默认方法](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95)\n- [六、内置的函数式接口](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E5%86%85%E7%BD%AE%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3)\n  - [6.1 Predicate 断言](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Predicate-%E6%96%AD%E8%A8%80)\n  - [6.2 Function](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Function)\n  - [6.3 Supplier 生产者](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Supplier-%E7%94%9F%E4%BA%A7%E8%80%85)\n  - [6.4 Consumer 消费者](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Consumer-%E6%B6%88%E8%B4%B9%E8%80%85)\n  - [6.5 Comparator](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Comparator)\n- [七、Optional](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Optional)\n- [八、Streams 流](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Stream-%E6%B5%81)\n  - [8.1 Filter 过滤](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Filter-%E8%BF%87%E6%BB%A4)\n  - [8.2 Sorted 排序](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Sorted-%E6%8E%92%E5%BA%8F)\n  - [8.3 Map 转换](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Map-%E8%BD%AC%E6%8D%A2)\n  - [8.4 Match 匹配](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Match-%E5%8C%B9%E9%85%8D)\n  - [8.5 Count 计数](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Count-%E8%AE%A1%E6%95%B0)\n  - [8.6 Reduce](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Reduce)\n- [九、Parallel Streams 并行流](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Parallel-Streams-%E5%B9%B6%E8%A1%8C%E6%B5%81)\n  - [9.1 顺序流排序](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E9%A1%BA%E5%BA%8F%E6%B5%81%E6%8E%92%E5%BA%8F)\n  - [9.2 并行流排序](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E5%B9%B6%E8%A1%8C%E6%B5%81%E6%8E%92%E5%BA%8F)\n- [十、Map 集合](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Map-%E9%9B%86%E5%90%88)\n- [十一、新的日期 API](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E6%96%B0%E7%9A%84%E6%97%A5%E6%9C%9F-API)\n  - [11.1 Clock](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Clock)\n  - [11.2 Timezones 时区](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Timezones-%E6%97%B6%E5%8C%BA)\n  - [11.3 LocalTime](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#LocalTime)\n  - [11.4 LocalDate](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#LocalDate)\n  - [11.4 LocalDateTime](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#LocalDateTime)\n- [十二、Annotations 注解](https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Annotations-%E6%B3%A8%E8%A7%A3)\n\n也希望学完本系列教程的小伙伴能够熟练掌握和应用 Java8 的各种特性，使其成为在工作中的一门利器。废话不多说，让我们一起开启 Java8 新特性之旅吧！\n\n---\n\n\n★★★ **如果此教程有帮助到你, 去小哈的 GitHub 帮忙 **Star** 一下吧, 谢谢啦！** [传送门](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fweiwosuoai%2Fjava8_guide) ★★★\n\n---\n\n\n<a name=\"90c0f18e\"></a>\n## 接口内允许添加默认实现的方法\n\nJava 8 允许我们通过 `default` 关键字对接口中定义的抽象方法提供一个默认的实现。\n\n请看下面示例代码：\n\n```\n// 定义一个公式接口\ninterface Formula {\n    // 计算\n    double calculate(int a);\n\n    // 求平方根\n    default double sqrt(int a) {\n        return Math.sqrt(a);\n    }\n}\n复制代码\n```\n\n在上面这个接口中，我们除了定义了一个抽象方法 `calculate`，还定义了一个带有默认实现的方法 `sqrt`。 我们在实现这个接口时，可以只需要实现 `calculate` 方法，默认方法 `sqrt` 可以直接调用即可，也就是说我们可以不必强制实现 `sqrt` 方法。\n\n> 补充：通过 `default` 关键字这个新特性，可以非常方便地对之前的接口做拓展，而此接口的实现类不必做任何改动。\n\n\n```\nFormula formula = new Formula() {\n    @Override\n    public double calculate(int a) {\n        return sqrt(a * 100);\n    }\n};\n\nformula.calculate(100);     // 100.0\nformula.sqrt(16);           // 4.0\n复制代码\n```\n\n上面通过匿名对象实现了 `Formula` 接口。但是即使是这样，我们为了完成一个 `sqrt(a * 100)` 简单计算，就写了 6 行代码，很是冗余。\n\n<a name=\"75bf3fb1\"></a>\n## Lambda 表达式\n\n在学习 `Lambda` 表达式之前，我们先来看一段老版本的示例代码，其对一个含有字符串的集合进行排序：\n\n```\nList<String> names = Arrays.asList(\"peter\", \"anna\", \"mike\", \"xenia\");\n\nCollections.sort(names, new Comparator<String>() {\n    @Override\n    public int compare(String a, String b) {\n        return b.compareTo(a);\n    }\n});\n复制代码\n```\n\n`Collections` 工具类提供了静态方法 `sort` 方法，入参是一个 `List` 集合，和一个 `Comparator` 比较器，以便对给定的 `List` 集合进行 排序。上面的示例代码创建了一个匿名内部类作为入参，这种类似的操作在我们日常的工作中随处可见。\n\nJava 8 中不再推荐这种写法，而是推荐使用 Lambda 表达：\n\n```\nCollections.sort(names, (String a, String b) -> {\n    return b.compareTo(a);\n});\n复制代码\n```\n\n正如你看到的，上面这段代码变得简短很多而且易于阅读。但是我们还可以再精炼一点：\n\n```\nCollections.sort(names, (String a, String b) -> b.compareTo(a));\n复制代码\n```\n\n对于只包含一行方法的代码块，我们可以省略大括号，直接 `return` 关键代码即可。追求极致，我们还可以让它再短点：\n\n```\nnames.sort((a, b) -> b.compareTo(a));\n复制代码\n```\n\n`List` 集合现在已经添加了 `sort` 方法。而且 Java 编译器能够根据**类型推断机制**判断出参数类型，这样，你连入参的类型都可以省略啦，怎么样，是不是感觉很强大呢！\n\n<a name=\"160243f4\"></a>\n## 函数式接口 Functional Interface\n\n抛出一个疑问：在我们书写一段 Lambda 表达式后（比如上一章节中匿名内部类的 Lambda 表达式缩写形式），Java 编译器是如何进行类型推断的，它又是怎么知道重写的哪个方法的？\n\n需要说明的是，不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。\n\n那么什么是函数式接口（Functional Interface）呢？\n\n所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。\n\n> 注意：你可能会有疑问，Java 8 中不是允许通过 defualt 关键字来为接口添加默认方法吗？那它算不算抽象方法呢？答案是：不算。因此，你可以毫无顾忌的添加默认方法，它并不违反函数式接口（Functional Interface）的定义。\n\n\n总结一下：只要接口中仅仅包含一个抽象方法，我们就可以将其改写为 Lambda 表达式。为了保证一个接口明确的被定义为一个函数式接口（Functional Interface），我们需要为该接口添加注解：`@FunctionalInterface`。这样，一旦你添加了第二个抽象方法，编译器会立刻抛出错误提示。\n\n示例代码：\n\n```\n@FunctionalInterface\ninterface Converter<F, T> {\n    T convert(F from);\n}\n复制代码\n```\n\n示例代码 2：\n\n```\nConverter<String, Integer> converter = (from) -> Integer.valueOf(from);\nInteger converted = converter.convert(\"123\");\nSystem.out.println(converted);    // 123\n复制代码\n```\n\n> 注意：上面的示例代码，即使去掉 `@FunctionalInterface` 也是好使的，它仅仅是一种约束而已。\n\n\n<a name=\"62b92c2b\"></a>\n## 便捷的引用类的构造器及方法\n\n小伙伴们，还记得上一个章节这段示例代码么：\n\n```\n@FunctionalInterface\ninterface Converter<F, T> {\n    T convert(F from);\n}\n复制代码\n```\n\n```\nConverter<String, Integer> converter = (from) -> Integer.valueOf(from);\nInteger converted = converter.convert(\"123\");\nSystem.out.println(converted);    // 123\n复制代码\n```\n\n上面这段代码，通过 Java 8 的新特性，进一步简化上面的代码：\n\n```\nConverter<String, Integer> converter = Integer::valueOf;\nInteger converted = converter.convert(\"123\");\nSystem.out.println(converted);   // 123\n复制代码\n```\n\nJava 8 中允许你通过 `::` 关键字来引用类的方法或构造器。上面的代码简单的示例了如何引用静态方法，当然，除了静态方法，我们还可以引用普通方法：\n\n```\nclass Something {\n    String startsWith(String s) {\n        return String.valueOf(s.charAt(0));\n    }\n}\n复制代码\n```\n\n```\nSomething something = new Something();\nConverter<String, String> converter = something::startsWith;\nString converted = converter.convert(\"Java\");\nSystem.out.println(converted);    // \"J\"\n复制代码\n```\n\n接下来，我们再来看看如何通过 `::` 关键字来引用类的构造器。首先，我们先来定义一个示例类，在类中声明两个构造器：\n\n```\nclass Person {\n    String firstName;\n    String lastName;\n\n    Person() {}\n\n    Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n复制代码\n```\n\n然后，我们再定义一个工厂接口，用来生成 `Person` 类：\n\n```\n// Person 工厂\ninterface PersonFactory<P extends Person> {\n    P create(String firstName, String lastName);\n}\n复制代码\n```\n\n我们可以通过 `::` 关键字来引用 `Person` 类的构造器，来代替手动去实现这个工厂接口：\n\n```\n// 直接引用 Person 构造器\nPersonFactory<Person> personFactory = Person::new;\nPerson person = personFactory.create(\"Peter\", \"Parker\");\n复制代码\n```\n\n`Person::new` 这段代码，能够直接引用 `Person` 类的构造器。然后 Java 编译器能够根据上下文选中正确的构造器去实现 `PersonFactory.create` 方法。\n\n<a name=\"c81218bf\"></a>\n## Lambda 访问外部变量及接口默认方法\n\n在本章节中，我们将会讨论如何在 lambda 表达式中访问外部变量（包括：局部变量，成员变量，静态变量，接口的默认方法.），它与匿名内部类访问外部变量很相似。\n\n<a name=\"c2e51379\"></a>\n### 访问局部变量\n\n在 Lambda 表达式中，我们可以访问外部的 `final` 类型变量，如下面的示例代码：\n\n```\n// 转换器\n@FunctionalInterface\ninterface Converter<F, T> {\n    T convert(F from);\n}\n复制代码\n```\n\n```\nfinal int num = 1;\nConverter<Integer, String> stringConverter =\n        (from) -> String.valueOf(from + num);\n\nstringConverter.convert(2);     // 3\n复制代码\n```\n\n与匿名内部类不同的是，我们不必显式声明 `num` 变量为 `final` 类型，下面这段代码同样有效：\n\n```\nint num = 1;\nConverter<Integer, String> stringConverter =\n        (from) -> String.valueOf(from + num);\n\nstringConverter.convert(2);     // 3\n复制代码\n```\n\n但是 `num` 变量必须为隐式的 `final` 类型，何为隐式的 `final` 呢？就是说到编译期为止，`num` 对象是不能被改变的，如下面这段代码，就不能被编译通过：\n\n```\nint num = 1;\nConverter<Integer, String> stringConverter =\n        (from) -> String.valueOf(from + num);\nnum = 3;\n复制代码\n```\n\n在 lambda 表达式内部改变 `num` 值同样编译不通过，需要注意, 比如下面的示例代码：\n\n```\nint num = 1;\nConverter<Integer, String> converter = (from) -> {\n\tString value = String.valueOf(from + num);\n\tnum = 3;\n\treturn value;\n};\n复制代码\n```\n\n<a name=\"f0b07ba6\"></a>\n### 访问成员变量和静态变量\n\n上一章节中，了解了如何在 Lambda 表达式中访问局部变量。与局部变量相比，在 Lambda 表达式中对成员变量和静态变量拥有读写权限：\n\n```\n@FunctionalInterface\n    interface Converter<F, T> {\n        T convert(F from);\n    }\n复制代码\n```\n\n```\nclass Lambda4 {\n        // 静态变量\n        static int outerStaticNum;\n        // 成员变量\n        int outerNum;\n\n        void testScopes() {\n            Converter<Integer, String> stringConverter1 = (from) -> {\n                // 对成员变量赋值\n                outerNum = 23;\n                return String.valueOf(from);\n            };\n\n            Converter<Integer, String> stringConverter2 = (from) -> {\n                // 对静态变量赋值\n                outerStaticNum = 72;\n                return String.valueOf(from);\n            };\n        }\n    }\n复制代码\n```\n\n<a name=\"e9841639\"></a>\n### 访问接口的默认方法\n\n还记得第一章节中定义的那个 `Formula` (公式) 接口吗？\n\n```\n@FunctionalInterface\ninterface Formula {\n\t// 计算\n\tdouble calculate(int a);\n\n\t// 求平方根\n\tdefault double sqrt(int a) {\n\t\treturn Math.sqrt(a);\n\t}\n}\n复制代码\n```\n\n当时，我们在接口中定义了一个带有默认实现的 `sqrt` 求平方根方法，在匿名内部类中我们可以很方便的访问此方法：\n\n```\nFormula formula = new Formula() {\n\t@Override\n\tpublic double calculate(int a) {\n\t\treturn sqrt(a * 100);\n\t}\n};\n复制代码\n```\n\n但是在 lambda 表达式中可不行：\n\n```\nFormula formula = (a) -> sqrt(a * 100);\n复制代码\n```\n\n带有默认实现的接口方法，是**不能**在 lambda 表达式中访问的，上面这段代码将无法被编译通过。\n\n<a name=\"f5de65ac\"></a>\n## 内置的函数式接口\n\nJDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 Comparator 和 Runnable，Java 8 为他们都添加了 [FunctionalInterface ]()注解，以用来支持 Lambda 表达式。\n\n值得一提的是，除了 Comparator 和 Runnable 外，还有一些新的函数式接口，它们很多都借鉴于知名的 [Google Guava](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fgoogle%2Fguava) 库。\n\n对于它们，即使你已经非常熟悉了，还是最好了解一下的：\n\n<a name=\"cca10afe\"></a>\n### Predicate 断言\n\n`Predicate` 是一个可以指定入参类型，并返回 boolean 值的函数式接口。它内部提供了一些带有默认实现的方法，可以 被用来组合一个复杂的逻辑判断（`and`, `or`, `negate`）：\n\n```\nPredicate<String> predicate = (s) -> s.length() > 0;\n\npredicate.test(\"foo\");              // true\npredicate.negate().test(\"foo\");     // false\n\nPredicate<Boolean> nonNull = Objects::nonNull;\nPredicate<Boolean> isNull = Objects::isNull;\n\nPredicate<String> isEmpty = String::isEmpty;\nPredicate<String> isNotEmpty = isEmpty.negate();\n复制代码\n```\n\n<a name=\"Function\"></a>\n### Function\n\n`Function` 函数式接口的作用是，我们可以为其提供一个原料，他给生产一个最终的产品。通过它提供的默认方法，组合, 链行处理 (`compose`, `andThen`)：\n\n```\nFunction<String, Integer> toInteger = Integer::valueOf;\nFunction<String, String> backToString = toInteger.andThen(String::valueOf);\n\nbackToString.apply(\"123\");     // \"123\"\n复制代码\n```\n\n<a name=\"8dda89e0\"></a>\n### Supplier 生产者\n\n`Supplier` 与 `Function` 不同，它不接受入参，直接为我们生产一个指定的结果，有点像生产者模式：\n\n```\nclass Person {\n    String firstName;\n    String lastName;\n\n    Person() {}\n\n    Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n复制代码\n```\n\n```\nSupplier<Person> personSupplier = Person::new;\npersonSupplier.get();   // new Person\n复制代码\n```\n\n<a name=\"37c62d93\"></a>\n### Consumer 消费者\n\n对于 `Consumer`，我们需要提供入参，用来被消费，如下面这段示例代码：\n\n```\nclass Person {\n    String firstName;\n    String lastName;\n\n    Person() {}\n\n    Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n复制代码\n```\n\n```\nConsumer<Person> greeter = (p) -> System.out.println(\"Hello, \" + p.firstName);\ngreeter.accept(new Person(\"Luke\", \"Skywalker\"));\n复制代码\n```\n\n<a name=\"Comparator\"></a>\n### Comparator\n\n`Comparator` 在 Java 8 之前是使用比较普遍的。Java 8 中除了将其升级成了函数式接口，还为它拓展了一些默认方法：\n\n```\nComparator<Person> comparator = (p1, p2) -> p1.firstName.compareTo(p2.firstName);\n\nPerson p1 = new Person(\"John\", \"Doe\");\nPerson p2 = new Person(\"Alice\", \"Wonderland\");\n\ncomparator.compare(p1, p2);             // > 0\ncomparator.reversed().compare(p1, p2);  // < 0\n复制代码\n```\n\n<a name=\"Optional\"></a>\n## Optional\n\n首先，`Optional` 它不是一个函数式接口，设计它的目的是为了防止空指针异常（`NullPointerException`），要知道在 Java 编程中， 空指针异常可是臭名昭著的。\n\n让我们来快速了解一下 `Optional` 要如何使用！你可以将 `Optional` 看做是包装对象（可能是 `null`, 也有可能非 `null`）的容器。当你定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，你就可以考虑用 `Optional` 来包装它，这也是在 Java 8 被推荐使用的做法。\n\n```\nOptional<String> optional = Optional.of(\"bam\");\n\noptional.isPresent();           // true\noptional.get();                 // \"bam\"\noptional.orElse(\"fallback\");    // \"bam\"\n\noptional.ifPresent((s) -> System.out.println(s.charAt(0)));     // \"b\"\n复制代码\n```\n\n<a name=\"6d24bd9f\"></a>\n## Stream 流\n\n这一章节，我们开始步入学习 `Stream` 流。\n\n_什么是 `Stream` 流？_\n\n简单来说，我们可以使用 `java.util.Stream` 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 _中间操作_ 亦或是 _终端操作_。 终端操作会返回一个结果，而中间操作会返回一个 `Stream` 流。\n\n需要注意的是，你只能对实现了 `java.util.Collection` 接口的类做流的操作。\n\n> `Map` 不支持 `Stream` 流。\n\n\n`Stream` 流支持同步执行，也支持并发执行。\n\n让我们开始步入学习的旅程吧！Go !\n\n<a name=\"35f21c77\"></a>\n### Filter 过滤\n\n首先，我们创建一个 `List` 集合：\n\n```\nList<String> stringCollection = new ArrayList<>();\nstringCollection.add(\"ddd2\");\nstringCollection.add(\"aaa2\");\nstringCollection.add(\"bbb1\");\nstringCollection.add(\"aaa1\");\nstringCollection.add(\"bbb3\");\nstringCollection.add(\"ccc\");\nstringCollection.add(\"bbb2\");\nstringCollection.add(\"ddd1\");\n复制代码\n```\n\n`Filter` 的入参是一个 `Predicate`, 上面已经说到，`Predicate` 是一个断言的中间操作，它能够帮我们筛选出我们需要的集合元素。它的返参同样 是一个 `Stream` 流，我们可以通过 `foreach` 终端操作，来打印被筛选的元素：\n\n```\nstringCollection\n    .stream()\n    .filter((s) -> s.startsWith(\"a\"))\n    .forEach(System.out::println);\n\n// \"aaa2\", \"aaa1\"\n复制代码\n```\n\n> 注意：`foreach` 是一个终端操作，它的返参是 `void`, 我们无法对其再次进行流操作。\n\n\n<a name=\"4ac3d996\"></a>\n### Sorted 排序\n\n`Sorted` 同样是一个中间操作，它的返参是一个 `Stream` 流。另外，我们可以传入一个 `Comparator` 用来自定义排序，如果不传，则使用默认的排序规则。\n\n```\nstringCollection\n    .stream()\n    .sorted()\n    .filter((s) -> s.startsWith(\"a\"))\n    .forEach(System.out::println);\n\n// \"aaa1\", \"aaa2\"\n复制代码\n```\n\n需要注意，`sorted` 不会对 `stringCollection` 做出任何改变，`stringCollection` 还是原有的那些个元素，且顺序不变：\n\n```\nSystem.out.println(stringCollection);\n// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1\n复制代码\n```\n\n<a name=\"78e2f144\"></a>\n### Map 转换\n\n中间操作 `Map` 能够帮助我们将 `List` 中的每一个元素做功能处理。例如下面的示例，通过 `map` 我们将每一个 `string` 转成大写：\n\n```\nstringCollection\n    .stream()\n    .map(String::toUpperCase)\n    .sorted((a, b) -> b.compareTo(a))\n    .forEach(System.out::println);\n\n// \"DDD2\", \"DDD1\", \"CCC\", \"BBB3\", \"BBB2\", \"AAA2\", \"AAA1\"\n复制代码\n```\n\n另外，我们还可以做对象之间的转换，业务中比较常用的是将 `DO`（数据库对象） 转换成 `BO`（业务对象） 。\n\n<a name=\"b1e9fab6\"></a>\n### Match 匹配\n\n顾名思义，`match` 用来做匹配操作，它的返回值是一个 `boolean` 类型。通过 `match`, 我们可以方便的验证一个 `list` 中是否存在某个类型的元素。\n\n```\n// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true\nboolean anyStartsWithA =\n    stringCollection\n        .stream()\n        .anyMatch((s) -> s.startsWith(\"a\"));\n\nSystem.out.println(anyStartsWithA);      // true\n\n// 验证 list 中 string 是否都是以 a 开头的\nboolean allStartsWithA =\n    stringCollection\n        .stream()\n        .allMatch((s) -> s.startsWith(\"a\"));\n\nSystem.out.println(allStartsWithA);      // false\n\n// 验证 list 中 string 是否都不是以 z 开头的,\nboolean noneStartsWithZ =\n    stringCollection\n        .stream()\n        .noneMatch((s) -> s.startsWith(\"z\"));\n\nSystem.out.println(noneStartsWithZ);      // true\n复制代码\n```\n\n<a name=\"d46dce25\"></a>\n### Count 计数\n\n`count` 是一个终端操作，它能够统计 `stream` 流中的元素总数，返回值是 `long` 类型。\n\n```\n// 先对 list 中字符串开头为 b 进行过滤，让后统计数量\nlong startsWithB =\n    stringCollection\n        .stream()\n        .filter((s) -> s.startsWith(\"b\"))\n        .count();\n\nSystem.out.println(startsWithB);    // 3\n复制代码\n```\n\n<a name=\"Reduce\"></a>\n### Reduce\n\n`Reduce` 中文翻译为：_减少、缩小_。通过入参的 `Function`，我们能够将 `list` 归约成一个值。它的返回类型是 `Optional` 类型。\n\n```\nOptional<String> reduced =\n    stringCollection\n        .stream()\n        .sorted()\n        .reduce((s1, s2) -> s1 + \"#\" + s2);\n\nreduced.ifPresent(System.out::println);\n// \"aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2\"\n复制代码\n```\n\n<a name=\"b2264d65\"></a>\n## Parallel-Streams 并行流\n\n前面章节我们说过，`stream` 流是支持**顺序**和**并行**的。顺序流操作是单线程操作，而并行流是通过多线程来处理的，能够充分利用物理机 多核 CPU 的优势，同时处理速度更快。\n\n首先，我们创建一个包含 1000000 UUID list 集合。\n\n```\nint max = 1000000;\nList<String> values = new ArrayList<>(max);\nfor (int i = 0; i < max; i++) {\n    UUID uuid = UUID.randomUUID();\n    values.add(uuid.toString());\n}\n复制代码\n```\n\n分别通过顺序流和并行流，对这个 list 进行排序，测算耗时:\n\n<a name=\"111628cc\"></a>\n### 顺序流排序\n\n```\n// 纳秒\nlong t0 = System.nanoTime();\n\nlong count = values.stream().sorted().count();\nSystem.out.println(count);\n\nlong t1 = System.nanoTime();\n\n// 纳秒转微秒\nlong millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);\nSystem.out.println(String.format(\"顺序流排序耗时: %d ms\", millis));\n\n// 顺序流排序耗时: 899 ms\n\n复制代码\n```\n\n<a name=\"eb499c12\"></a>\n### 并行流排序\n\n```\n// 纳秒\nlong t0 = System.nanoTime();\n\nlong count = values.parallelStream().sorted().count();\nSystem.out.println(count);\n\nlong t1 = System.nanoTime();\n\n// 纳秒转微秒\nlong millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);\nSystem.out.println(String.format(\"并行流排序耗时: %d ms\", millis));\n\n// 并行流排序耗时: 472 ms\n复制代码\n```\n\n正如你所见，同样的逻辑处理，通过并行流，我们的性能提升了近 **50%**。完成这一切，我们需要做的仅仅是将 `stream` 改成了 `parallelStream`。\n\n<a name=\"8321d67b\"></a>\n## Map 集合\n\n前面已经提到过 `Map` 是不支持 `Stream` 流的，因为 `Map` 接口并没有像 `Collection` 接口那样，定义了 `stream()` 方法。但是，我们可以对其 `key`, `values`, `entry` 使用 流操作，如 `map.keySet().stream()`, `map.values().stream()` 和 `map.entrySet().stream()`.\n\n另外, JDK 8 中对 `map` 提供了一些其他新特性:\n\n```\nMap<Integer, String> map = new HashMap<>();\n\nfor (int i = 0; i < 10; i++) {\n    // 与老版不同的是，putIfAbent() 方法在 put 之前，\n    // 会判断 key 是否已经存在，存在则直接返回 value, 否则 put, 再返回 value\n    map.putIfAbsent(i, \"val\" + i);\n}\n\n// forEach 可以很方便地对 map 进行遍历操作\nmap.forEach((key, value) -> System.out.println(value));\n复制代码\n```\n\n除了上面的 `putIfAbsent()` 和 `forEach()` 外，我们还可以很方便地对某个 `key` 的值做相关操作：\n\n```\n// computeIfPresent(), 当 key 存在时，才会做相关处理\n// 如下：对 key 为 3 的值，内部会先判断值是否存在，存在，则做 value + key 的拼接操作\nmap.computeIfPresent(3, (num, val) -> val + num);\nmap.get(3);             // val33\n\n// 先判断 key 为 9 的元素是否存在，存在，则做删除操作\nmap.computeIfPresent(9, (num, val) -> null);\nmap.containsKey(9);     // false\n\n// computeIfAbsent(), 当 key 不存在时，才会做相关处理\n// 如下：先判断 key 为 23 的元素是否存在，不存在，则添加\nmap.computeIfAbsent(23, num -> \"val\" + num);\nmap.containsKey(23);    // true\n\n// 先判断 key 为 3 的元素是否存在，存在，则不做任何处理\nmap.computeIfAbsent(3, num -> \"bam\");\nmap.get(3);             // val33\n复制代码\n```\n\n关于删除操作，JDK 8 中提供了能够新的 `remove()` API:\n\n```\nmap.remove(3, \"val3\");\nmap.get(3);             // val33\n\nmap.remove(3, \"val33\");\nmap.get(3);             // null\n复制代码\n```\n\n如上代码，只有当给定的 `key` 和 `value` 完全匹配时，才会执行删除操作。\n\n关于添加方法，JDK 8 中提供了带有默认值的 `getOrDefault()` 方法：\n\n```\n// 若 key 42 不存在，则返回 not found\nmap.getOrDefault(42, \"not found\");  // not found\n复制代码\n```\n\n对于 `value` 的合并操作也变得更加简单：\n\n```\n// merge 方法，会先判断进行合并的 key 是否存在，不存在，则会添加元素\nmap.merge(9, \"val9\", (value, newValue) -> value.concat(newValue));\nmap.get(9);             // val9\n\n// 若 key 的元素存在，则对 value 执行拼接操作\nmap.merge(9, \"concat\", (value, newValue) -> value.concat(newValue));\nmap.get(9);             // val9concat\n复制代码\n```\n\n<a name=\"df70aa39\"></a>\n## 新的日期 API\n\nJava 8 中在包 `java.time` 下添加了新的日期 API. 它和 [Joda-Time](https://link.juejin.im/?target=http%3A%2F%2Fwww.joda.org%2Fjoda-time%2F) 库相似，但又不完全相同。接下来，我会通过一些示例代码介绍一下新 API 中 最关键的特性：\n\n<a name=\"Clock\"></a>\n### Clock\n\n`Clock` 提供对当前日期和时间的访问。我们可以利用它来替代 `System.currentTimeMillis()` 方法。另外，通过 `clock.instant()` 能够获取一个 `instant` 实例， 此实例能够方便地转换成老版本中的 `java.util.Date` 对象。\n\n```\nClock clock = Clock.systemDefaultZone();\nlong millis = clock.millis();\n\nInstant instant = clock.instant();\nDate legacyDate = Date.from(instant);   // 老版本 java.util.Date\n复制代码\n```\n\n<a name=\"4791e622\"></a>\n### Timezones 时区\n\n`ZoneId` 代表时区类。通过静态工厂方法方便地获取它，入参我们可以传入某个时区编码。另外，时区类还定义了一个偏移量，用来在当前时刻或某时间 与目标时区时间之间进行转换。\n\n```\nSystem.out.println(ZoneId.getAvailableZoneIds());\n// prints all available timezone ids\n\nZoneId zone1 = ZoneId.of(\"Europe/Berlin\");\nZoneId zone2 = ZoneId.of(\"Brazil/East\");\nSystem.out.println(zone1.getRules());\nSystem.out.println(zone2.getRules());\n\n// ZoneRules[currentStandardOffset=+01:00]\n// ZoneRules[currentStandardOffset=-03:00]\n复制代码\n```\n\n<a name=\"LocalTime\"></a>\n### LocalTime\n\n`LocalTime` 表示一个没有指定时区的时间类，例如，`10 p.m`. 或者 `17：30:15`，下面示例代码中，将会使用上面创建的 时区对象创建两个 `LocalTime`。然后我们会比较两个时间，并计算它们之间的小时和分钟的不同。\n\n```\nLocalTime now1 = LocalTime.now(zone1);\nLocalTime now2 = LocalTime.now(zone2);\n\nSystem.out.println(now1.isBefore(now2));  // false\n\nlong hoursBetween = ChronoUnit.HOURS.between(now1, now2);\nlong minutesBetween = ChronoUnit.MINUTES.between(now1, now2);\n\nSystem.out.println(hoursBetween);       // -3\nSystem.out.println(minutesBetween);     // -239\n复制代码\n```\n\n`LocalTime` 提供多个静态工厂方法，目的是为了简化对时间对象实例的创建和操作，包括对时间字符串进行解析的操作等。\n\n```\nLocalTime late = LocalTime.of(23, 59, 59);\nSystem.out.println(late);       // 23:59:59\n\nDateTimeFormatter germanFormatter =\n    DateTimeFormatter\n        .ofLocalizedTime(FormatStyle.SHORT)\n        .withLocale(Locale.GERMAN);\n\nLocalTime leetTime = LocalTime.parse(\"13:37\", germanFormatter);\nSystem.out.println(leetTime);   // 13:37\n复制代码\n```\n\n<a name=\"LocalDate\"></a>\n## LocalDate\n\n`LocalDate` 是一个日期对象，例如：`2014-03-11`。它和 `LocalTime` 一样是个 `final` 类型对象。下面的例子演示了如何通过加减日，月，年等来计算一个新的日期。\n\n> `LocalDate`, `LocalTime`, 因为是 `final` 类型的对象，每一次操作都会返回一个新的时间对象。\n\n\n```\nLocalDate today = LocalDate.now();\n// 今天加一天\nLocalDate tomorrow = today.plus(1, ChronoUnit.DAYS);\n// 明天减两天\nLocalDate yesterday = tomorrow.minusDays(2);\n\n// 2014 年七月的第四天\nLocalDate independenceDay = LocalDate.of(2014, Month.JULY, 4);\nDayOfWeek dayOfWeek = independenceDay.getDayOfWeek();\nSystem.out.println(dayOfWeek);    // 星期五\n复制代码\n```\n\n也可以直接解析日期字符串，生成 `LocalDate` 实例。（和 `LocalTime` 操作一样简单）\n\n```\nDateTimeFormatter germanFormatter =\n    DateTimeFormatter\n        .ofLocalizedDate(FormatStyle.MEDIUM)\n        .withLocale(Locale.GERMAN);\n\nLocalDate xmas = LocalDate.parse(\"24.12.2014\", germanFormatter);\nSystem.out.println(xmas);   // 2014-12-24\n\n复制代码\n```\n\n<a name=\"LocalDateTime\"></a>\n### LocalDateTime\n\n`LocalDateTime` 是一个**日期 - 时间**对象。你也可以将其看成是 `LocalDate` 和 `LocalTime` 的结合体。操作上，也大致相同。\n\n> `LocalDateTime` 同样是一个 `final` 类型对象。\n\n\n```\nLocalDateTime sylvester = LocalDateTime.of(2014, Month.DECEMBER, 31, 23, 59, 59);\n\nDayOfWeek dayOfWeek = sylvester.getDayOfWeek();\nSystem.out.println(dayOfWeek);      // 星期三\n\nMonth month = sylvester.getMonth();\nSystem.out.println(month);          // 十二月\n\n// 获取改时间是该天中的第几分钟\nlong minuteOfDay = sylvester.getLong(ChronoField.MINUTE_OF_DAY);\nSystem.out.println(minuteOfDay);    // 1439\n复制代码\n```\n\n如果再加上的时区信息，`LocalDateTime` 还能够被转换成 `Instance` 实例。`Instance` 能够被转换成老版本中 `java.util.Date` 对象。\n\n```\nInstant instant = sylvester\n        .atZone(ZoneId.systemDefault())\n        .toInstant();\n\nDate legacyDate = Date.from(instant);\nSystem.out.println(legacyDate);     // Wed Dec 31 23:59:59 CET 2014\n复制代码\n```\n\n格式化 `LocalDateTime` 对象就和格式化 LocalDate 或者 LocalTime 一样。除了使用预定义的格式以外，也可以自定义格式化输出。\n\n```\nDateTimeFormatter formatter =\n    DateTimeFormatter\n        .ofPattern(\"MMM dd, yyyy - HH:mm\");\n\nLocalDateTime parsed = LocalDateTime.parse(\"Nov 03, 2014 - 07:13\", formatter);\nString string = formatter.format(parsed);\nSystem.out.println(string);     // Nov 03, 2014 - 07:13\n复制代码\n```\n\n> 注意：和 `java.text.NumberFormat` 不同，新的 `DateTimeFormatter` 类是 `final` 类型的，同时也是线程安全的。更多细节请查看[这里](https://link.juejin.im/?target=http%3A%2F%2Fdownload.java.net%2Fjdk8%2Fdocs%2Fapi%2Fjava%2Ftime%2Fformat%2FDateTimeFormatter.html)\n\n\n<a name=\"44fc421c\"></a>\n## Annotations 注解\n\n在 Java 8 中，注解是可以重复的。让我通过下面的示例代码，来看看到底是咋回事。\n\n首先，我们定义一个包装注解，里面包含了一个有着实际注解的数组：\n\n```\n@interface Hints {\n    Hint[] value();\n}\n\n@Repeatable(Hints.class)\n@interface Hint {\n    String value();\n}\n复制代码\n```\n\nJava 8 中，通过 `@Repeatable`，允许我们对同一个类使用多重注解：\n\n第一种形态：使用注解容器（老方法）\n\n```\n@Hints({@Hint(\"hint1\"), @Hint(\"hint2\")})\nclass Person {}\n复制代码\n```\n\n第二种形态：使用可重复注解（新方法）\n\n```\n@Hint(\"hint1\")\n@Hint(\"hint2\")\nclass Person {}\n复制代码\n```\n\n使用第二种形态，Java 编译器能够在内部自动对 `@Hint` 进行设置。这对于需要通过反射来读取注解信息时，是非常重要的。\n\n```\nHint hint = Person.class.getAnnotation(Hint.class);\nSystem.out.println(hint);                   // null\n\nHints hints1 = Person.class.getAnnotation(Hints.class);\nSystem.out.println(hints1.value().length);  // 2\n\nHint[] hints2 = Person.class.getAnnotationsByType(Hint.class);\nSystem.out.println(hints2.length);          // 2\n复制代码\n```\n\n尽管我们绝对不会在 `Person` 类上声明 `@Hints` 注解，但是它的信息仍然是可以通过 `getAnnotation(Hints.class)` 来读取的。 并且，`getAnnotationsByType` 方法会更方便，因为它赋予了所有 `@Hints` 注解标注的方法直接的访问权限。\n\n```\n@Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE})\n@interface MyAnnotation {}\n复制代码\n```\n\n<a name=\"433531fd\"></a>\n## 结语\n\nJava 8 新特性的编程指南到此就告一段落了。当然，还有很多内容需要进一步研究和说明。这就需要靠读者您来对 JDK 8 进一步探究了， 例如：`Arrays.parallelSort`, `StampedLock` 和 `CompletableFuture` 等等，我这里也仅是起到抛砖引玉的作用而已。\n\n最后，我希望这个教程能够对您有所帮助，也希望您阅读愉快。\n\n<a name=\"b8c89356\"></a>\n## 小哈的微信公众号\n\n\n",
    "body_draft": "",
    "body_html": "<blockquote style=\"padding-left: 1em;\"><p>本文由 <a href=\"http://ksria.com/simpread/\" target=\"_blank\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://juejin.im/post/5c3d7c8a51882525dd591ac7\" target=\"_blank\">https://juejin.im/post/5c3d7c8a51882525dd591ac7</a></p></blockquote><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>本教程翻译整理自 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fwinterbe%2Fjava8-tutorial\" target=\"_blank\">github.com/winterbe/ja…</a></p></blockquote><p><br /></p><h2 id=\"cfeff30d\">目录：</h2><p><br /></p><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E6%8E%A5%E5%8F%A3%E5%86%85%E5%85%81%E8%AE%B8%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%96%B9%E6%B3%95\" target=\"_blank\">一、接口内允许添加默认实现的方法</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F\" target=\"_blank\">二、Lambda 表达式</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3-Functional-Interface\" target=\"_blank\">三、函数式接口 Functional Interface</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E4%BE%BF%E6%8D%B7%E7%9A%84%E5%BC%95%E7%94%A8%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E5%8F%8A%E6%96%B9%E6%B3%95\" target=\"_blank\">四、便捷的引用类的构造器及方法</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Lambda-%E8%AE%BF%E9%97%AE%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F%E5%8F%8A%E6%8E%A5%E5%8F%A3%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95\" target=\"_blank\">五、Lambda 访问外部变量及接口默认方法</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E8%AE%BF%E9%97%AE%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\" target=\"_blank\">5.1 访问局部变量</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E8%AE%BF%E9%97%AE%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F\" target=\"_blank\">5.2 访问成员变量和静态变量</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95\" target=\"_blank\">5.3 访问接口的默认方法</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E5%86%85%E7%BD%AE%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3\" target=\"_blank\">六、内置的函数式接口</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Predicate-%E6%96%AD%E8%A8%80\" target=\"_blank\">6.1 Predicate 断言</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Function\" target=\"_blank\">6.2 Function</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Supplier-%E7%94%9F%E4%BA%A7%E8%80%85\" target=\"_blank\">6.3 Supplier 生产者</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Consumer-%E6%B6%88%E8%B4%B9%E8%80%85\" target=\"_blank\">6.4 Consumer 消费者</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Comparator\" target=\"_blank\">6.5 Comparator</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Optional\" target=\"_blank\">七、Optional</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Stream-%E6%B5%81\" target=\"_blank\">八、Streams 流</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Filter-%E8%BF%87%E6%BB%A4\" target=\"_blank\">8.1 Filter 过滤</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Sorted-%E6%8E%92%E5%BA%8F\" target=\"_blank\">8.2 Sorted 排序</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Map-%E8%BD%AC%E6%8D%A2\" target=\"_blank\">8.3 Map 转换</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Match-%E5%8C%B9%E9%85%8D\" target=\"_blank\">8.4 Match 匹配</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Count-%E8%AE%A1%E6%95%B0\" target=\"_blank\">8.5 Count 计数</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Reduce\" target=\"_blank\">8.6 Reduce</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Parallel-Streams-%E5%B9%B6%E8%A1%8C%E6%B5%81\" target=\"_blank\">九、Parallel Streams 并行流</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E9%A1%BA%E5%BA%8F%E6%B5%81%E6%8E%92%E5%BA%8F\" target=\"_blank\">9.1 顺序流排序</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E5%B9%B6%E8%A1%8C%E6%B5%81%E6%8E%92%E5%BA%8F\" target=\"_blank\">9.2 并行流排序</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Map-%E9%9B%86%E5%90%88\" target=\"_blank\">十、Map 集合</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E6%96%B0%E7%9A%84%E6%97%A5%E6%9C%9F-API\" target=\"_blank\">十一、新的日期 API</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Clock\" target=\"_blank\">11.1 Clock</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Timezones-%E6%97%B6%E5%8C%BA\" target=\"_blank\">11.2 Timezones 时区</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#LocalTime\" target=\"_blank\">11.3 LocalTime</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#LocalDate\" target=\"_blank\">11.4 LocalDate</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#LocalDateTime\" target=\"_blank\">11.4 LocalDateTime</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Annotations-%E6%B3%A8%E8%A7%A3\" target=\"_blank\">十二、Annotations 注解</a></li></ul><p><br /></p><p>也希望学完本系列教程的小伙伴能够熟练掌握和应用 Java8 的各种特性，使其成为在工作中的一门利器。废话不多说，让我们一起开启 Java8 新特性之旅吧！</p><p><br /></p><hr /><p><br /></p><p>★★★ <strong>如果此教程有帮助到你, 去小哈的 GitHub 帮忙 </strong>Star<strong> 一下吧, 谢谢啦！</strong> <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fweiwosuoai%2Fjava8_guide\" target=\"_blank\">传送门</a> ★★★</p><p><br /></p><hr /><p><br /></p><h2 id=\"90c0f18e\">接口内允许添加默认实现的方法</h2><p><br /></p><p>Java 8 允许我们通过 <code>default</code> 关键字对接口中定义的抽象方法提供一个默认的实现。</p><p><br /></p><p>请看下面示例代码：</p><p><br /></p><pre><code>// 定义一个公式接口\ninterface Formula {\n    // 计算\n    double calculate(int a);\n\n    // 求平方根\n    default double sqrt(int a) {\n        return Math.sqrt(a);\n    }\n}\n复制代码</code></pre><p><br /></p><p>在上面这个接口中，我们除了定义了一个抽象方法 <code>calculate</code>，还定义了一个带有默认实现的方法 <code>sqrt</code>。 我们在实现这个接口时，可以只需要实现 <code>calculate</code> 方法，默认方法 <code>sqrt</code> 可以直接调用即可，也就是说我们可以不必强制实现 <code>sqrt</code> 方法。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>补充：通过 <code>default</code> 关键字这个新特性，可以非常方便地对之前的接口做拓展，而此接口的实现类不必做任何改动。</p></blockquote><p><br /></p><pre><code>Formula formula = new Formula() {\n    @Override\n    public double calculate(int a) {\n        return sqrt(a * 100);\n    }\n};\n\nformula.calculate(100);     // 100.0\nformula.sqrt(16);           // 4.0\n复制代码</code></pre><p><br /></p><p>上面通过匿名对象实现了 <code>Formula</code> 接口。但是即使是这样，我们为了完成一个 <code>sqrt(a * 100)</code> 简单计算，就写了 6 行代码，很是冗余。</p><p><br /></p><h2 id=\"75bf3fb1\">Lambda 表达式</h2><p><br /></p><p>在学习 <code>Lambda</code> 表达式之前，我们先来看一段老版本的示例代码，其对一个含有字符串的集合进行排序：</p><p><br /></p><pre><code>List&lt;String&gt; names = Arrays.asList(&quot;peter&quot;, &quot;anna&quot;, &quot;mike&quot;, &quot;xenia&quot;);\n\nCollections.sort(names, new Comparator&lt;String&gt;() {\n    @Override\n    public int compare(String a, String b) {\n        return b.compareTo(a);\n    }\n});\n复制代码</code></pre><p><br /></p><p><code>Collections</code> 工具类提供了静态方法 <code>sort</code> 方法，入参是一个 <code>List</code> 集合，和一个 <code>Comparator</code> 比较器，以便对给定的 <code>List</code> 集合进行 排序。上面的示例代码创建了一个匿名内部类作为入参，这种类似的操作在我们日常的工作中随处可见。</p><p><br /></p><p>Java 8 中不再推荐这种写法，而是推荐使用 Lambda 表达：</p><p><br /></p><pre><code>Collections.sort(names, (String a, String b) -&gt; {\n    return b.compareTo(a);\n});\n复制代码</code></pre><p><br /></p><p>正如你看到的，上面这段代码变得简短很多而且易于阅读。但是我们还可以再精炼一点：</p><p><br /></p><pre><code>Collections.sort(names, (String a, String b) -&gt; b.compareTo(a));\n复制代码</code></pre><p><br /></p><p>对于只包含一行方法的代码块，我们可以省略大括号，直接 <code>return</code> 关键代码即可。追求极致，我们还可以让它再短点：</p><p><br /></p><pre><code>names.sort((a, b) -&gt; b.compareTo(a));\n复制代码</code></pre><p><br /></p><p><code>List</code> 集合现在已经添加了 <code>sort</code> 方法。而且 Java 编译器能够根据<strong>类型推断机制</strong>判断出参数类型，这样，你连入参的类型都可以省略啦，怎么样，是不是感觉很强大呢！</p><p><br /></p><h2 id=\"160243f4\">函数式接口 Functional Interface</h2><p><br /></p><p>抛出一个疑问：在我们书写一段 Lambda 表达式后（比如上一章节中匿名内部类的 Lambda 表达式缩写形式），Java 编译器是如何进行类型推断的，它又是怎么知道重写的哪个方法的？</p><p><br /></p><p>需要说明的是，不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。</p><p><br /></p><p>那么什么是函数式接口（Functional Interface）呢？</p><p><br /></p><p>所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>注意：你可能会有疑问，Java 8 中不是允许通过 defualt 关键字来为接口添加默认方法吗？那它算不算抽象方法呢？答案是：不算。因此，你可以毫无顾忌的添加默认方法，它并不违反函数式接口（Functional Interface）的定义。</p></blockquote><p><br /></p><p>总结一下：只要接口中仅仅包含一个抽象方法，我们就可以将其改写为 Lambda 表达式。为了保证一个接口明确的被定义为一个函数式接口（Functional Interface），我们需要为该接口添加注解：<code>@FunctionalInterface</code>。这样，一旦你添加了第二个抽象方法，编译器会立刻抛出错误提示。</p><p><br /></p><p>示例代码：</p><p><br /></p><pre><code>@FunctionalInterface\ninterface Converter&lt;F, T&gt; {\n    T convert(F from);\n}\n复制代码</code></pre><p><br /></p><p>示例代码 2：</p><p><br /></p><pre><code>Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);\nInteger converted = converter.convert(&quot;123&quot;);\nSystem.out.println(converted);    // 123\n复制代码</code></pre><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>注意：上面的示例代码，即使去掉 <code>@FunctionalInterface</code> 也是好使的，它仅仅是一种约束而已。</p></blockquote><p><br /></p><h2 id=\"62b92c2b\">便捷的引用类的构造器及方法</h2><p><br /></p><p>小伙伴们，还记得上一个章节这段示例代码么：</p><p><br /></p><pre><code>@FunctionalInterface\ninterface Converter&lt;F, T&gt; {\n    T convert(F from);\n}\n复制代码</code></pre><p><br /></p><pre><code>Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);\nInteger converted = converter.convert(&quot;123&quot;);\nSystem.out.println(converted);    // 123\n复制代码</code></pre><p><br /></p><p>上面这段代码，通过 Java 8 的新特性，进一步简化上面的代码：</p><p><br /></p><pre><code>Converter&lt;String, Integer&gt; converter = Integer::valueOf;\nInteger converted = converter.convert(&quot;123&quot;);\nSystem.out.println(converted);   // 123\n复制代码</code></pre><p><br /></p><p>Java 8 中允许你通过 <code>::</code> 关键字来引用类的方法或构造器。上面的代码简单的示例了如何引用静态方法，当然，除了静态方法，我们还可以引用普通方法：</p><p><br /></p><pre><code>class Something {\n    String startsWith(String s) {\n        return String.valueOf(s.charAt(0));\n    }\n}\n复制代码</code></pre><p><br /></p><pre><code>Something something = new Something();\nConverter&lt;String, String&gt; converter = something::startsWith;\nString converted = converter.convert(&quot;Java&quot;);\nSystem.out.println(converted);    // &quot;J&quot;\n复制代码</code></pre><p><br /></p><p>接下来，我们再来看看如何通过 <code>::</code> 关键字来引用类的构造器。首先，我们先来定义一个示例类，在类中声明两个构造器：</p><p><br /></p><pre><code>class Person {\n    String firstName;\n    String lastName;\n\n    Person() {}\n\n    Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n复制代码</code></pre><p><br /></p><p>然后，我们再定义一个工厂接口，用来生成 <code>Person</code> 类：</p><p><br /></p><pre><code>// Person 工厂\ninterface PersonFactory&lt;P extends Person&gt; {\n    P create(String firstName, String lastName);\n}\n复制代码</code></pre><p><br /></p><p>我们可以通过 <code>::</code> 关键字来引用 <code>Person</code> 类的构造器，来代替手动去实现这个工厂接口：</p><p><br /></p><pre><code>// 直接引用 Person 构造器\nPersonFactory&lt;Person&gt; personFactory = Person::new;\nPerson person = personFactory.create(&quot;Peter&quot;, &quot;Parker&quot;);\n复制代码</code></pre><p><br /></p><p><code>Person::new</code> 这段代码，能够直接引用 <code>Person</code> 类的构造器。然后 Java 编译器能够根据上下文选中正确的构造器去实现 <code>PersonFactory.create</code> 方法。</p><p><br /></p><h2 id=\"c81218bf\">Lambda 访问外部变量及接口默认方法</h2><p><br /></p><p>在本章节中，我们将会讨论如何在 lambda 表达式中访问外部变量（包括：局部变量，成员变量，静态变量，接口的默认方法.），它与匿名内部类访问外部变量很相似。</p><p><br /></p><h3 id=\"c2e51379\">访问局部变量</h3><p><br /></p><p>在 Lambda 表达式中，我们可以访问外部的 <code>final</code> 类型变量，如下面的示例代码：</p><p><br /></p><pre><code>// 转换器\n@FunctionalInterface\ninterface Converter&lt;F, T&gt; {\n    T convert(F from);\n}\n复制代码</code></pre><p><br /></p><pre><code>final int num = 1;\nConverter&lt;Integer, String&gt; stringConverter =\n        (from) -&gt; String.valueOf(from + num);\n\nstringConverter.convert(2);     // 3\n复制代码</code></pre><p><br /></p><p>与匿名内部类不同的是，我们不必显式声明 <code>num</code> 变量为 <code>final</code> 类型，下面这段代码同样有效：</p><p><br /></p><pre><code>int num = 1;\nConverter&lt;Integer, String&gt; stringConverter =\n        (from) -&gt; String.valueOf(from + num);\n\nstringConverter.convert(2);     // 3\n复制代码</code></pre><p><br /></p><p>但是 <code>num</code> 变量必须为隐式的 <code>final</code> 类型，何为隐式的 <code>final</code> 呢？就是说到编译期为止，<code>num</code> 对象是不能被改变的，如下面这段代码，就不能被编译通过：</p><p><br /></p><pre><code>int num = 1;\nConverter&lt;Integer, String&gt; stringConverter =\n        (from) -&gt; String.valueOf(from + num);\nnum = 3;\n复制代码</code></pre><p><br /></p><p>在 lambda 表达式内部改变 <code>num</code> 值同样编译不通过，需要注意, 比如下面的示例代码：</p><p><br /></p><pre><code>int num = 1;\nConverter&lt;Integer, String&gt; converter = (from) -&gt; {\n\tString value = String.valueOf(from + num);\n\tnum = 3;\n\treturn value;\n};\n复制代码</code></pre><p><br /></p><h3 id=\"f0b07ba6\">访问成员变量和静态变量</h3><p><br /></p><p>上一章节中，了解了如何在 Lambda 表达式中访问局部变量。与局部变量相比，在 Lambda 表达式中对成员变量和静态变量拥有读写权限：</p><p><br /></p><pre><code>@FunctionalInterface\n    interface Converter&lt;F, T&gt; {\n        T convert(F from);\n    }\n复制代码</code></pre><p><br /></p><pre><code>class Lambda4 {\n        // 静态变量\n        static int outerStaticNum;\n        // 成员变量\n        int outerNum;\n\n        void testScopes() {\n            Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; {\n                // 对成员变量赋值\n                outerNum = 23;\n                return String.valueOf(from);\n            };\n\n            Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; {\n                // 对静态变量赋值\n                outerStaticNum = 72;\n                return String.valueOf(from);\n            };\n        }\n    }\n复制代码</code></pre><p><br /></p><h3 id=\"e9841639\">访问接口的默认方法</h3><p><br /></p><p>还记得第一章节中定义的那个 <code>Formula</code> (公式) 接口吗？</p><p><br /></p><pre><code>@FunctionalInterface\ninterface Formula {\n\t// 计算\n\tdouble calculate(int a);\n\n\t// 求平方根\n\tdefault double sqrt(int a) {\n\t\treturn Math.sqrt(a);\n\t}\n}\n复制代码</code></pre><p><br /></p><p>当时，我们在接口中定义了一个带有默认实现的 <code>sqrt</code> 求平方根方法，在匿名内部类中我们可以很方便的访问此方法：</p><p><br /></p><pre><code>Formula formula = new Formula() {\n\t@Override\n\tpublic double calculate(int a) {\n\t\treturn sqrt(a * 100);\n\t}\n};\n复制代码</code></pre><p><br /></p><p>但是在 lambda 表达式中可不行：</p><p><br /></p><pre><code>Formula formula = (a) -&gt; sqrt(a * 100);\n复制代码</code></pre><p><br /></p><p>带有默认实现的接口方法，是<strong>不能</strong>在 lambda 表达式中访问的，上面这段代码将无法被编译通过。</p><p><br /></p><h2 id=\"f5de65ac\">内置的函数式接口</h2><p><br /></p><p>JDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 Comparator 和 Runnable，Java 8 为他们都添加了 <a target=\"_blank\">FunctionalInterface </a>注解，以用来支持 Lambda 表达式。</p><p><br /></p><p>值得一提的是，除了 Comparator 和 Runnable 外，还有一些新的函数式接口，它们很多都借鉴于知名的 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fgoogle%2Fguava\" target=\"_blank\">Google Guava</a> 库。</p><p><br /></p><p>对于它们，即使你已经非常熟悉了，还是最好了解一下的：</p><p><br /></p><h3 id=\"cca10afe\">Predicate 断言</h3><p><br /></p><p><code>Predicate</code> 是一个可以指定入参类型，并返回 boolean 值的函数式接口。它内部提供了一些带有默认实现的方法，可以 被用来组合一个复杂的逻辑判断（<code>and</code>, <code>or</code>, <code>negate</code>）：</p><p><br /></p><pre><code>Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; 0;\n\npredicate.test(&quot;foo&quot;);              // true\npredicate.negate().test(&quot;foo&quot;);     // false\n\nPredicate&lt;Boolean&gt; nonNull = Objects::nonNull;\nPredicate&lt;Boolean&gt; isNull = Objects::isNull;\n\nPredicate&lt;String&gt; isEmpty = String::isEmpty;\nPredicate&lt;String&gt; isNotEmpty = isEmpty.negate();\n复制代码</code></pre><p><br /></p><h3 id=\"Function\">Function</h3><p><br /></p><p><code>Function</code> 函数式接口的作用是，我们可以为其提供一个原料，他给生产一个最终的产品。通过它提供的默认方法，组合, 链行处理 (<code>compose</code>, <code>andThen</code>)：</p><p><br /></p><pre><code>Function&lt;String, Integer&gt; toInteger = Integer::valueOf;\nFunction&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);\n\nbackToString.apply(&quot;123&quot;);     // &quot;123&quot;\n复制代码</code></pre><p><br /></p><h3 id=\"8dda89e0\">Supplier 生产者</h3><p><br /></p><p><code>Supplier</code> 与 <code>Function</code> 不同，它不接受入参，直接为我们生产一个指定的结果，有点像生产者模式：</p><p><br /></p><pre><code>class Person {\n    String firstName;\n    String lastName;\n\n    Person() {}\n\n    Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n复制代码</code></pre><p><br /></p><pre><code>Supplier&lt;Person&gt; personSupplier = Person::new;\npersonSupplier.get();   // new Person\n复制代码</code></pre><p><br /></p><h3 id=\"37c62d93\">Consumer 消费者</h3><p><br /></p><p>对于 <code>Consumer</code>，我们需要提供入参，用来被消费，如下面这段示例代码：</p><p><br /></p><pre><code>class Person {\n    String firstName;\n    String lastName;\n\n    Person() {}\n\n    Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n复制代码</code></pre><p><br /></p><pre><code>Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println(&quot;Hello, &quot; + p.firstName);\ngreeter.accept(new Person(&quot;Luke&quot;, &quot;Skywalker&quot;));\n复制代码</code></pre><p><br /></p><h3 id=\"Comparator\">Comparator</h3><p><br /></p><p><code>Comparator</code> 在 Java 8 之前是使用比较普遍的。Java 8 中除了将其升级成了函数式接口，还为它拓展了一些默认方法：</p><p><br /></p><pre><code>Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);\n\nPerson p1 = new Person(&quot;John&quot;, &quot;Doe&quot;);\nPerson p2 = new Person(&quot;Alice&quot;, &quot;Wonderland&quot;);\n\ncomparator.compare(p1, p2);             // &gt; 0\ncomparator.reversed().compare(p1, p2);  // &lt; 0\n复制代码</code></pre><p><br /></p><h2 id=\"Optional\">Optional</h2><p><br /></p><p>首先，<code>Optional</code> 它不是一个函数式接口，设计它的目的是为了防止空指针异常（<code>NullPointerException</code>），要知道在 Java 编程中， 空指针异常可是臭名昭著的。</p><p><br /></p><p>让我们来快速了解一下 <code>Optional</code> 要如何使用！你可以将 <code>Optional</code> 看做是包装对象（可能是 <code>null</code>, 也有可能非 <code>null</code>）的容器。当你定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，你就可以考虑用 <code>Optional</code> 来包装它，这也是在 Java 8 被推荐使用的做法。</p><p><br /></p><pre><code>Optional&lt;String&gt; optional = Optional.of(&quot;bam&quot;);\n\noptional.isPresent();           // true\noptional.get();                 // &quot;bam&quot;\noptional.orElse(&quot;fallback&quot;);    // &quot;bam&quot;\n\noptional.ifPresent((s) -&gt; System.out.println(s.charAt(0)));     // &quot;b&quot;\n复制代码</code></pre><p><br /></p><h2 id=\"6d24bd9f\">Stream 流</h2><p><br /></p><p>这一章节，我们开始步入学习 <code>Stream</code> 流。</p><p><br /></p><p><em>什么是 <code>Stream</code> 流？</em></p><p><br /></p><p>简单来说，我们可以使用 <code>java.util.Stream</code> 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 <em>终端操作</em>。 终端操作会返回一个结果，而中间操作会返回一个 <code>Stream</code> 流。</p><p><br /></p><p>需要注意的是，你只能对实现了 <code>java.util.Collection</code> 接口的类做流的操作。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p><code>Map</code> 不支持 <code>Stream</code> 流。</p></blockquote><p><br /></p><p><code>Stream</code> 流支持同步执行，也支持并发执行。</p><p><br /></p><p>让我们开始步入学习的旅程吧！Go !</p><p><br /></p><h3 id=\"35f21c77\">Filter 过滤</h3><p><br /></p><p>首先，我们创建一个 <code>List</code> 集合：</p><p><br /></p><pre><code>List&lt;String&gt; stringCollection = new ArrayList&lt;&gt;();\nstringCollection.add(&quot;ddd2&quot;);\nstringCollection.add(&quot;aaa2&quot;);\nstringCollection.add(&quot;bbb1&quot;);\nstringCollection.add(&quot;aaa1&quot;);\nstringCollection.add(&quot;bbb3&quot;);\nstringCollection.add(&quot;ccc&quot;);\nstringCollection.add(&quot;bbb2&quot;);\nstringCollection.add(&quot;ddd1&quot;);\n复制代码</code></pre><p><br /></p><p><code>Filter</code> 的入参是一个 <code>Predicate</code>, 上面已经说到，<code>Predicate</code> 是一个断言的中间操作，它能够帮我们筛选出我们需要的集合元素。它的返参同样 是一个 <code>Stream</code> 流，我们可以通过 <code>foreach</code> 终端操作，来打印被筛选的元素：</p><p><br /></p><pre><code>stringCollection\n    .stream()\n    .filter((s) -&gt; s.startsWith(&quot;a&quot;))\n    .forEach(System.out::println);\n\n// &quot;aaa2&quot;, &quot;aaa1&quot;\n复制代码</code></pre><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>注意：<code>foreach</code> 是一个终端操作，它的返参是 <code>void</code>, 我们无法对其再次进行流操作。</p></blockquote><p><br /></p><h3 id=\"4ac3d996\">Sorted 排序</h3><p><br /></p><p><code>Sorted</code> 同样是一个中间操作，它的返参是一个 <code>Stream</code> 流。另外，我们可以传入一个 <code>Comparator</code> 用来自定义排序，如果不传，则使用默认的排序规则。</p><p><br /></p><pre><code>stringCollection\n    .stream()\n    .sorted()\n    .filter((s) -&gt; s.startsWith(&quot;a&quot;))\n    .forEach(System.out::println);\n\n// &quot;aaa1&quot;, &quot;aaa2&quot;\n复制代码</code></pre><p><br /></p><p>需要注意，<code>sorted</code> 不会对 <code>stringCollection</code> 做出任何改变，<code>stringCollection</code> 还是原有的那些个元素，且顺序不变：</p><p><br /></p><pre><code>System.out.println(stringCollection);\n// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1\n复制代码</code></pre><p><br /></p><h3 id=\"78e2f144\">Map 转换</h3><p><br /></p><p>中间操作 <code>Map</code> 能够帮助我们将 <code>List</code> 中的每一个元素做功能处理。例如下面的示例，通过 <code>map</code> 我们将每一个 <code>string</code> 转成大写：</p><p><br /></p><pre><code>stringCollection\n    .stream()\n    .map(String::toUpperCase)\n    .sorted((a, b) -&gt; b.compareTo(a))\n    .forEach(System.out::println);\n\n// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;\n复制代码</code></pre><p><br /></p><p>另外，我们还可以做对象之间的转换，业务中比较常用的是将 <code>DO</code>（数据库对象） 转换成 <code>BO</code>（业务对象） 。</p><p><br /></p><h3 id=\"b1e9fab6\">Match 匹配</h3><p><br /></p><p>顾名思义，<code>match</code> 用来做匹配操作，它的返回值是一个 <code>boolean</code> 类型。通过 <code>match</code>, 我们可以方便的验证一个 <code>list</code> 中是否存在某个类型的元素。</p><p><br /></p><pre><code>// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true\nboolean anyStartsWithA =\n    stringCollection\n        .stream()\n        .anyMatch((s) -&gt; s.startsWith(&quot;a&quot;));\n\nSystem.out.println(anyStartsWithA);      // true\n\n// 验证 list 中 string 是否都是以 a 开头的\nboolean allStartsWithA =\n    stringCollection\n        .stream()\n        .allMatch((s) -&gt; s.startsWith(&quot;a&quot;));\n\nSystem.out.println(allStartsWithA);      // false\n\n// 验证 list 中 string 是否都不是以 z 开头的,\nboolean noneStartsWithZ =\n    stringCollection\n        .stream()\n        .noneMatch((s) -&gt; s.startsWith(&quot;z&quot;));\n\nSystem.out.println(noneStartsWithZ);      // true\n复制代码</code></pre><p><br /></p><h3 id=\"d46dce25\">Count 计数</h3><p><br /></p><p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p><p><br /></p><pre><code>// 先对 list 中字符串开头为 b 进行过滤，让后统计数量\nlong startsWithB =\n    stringCollection\n        .stream()\n        .filter((s) -&gt; s.startsWith(&quot;b&quot;))\n        .count();\n\nSystem.out.println(startsWithB);    // 3\n复制代码</code></pre><p><br /></p><h3 id=\"Reduce\">Reduce</h3><p><br /></p><p><code>Reduce</code> 中文翻译为：<em>减少、缩小</em>。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p><p><br /></p><pre><code>Optional&lt;String&gt; reduced =\n    stringCollection\n        .stream()\n        .sorted()\n        .reduce((s1, s2) -&gt; s1 + &quot;#&quot; + s2);\n\nreduced.ifPresent(System.out::println);\n// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;\n复制代码</code></pre><p><br /></p><h2 id=\"b2264d65\">Parallel-Streams 并行流</h2><p><br /></p><p>前面章节我们说过，<code>stream</code> 流是支持<strong>顺序</strong>和<strong>并行</strong>的。顺序流操作是单线程操作，而并行流是通过多线程来处理的，能够充分利用物理机 多核 CPU 的优势，同时处理速度更快。</p><p><br /></p><p>首先，我们创建一个包含 1000000 UUID list 集合。</p><p><br /></p><pre><code>int max = 1000000;\nList&lt;String&gt; values = new ArrayList&lt;&gt;(max);\nfor (int i = 0; i &lt; max; i++) {\n    UUID uuid = UUID.randomUUID();\n    values.add(uuid.toString());\n}\n复制代码</code></pre><p><br /></p><p>分别通过顺序流和并行流，对这个 list 进行排序，测算耗时:</p><p><br /></p><h3 id=\"111628cc\">顺序流排序</h3><p><br /></p><pre><code>// 纳秒\nlong t0 = System.nanoTime();\n\nlong count = values.stream().sorted().count();\nSystem.out.println(count);\n\nlong t1 = System.nanoTime();\n\n// 纳秒转微秒\nlong millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);\nSystem.out.println(String.format(&quot;顺序流排序耗时: %d ms&quot;, millis));\n\n// 顺序流排序耗时: 899 ms\n\n复制代码</code></pre><p><br /></p><h3 id=\"eb499c12\">并行流排序</h3><p><br /></p><pre><code>// 纳秒\nlong t0 = System.nanoTime();\n\nlong count = values.parallelStream().sorted().count();\nSystem.out.println(count);\n\nlong t1 = System.nanoTime();\n\n// 纳秒转微秒\nlong millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);\nSystem.out.println(String.format(&quot;并行流排序耗时: %d ms&quot;, millis));\n\n// 并行流排序耗时: 472 ms\n复制代码</code></pre><p><br /></p><p>正如你所见，同样的逻辑处理，通过并行流，我们的性能提升了近 <strong>50%</strong>。完成这一切，我们需要做的仅仅是将 <code>stream</code> 改成了 <code>parallelStream</code>。</p><p><br /></p><h2 id=\"8321d67b\">Map 集合</h2><p><br /></p><p>前面已经提到过 <code>Map</code> 是不支持 <code>Stream</code> 流的，因为 <code>Map</code> 接口并没有像 <code>Collection</code> 接口那样，定义了 <code>stream()</code> 方法。但是，我们可以对其 <code>key</code>, <code>values</code>, <code>entry</code> 使用 流操作，如 <code>map.keySet().stream()</code>, <code>map.values().stream()</code> 和 <code>map.entrySet().stream()</code>.</p><p><br /></p><p>另外, JDK 8 中对 <code>map</code> 提供了一些其他新特性:</p><p><br /></p><pre><code>Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\n\nfor (int i = 0; i &lt; 10; i++) {\n    // 与老版不同的是，putIfAbent() 方法在 put 之前，\n    // 会判断 key 是否已经存在，存在则直接返回 value, 否则 put, 再返回 value\n    map.putIfAbsent(i, &quot;val&quot; + i);\n}\n\n// forEach 可以很方便地对 map 进行遍历操作\nmap.forEach((key, value) -&gt; System.out.println(value));\n复制代码</code></pre><p><br /></p><p>除了上面的 <code>putIfAbsent()</code> 和 <code>forEach()</code> 外，我们还可以很方便地对某个 <code>key</code> 的值做相关操作：</p><p><br /></p><pre><code>// computeIfPresent(), 当 key 存在时，才会做相关处理\n// 如下：对 key 为 3 的值，内部会先判断值是否存在，存在，则做 value + key 的拼接操作\nmap.computeIfPresent(3, (num, val) -&gt; val + num);\nmap.get(3);             // val33\n\n// 先判断 key 为 9 的元素是否存在，存在，则做删除操作\nmap.computeIfPresent(9, (num, val) -&gt; null);\nmap.containsKey(9);     // false\n\n// computeIfAbsent(), 当 key 不存在时，才会做相关处理\n// 如下：先判断 key 为 23 的元素是否存在，不存在，则添加\nmap.computeIfAbsent(23, num -&gt; &quot;val&quot; + num);\nmap.containsKey(23);    // true\n\n// 先判断 key 为 3 的元素是否存在，存在，则不做任何处理\nmap.computeIfAbsent(3, num -&gt; &quot;bam&quot;);\nmap.get(3);             // val33\n复制代码</code></pre><p><br /></p><p>关于删除操作，JDK 8 中提供了能够新的 <code>remove()</code> API:</p><p><br /></p><pre><code>map.remove(3, &quot;val3&quot;);\nmap.get(3);             // val33\n\nmap.remove(3, &quot;val33&quot;);\nmap.get(3);             // null\n复制代码</code></pre><p><br /></p><p>如上代码，只有当给定的 <code>key</code> 和 <code>value</code> 完全匹配时，才会执行删除操作。</p><p><br /></p><p>关于添加方法，JDK 8 中提供了带有默认值的 <code>getOrDefault()</code> 方法：</p><p><br /></p><pre><code>// 若 key 42 不存在，则返回 not found\nmap.getOrDefault(42, &quot;not found&quot;);  // not found\n复制代码</code></pre><p><br /></p><p>对于 <code>value</code> 的合并操作也变得更加简单：</p><p><br /></p><pre><code>// merge 方法，会先判断进行合并的 key 是否存在，不存在，则会添加元素\nmap.merge(9, &quot;val9&quot;, (value, newValue) -&gt; value.concat(newValue));\nmap.get(9);             // val9\n\n// 若 key 的元素存在，则对 value 执行拼接操作\nmap.merge(9, &quot;concat&quot;, (value, newValue) -&gt; value.concat(newValue));\nmap.get(9);             // val9concat\n复制代码</code></pre><p><br /></p><h2 id=\"df70aa39\">新的日期 API</h2><p><br /></p><p>Java 8 中在包 <code>java.time</code> 下添加了新的日期 API. 它和 <a href=\"https://link.juejin.im/?target=http%3A%2F%2Fwww.joda.org%2Fjoda-time%2F\" target=\"_blank\">Joda-Time</a> 库相似，但又不完全相同。接下来，我会通过一些示例代码介绍一下新 API 中 最关键的特性：</p><p><br /></p><h3 id=\"Clock\">Clock</h3><p><br /></p><p><code>Clock</code> 提供对当前日期和时间的访问。我们可以利用它来替代 <code>System.currentTimeMillis()</code> 方法。另外，通过 <code>clock.instant()</code> 能够获取一个 <code>instant</code> 实例， 此实例能够方便地转换成老版本中的 <code>java.util.Date</code> 对象。</p><p><br /></p><pre><code>Clock clock = Clock.systemDefaultZone();\nlong millis = clock.millis();\n\nInstant instant = clock.instant();\nDate legacyDate = Date.from(instant);   // 老版本 java.util.Date\n复制代码</code></pre><p><br /></p><h3 id=\"4791e622\">Timezones 时区</h3><p><br /></p><p><code>ZoneId</code> 代表时区类。通过静态工厂方法方便地获取它，入参我们可以传入某个时区编码。另外，时区类还定义了一个偏移量，用来在当前时刻或某时间 与目标时区时间之间进行转换。</p><p><br /></p><pre><code>System.out.println(ZoneId.getAvailableZoneIds());\n// prints all available timezone ids\n\nZoneId zone1 = ZoneId.of(&quot;Europe/Berlin&quot;);\nZoneId zone2 = ZoneId.of(&quot;Brazil/East&quot;);\nSystem.out.println(zone1.getRules());\nSystem.out.println(zone2.getRules());\n\n// ZoneRules[currentStandardOffset=+01:00]\n// ZoneRules[currentStandardOffset=-03:00]\n复制代码</code></pre><p><br /></p><h3 id=\"LocalTime\">LocalTime</h3><p><br /></p><p><code>LocalTime</code> 表示一个没有指定时区的时间类，例如，<code>10 p.m</code>. 或者 <code>17：30:15</code>，下面示例代码中，将会使用上面创建的 时区对象创建两个 <code>LocalTime</code>。然后我们会比较两个时间，并计算它们之间的小时和分钟的不同。</p><p><br /></p><pre><code>LocalTime now1 = LocalTime.now(zone1);\nLocalTime now2 = LocalTime.now(zone2);\n\nSystem.out.println(now1.isBefore(now2));  // false\n\nlong hoursBetween = ChronoUnit.HOURS.between(now1, now2);\nlong minutesBetween = ChronoUnit.MINUTES.between(now1, now2);\n\nSystem.out.println(hoursBetween);       // -3\nSystem.out.println(minutesBetween);     // -239\n复制代码</code></pre><p><br /></p><p><code>LocalTime</code> 提供多个静态工厂方法，目的是为了简化对时间对象实例的创建和操作，包括对时间字符串进行解析的操作等。</p><p><br /></p><pre><code>LocalTime late = LocalTime.of(23, 59, 59);\nSystem.out.println(late);       // 23:59:59\n\nDateTimeFormatter germanFormatter =\n    DateTimeFormatter\n        .ofLocalizedTime(FormatStyle.SHORT)\n        .withLocale(Locale.GERMAN);\n\nLocalTime leetTime = LocalTime.parse(&quot;13:37&quot;, germanFormatter);\nSystem.out.println(leetTime);   // 13:37\n复制代码</code></pre><p><br /></p><h2 id=\"LocalDate\">LocalDate</h2><p><br /></p><p><code>LocalDate</code> 是一个日期对象，例如：<code>2014-03-11</code>。它和 <code>LocalTime</code> 一样是个 <code>final</code> 类型对象。下面的例子演示了如何通过加减日，月，年等来计算一个新的日期。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p><code>LocalDate</code>, <code>LocalTime</code>, 因为是 <code>final</code> 类型的对象，每一次操作都会返回一个新的时间对象。</p></blockquote><p><br /></p><pre><code>LocalDate today = LocalDate.now();\n// 今天加一天\nLocalDate tomorrow = today.plus(1, ChronoUnit.DAYS);\n// 明天减两天\nLocalDate yesterday = tomorrow.minusDays(2);\n\n// 2014 年七月的第四天\nLocalDate independenceDay = LocalDate.of(2014, Month.JULY, 4);\nDayOfWeek dayOfWeek = independenceDay.getDayOfWeek();\nSystem.out.println(dayOfWeek);    // 星期五\n复制代码</code></pre><p><br /></p><p>也可以直接解析日期字符串，生成 <code>LocalDate</code> 实例。（和 <code>LocalTime</code> 操作一样简单）</p><p><br /></p><pre><code>DateTimeFormatter germanFormatter =\n    DateTimeFormatter\n        .ofLocalizedDate(FormatStyle.MEDIUM)\n        .withLocale(Locale.GERMAN);\n\nLocalDate xmas = LocalDate.parse(&quot;24.12.2014&quot;, germanFormatter);\nSystem.out.println(xmas);   // 2014-12-24\n\n复制代码</code></pre><p><br /></p><h3 id=\"LocalDateTime\">LocalDateTime</h3><p><br /></p><p><code>LocalDateTime</code> 是一个<strong>日期 - 时间</strong>对象。你也可以将其看成是 <code>LocalDate</code> 和 <code>LocalTime</code> 的结合体。操作上，也大致相同。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p><code>LocalDateTime</code> 同样是一个 <code>final</code> 类型对象。</p></blockquote><p><br /></p><pre><code>LocalDateTime sylvester = LocalDateTime.of(2014, Month.DECEMBER, 31, 23, 59, 59);\n\nDayOfWeek dayOfWeek = sylvester.getDayOfWeek();\nSystem.out.println(dayOfWeek);      // 星期三\n\nMonth month = sylvester.getMonth();\nSystem.out.println(month);          // 十二月\n\n// 获取改时间是该天中的第几分钟\nlong minuteOfDay = sylvester.getLong(ChronoField.MINUTE_OF_DAY);\nSystem.out.println(minuteOfDay);    // 1439\n复制代码</code></pre><p><br /></p><p>如果再加上的时区信息，<code>LocalDateTime</code> 还能够被转换成 <code>Instance</code> 实例。<code>Instance</code> 能够被转换成老版本中 <code>java.util.Date</code> 对象。</p><p><br /></p><pre><code>Instant instant = sylvester\n        .atZone(ZoneId.systemDefault())\n        .toInstant();\n\nDate legacyDate = Date.from(instant);\nSystem.out.println(legacyDate);     // Wed Dec 31 23:59:59 CET 2014\n复制代码</code></pre><p><br /></p><p>格式化 <code>LocalDateTime</code> 对象就和格式化 LocalDate 或者 LocalTime 一样。除了使用预定义的格式以外，也可以自定义格式化输出。</p><p><br /></p><pre><code>DateTimeFormatter formatter =\n    DateTimeFormatter\n        .ofPattern(&quot;MMM dd, yyyy - HH:mm&quot;);\n\nLocalDateTime parsed = LocalDateTime.parse(&quot;Nov 03, 2014 - 07:13&quot;, formatter);\nString string = formatter.format(parsed);\nSystem.out.println(string);     // Nov 03, 2014 - 07:13\n复制代码</code></pre><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>注意：和 <code>java.text.NumberFormat</code> 不同，新的 <code>DateTimeFormatter</code> 类是 <code>final</code> 类型的，同时也是线程安全的。更多细节请查看<a href=\"https://link.juejin.im/?target=http%3A%2F%2Fdownload.java.net%2Fjdk8%2Fdocs%2Fapi%2Fjava%2Ftime%2Fformat%2FDateTimeFormatter.html\" target=\"_blank\">这里</a></p></blockquote><p><br /></p><h2 id=\"44fc421c\">Annotations 注解</h2><p><br /></p><p>在 Java 8 中，注解是可以重复的。让我通过下面的示例代码，来看看到底是咋回事。</p><p><br /></p><p>首先，我们定义一个包装注解，里面包含了一个有着实际注解的数组：</p><p><br /></p><pre><code>@interface Hints {\n    Hint[] value();\n}\n\n@Repeatable(Hints.class)\n@interface Hint {\n    String value();\n}\n复制代码</code></pre><p><br /></p><p>Java 8 中，通过 <code>@Repeatable</code>，允许我们对同一个类使用多重注解：</p><p><br /></p><p>第一种形态：使用注解容器（老方法）</p><p><br /></p><pre><code>@Hints({@Hint(&quot;hint1&quot;), @Hint(&quot;hint2&quot;)})\nclass Person {}\n复制代码</code></pre><p><br /></p><p>第二种形态：使用可重复注解（新方法）</p><p><br /></p><pre><code>@Hint(&quot;hint1&quot;)\n@Hint(&quot;hint2&quot;)\nclass Person {}\n复制代码</code></pre><p><br /></p><p>使用第二种形态，Java 编译器能够在内部自动对 <code>@Hint</code> 进行设置。这对于需要通过反射来读取注解信息时，是非常重要的。</p><p><br /></p><pre><code>Hint hint = Person.class.getAnnotation(Hint.class);\nSystem.out.println(hint);                   // null\n\nHints hints1 = Person.class.getAnnotation(Hints.class);\nSystem.out.println(hints1.value().length);  // 2\n\nHint[] hints2 = Person.class.getAnnotationsByType(Hint.class);\nSystem.out.println(hints2.length);          // 2\n复制代码</code></pre><p><br /></p><p>尽管我们绝对不会在 <code>Person</code> 类上声明 <code>@Hints</code> 注解，但是它的信息仍然是可以通过 <code>getAnnotation(Hints.class)</code> 来读取的。 并且，<code>getAnnotationsByType</code> 方法会更方便，因为它赋予了所有 <code>@Hints</code> 注解标注的方法直接的访问权限。</p><p><br /></p><pre><code>@Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE})\n@interface MyAnnotation {}\n复制代码</code></pre><p><br /></p><h2 id=\"433531fd\">结语</h2><p><br /></p><p>Java 8 新特性的编程指南到此就告一段落了。当然，还有很多内容需要进一步研究和说明。这就需要靠读者您来对 JDK 8 进一步探究了， 例如：<code>Arrays.parallelSort</code>, <code>StampedLock</code> 和 <code>CompletableFuture</code> 等等，我这里也仅是起到抛砖引玉的作用而已。</p><p><br /></p><p>最后，我希望这个教程能够对您有所帮助，也希望您阅读愉快。</p><p><br /></p><h2 id=\"b8c89356\">小哈的微信公众号</h2><p><br /></p><p></p>",
    "body_lake": "<!doctype lake><blockquote style=\"padding-left: 1em;\"><p>本文由 <a href=\"http://ksria.com/simpread/\" target=\"_blank\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://juejin.im/post/5c3d7c8a51882525dd591ac7\" target=\"_blank\">https://juejin.im/post/5c3d7c8a51882525dd591ac7</a></p></blockquote><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>本教程翻译整理自 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fwinterbe%2Fjava8-tutorial\" target=\"_blank\">github.com/winterbe/ja…</a></p></blockquote><p><br /></p><h2 id=\"cfeff30d\">目录：</h2><p><br /></p><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E6%8E%A5%E5%8F%A3%E5%86%85%E5%85%81%E8%AE%B8%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%96%B9%E6%B3%95\" target=\"_blank\">一、接口内允许添加默认实现的方法</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F\" target=\"_blank\">二、Lambda 表达式</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3-Functional-Interface\" target=\"_blank\">三、函数式接口 Functional Interface</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E4%BE%BF%E6%8D%B7%E7%9A%84%E5%BC%95%E7%94%A8%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E5%8F%8A%E6%96%B9%E6%B3%95\" target=\"_blank\">四、便捷的引用类的构造器及方法</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Lambda-%E8%AE%BF%E9%97%AE%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F%E5%8F%8A%E6%8E%A5%E5%8F%A3%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95\" target=\"_blank\">五、Lambda 访问外部变量及接口默认方法</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E8%AE%BF%E9%97%AE%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\" target=\"_blank\">5.1 访问局部变量</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E8%AE%BF%E9%97%AE%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F\" target=\"_blank\">5.2 访问成员变量和静态变量</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95\" target=\"_blank\">5.3 访问接口的默认方法</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E5%86%85%E7%BD%AE%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3\" target=\"_blank\">六、内置的函数式接口</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Predicate-%E6%96%AD%E8%A8%80\" target=\"_blank\">6.1 Predicate 断言</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Function\" target=\"_blank\">6.2 Function</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Supplier-%E7%94%9F%E4%BA%A7%E8%80%85\" target=\"_blank\">6.3 Supplier 生产者</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Consumer-%E6%B6%88%E8%B4%B9%E8%80%85\" target=\"_blank\">6.4 Consumer 消费者</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Comparator\" target=\"_blank\">6.5 Comparator</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Optional\" target=\"_blank\">七、Optional</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Stream-%E6%B5%81\" target=\"_blank\">八、Streams 流</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Filter-%E8%BF%87%E6%BB%A4\" target=\"_blank\">8.1 Filter 过滤</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Sorted-%E6%8E%92%E5%BA%8F\" target=\"_blank\">8.2 Sorted 排序</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Map-%E8%BD%AC%E6%8D%A2\" target=\"_blank\">8.3 Map 转换</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Match-%E5%8C%B9%E9%85%8D\" target=\"_blank\">8.4 Match 匹配</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Count-%E8%AE%A1%E6%95%B0\" target=\"_blank\">8.5 Count 计数</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Reduce\" target=\"_blank\">8.6 Reduce</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Parallel-Streams-%E5%B9%B6%E8%A1%8C%E6%B5%81\" target=\"_blank\">九、Parallel Streams 并行流</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E9%A1%BA%E5%BA%8F%E6%B5%81%E6%8E%92%E5%BA%8F\" target=\"_blank\">9.1 顺序流排序</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E5%B9%B6%E8%A1%8C%E6%B5%81%E6%8E%92%E5%BA%8F\" target=\"_blank\">9.2 并行流排序</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Map-%E9%9B%86%E5%90%88\" target=\"_blank\">十、Map 集合</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#%E6%96%B0%E7%9A%84%E6%97%A5%E6%9C%9F-API\" target=\"_blank\">十一、新的日期 API</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Clock\" target=\"_blank\">11.1 Clock</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Timezones-%E6%97%B6%E5%8C%BA\" target=\"_blank\">11.2 Timezones 时区</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#LocalTime\" target=\"_blank\">11.3 LocalTime</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#LocalDate\" target=\"_blank\">11.4 LocalDate</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#LocalDateTime\" target=\"_blank\">11.4 LocalDateTime</a></li></ul><ul><li><a href=\"https://souche.yuque.com/kun95/ynl730/ypoxo3/edit#Annotations-%E6%B3%A8%E8%A7%A3\" target=\"_blank\">十二、Annotations 注解</a></li></ul><p><br /></p><p>也希望学完本系列教程的小伙伴能够熟练掌握和应用 Java8 的各种特性，使其成为在工作中的一门利器。废话不多说，让我们一起开启 Java8 新特性之旅吧！</p><p><br /></p><card type=\"block\" name=\"hr\"></card><p><br /></p><p>★★★ <strong>如果此教程有帮助到你, 去小哈的 GitHub 帮忙 </strong>Star<strong> 一下吧, 谢谢啦！</strong> <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fweiwosuoai%2Fjava8_guide\" target=\"_blank\">传送门</a> ★★★</p><p><br /></p><card type=\"block\" name=\"hr\"></card><p><br /></p><h2 id=\"90c0f18e\">接口内允许添加默认实现的方法</h2><p><br /></p><p>Java 8 允许我们通过 <code>default</code> 关键字对接口中定义的抽象方法提供一个默认的实现。</p><p><br /></p><p>请看下面示例代码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%85%AC%E5%BC%8F%E6%8E%A5%E5%8F%A3%5Cninterface%20Formula%20%7B%5Cn%20%20%20%20%2F%2F%20%E8%AE%A1%E7%AE%97%5Cn%20%20%20%20double%20calculate(int%20a)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9%5Cn%20%20%20%20default%20double%20sqrt(int%20a)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20Math.sqrt(a)%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>在上面这个接口中，我们除了定义了一个抽象方法 <code>calculate</code>，还定义了一个带有默认实现的方法 <code>sqrt</code>。 我们在实现这个接口时，可以只需要实现 <code>calculate</code> 方法，默认方法 <code>sqrt</code> 可以直接调用即可，也就是说我们可以不必强制实现 <code>sqrt</code> 方法。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>补充：通过 <code>default</code> 关键字这个新特性，可以非常方便地对之前的接口做拓展，而此接口的实现类不必做任何改动。</p></blockquote><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Formula%20formula%20%3D%20new%20Formula()%20%7B%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20double%20calculate(int%20a)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20sqrt(a%20*%20100)%3B%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cn%5Cnformula.calculate(100)%3B%20%20%20%20%20%2F%2F%20100.0%5Cnformula.sqrt(16)%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%204.0%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>上面通过匿名对象实现了 <code>Formula</code> 接口。但是即使是这样，我们为了完成一个 <code>sqrt(a * 100)</code> 简单计算，就写了 6 行代码，很是冗余。</p><p><br /></p><h2 id=\"75bf3fb1\">Lambda 表达式</h2><p><br /></p><p>在学习 <code>Lambda</code> 表达式之前，我们先来看一段老版本的示例代码，其对一个含有字符串的集合进行排序：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22List%3CString%3E%20names%20%3D%20Arrays.asList(%5C%22peter%5C%22%2C%20%5C%22anna%5C%22%2C%20%5C%22mike%5C%22%2C%20%5C%22xenia%5C%22)%3B%5Cn%5CnCollections.sort(names%2C%20new%20Comparator%3CString%3E()%20%7B%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20int%20compare(String%20a%2C%20String%20b)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20b.compareTo(a)%3B%5Cn%20%20%20%20%7D%5Cn%7D)%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><code>Collections</code> 工具类提供了静态方法 <code>sort</code> 方法，入参是一个 <code>List</code> 集合，和一个 <code>Comparator</code> 比较器，以便对给定的 <code>List</code> 集合进行 排序。上面的示例代码创建了一个匿名内部类作为入参，这种类似的操作在我们日常的工作中随处可见。</p><p><br /></p><p>Java 8 中不再推荐这种写法，而是推荐使用 Lambda 表达：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Collections.sort(names%2C%20(String%20a%2C%20String%20b)%20-%3E%20%7B%5Cn%20%20%20%20return%20b.compareTo(a)%3B%5Cn%7D)%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>正如你看到的，上面这段代码变得简短很多而且易于阅读。但是我们还可以再精炼一点：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Collections.sort(names%2C%20(String%20a%2C%20String%20b)%20-%3E%20b.compareTo(a))%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>对于只包含一行方法的代码块，我们可以省略大括号，直接 <code>return</code> 关键代码即可。追求极致，我们还可以让它再短点：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22names.sort((a%2C%20b)%20-%3E%20b.compareTo(a))%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><code>List</code> 集合现在已经添加了 <code>sort</code> 方法。而且 Java 编译器能够根据<strong>类型推断机制</strong>判断出参数类型，这样，你连入参的类型都可以省略啦，怎么样，是不是感觉很强大呢！</p><p><br /></p><h2 id=\"160243f4\">函数式接口 Functional Interface</h2><p><br /></p><p>抛出一个疑问：在我们书写一段 Lambda 表达式后（比如上一章节中匿名内部类的 Lambda 表达式缩写形式），Java 编译器是如何进行类型推断的，它又是怎么知道重写的哪个方法的？</p><p><br /></p><p>需要说明的是，不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。</p><p><br /></p><p>那么什么是函数式接口（Functional Interface）呢？</p><p><br /></p><p>所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>注意：你可能会有疑问，Java 8 中不是允许通过 defualt 关键字来为接口添加默认方法吗？那它算不算抽象方法呢？答案是：不算。因此，你可以毫无顾忌的添加默认方法，它并不违反函数式接口（Functional Interface）的定义。</p></blockquote><p><br /></p><p>总结一下：只要接口中仅仅包含一个抽象方法，我们就可以将其改写为 Lambda 表达式。为了保证一个接口明确的被定义为一个函数式接口（Functional Interface），我们需要为该接口添加注解：<code>@FunctionalInterface</code>。这样，一旦你添加了第二个抽象方法，编译器会立刻抛出错误提示。</p><p><br /></p><p>示例代码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%40FunctionalInterface%5Cninterface%20Converter%3CF%2C%20T%3E%20%7B%5Cn%20%20%20%20T%20convert(F%20from)%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>示例代码 2：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Converter%3CString%2C%20Integer%3E%20converter%20%3D%20(from)%20-%3E%20Integer.valueOf(from)%3B%5CnInteger%20converted%20%3D%20converter.convert(%5C%22123%5C%22)%3B%5CnSystem.out.println(converted)%3B%20%20%20%20%2F%2F%20123%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>注意：上面的示例代码，即使去掉 <code>@FunctionalInterface</code> 也是好使的，它仅仅是一种约束而已。</p></blockquote><p><br /></p><h2 id=\"62b92c2b\">便捷的引用类的构造器及方法</h2><p><br /></p><p>小伙伴们，还记得上一个章节这段示例代码么：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%40FunctionalInterface%5Cninterface%20Converter%3CF%2C%20T%3E%20%7B%5Cn%20%20%20%20T%20convert(F%20from)%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Converter%3CString%2C%20Integer%3E%20converter%20%3D%20(from)%20-%3E%20Integer.valueOf(from)%3B%5CnInteger%20converted%20%3D%20converter.convert(%5C%22123%5C%22)%3B%5CnSystem.out.println(converted)%3B%20%20%20%20%2F%2F%20123%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>上面这段代码，通过 Java 8 的新特性，进一步简化上面的代码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Converter%3CString%2C%20Integer%3E%20converter%20%3D%20Integer%3A%3AvalueOf%3B%5CnInteger%20converted%20%3D%20converter.convert(%5C%22123%5C%22)%3B%5CnSystem.out.println(converted)%3B%20%20%20%2F%2F%20123%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>Java 8 中允许你通过 <code>::</code> 关键字来引用类的方法或构造器。上面的代码简单的示例了如何引用静态方法，当然，除了静态方法，我们还可以引用普通方法：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22class%20Something%20%7B%5Cn%20%20%20%20String%20startsWith(String%20s)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20String.valueOf(s.charAt(0))%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Something%20something%20%3D%20new%20Something()%3B%5CnConverter%3CString%2C%20String%3E%20converter%20%3D%20something%3A%3AstartsWith%3B%5CnString%20converted%20%3D%20converter.convert(%5C%22Java%5C%22)%3B%5CnSystem.out.println(converted)%3B%20%20%20%20%2F%2F%20%5C%22J%5C%22%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>接下来，我们再来看看如何通过 <code>::</code> 关键字来引用类的构造器。首先，我们先来定义一个示例类，在类中声明两个构造器：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22class%20Person%20%7B%5Cn%20%20%20%20String%20firstName%3B%5Cn%20%20%20%20String%20lastName%3B%5Cn%5Cn%20%20%20%20Person()%20%7B%7D%5Cn%5Cn%20%20%20%20Person(String%20firstName%2C%20String%20lastName)%20%7B%5Cn%20%20%20%20%20%20%20%20this.firstName%20%3D%20firstName%3B%5Cn%20%20%20%20%20%20%20%20this.lastName%20%3D%20lastName%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>然后，我们再定义一个工厂接口，用来生成 <code>Person</code> 类：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20Person%20%E5%B7%A5%E5%8E%82%5Cninterface%20PersonFactory%3CP%20extends%20Person%3E%20%7B%5Cn%20%20%20%20P%20create(String%20firstName%2C%20String%20lastName)%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>我们可以通过 <code>::</code> 关键字来引用 <code>Person</code> 类的构造器，来代替手动去实现这个工厂接口：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8%20Person%20%E6%9E%84%E9%80%A0%E5%99%A8%5CnPersonFactory%3CPerson%3E%20personFactory%20%3D%20Person%3A%3Anew%3B%5CnPerson%20person%20%3D%20personFactory.create(%5C%22Peter%5C%22%2C%20%5C%22Parker%5C%22)%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><code>Person::new</code> 这段代码，能够直接引用 <code>Person</code> 类的构造器。然后 Java 编译器能够根据上下文选中正确的构造器去实现 <code>PersonFactory.create</code> 方法。</p><p><br /></p><h2 id=\"c81218bf\">Lambda 访问外部变量及接口默认方法</h2><p><br /></p><p>在本章节中，我们将会讨论如何在 lambda 表达式中访问外部变量（包括：局部变量，成员变量，静态变量，接口的默认方法.），它与匿名内部类访问外部变量很相似。</p><p><br /></p><h3 id=\"c2e51379\">访问局部变量</h3><p><br /></p><p>在 Lambda 表达式中，我们可以访问外部的 <code>final</code> 类型变量，如下面的示例代码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20%E8%BD%AC%E6%8D%A2%E5%99%A8%5Cn%40FunctionalInterface%5Cninterface%20Converter%3CF%2C%20T%3E%20%7B%5Cn%20%20%20%20T%20convert(F%20from)%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22final%20int%20num%20%3D%201%3B%5CnConverter%3CInteger%2C%20String%3E%20stringConverter%20%3D%5Cn%20%20%20%20%20%20%20%20(from)%20-%3E%20String.valueOf(from%20%2B%20num)%3B%5Cn%5CnstringConverter.convert(2)%3B%20%20%20%20%20%2F%2F%203%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>与匿名内部类不同的是，我们不必显式声明 <code>num</code> 变量为 <code>final</code> 类型，下面这段代码同样有效：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22int%20num%20%3D%201%3B%5CnConverter%3CInteger%2C%20String%3E%20stringConverter%20%3D%5Cn%20%20%20%20%20%20%20%20(from)%20-%3E%20String.valueOf(from%20%2B%20num)%3B%5Cn%5CnstringConverter.convert(2)%3B%20%20%20%20%20%2F%2F%203%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>但是 <code>num</code> 变量必须为隐式的 <code>final</code> 类型，何为隐式的 <code>final</code> 呢？就是说到编译期为止，<code>num</code> 对象是不能被改变的，如下面这段代码，就不能被编译通过：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22int%20num%20%3D%201%3B%5CnConverter%3CInteger%2C%20String%3E%20stringConverter%20%3D%5Cn%20%20%20%20%20%20%20%20(from)%20-%3E%20String.valueOf(from%20%2B%20num)%3B%5Cnnum%20%3D%203%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>在 lambda 表达式内部改变 <code>num</code> 值同样编译不通过，需要注意, 比如下面的示例代码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22int%20num%20%3D%201%3B%5CnConverter%3CInteger%2C%20String%3E%20converter%20%3D%20(from)%20-%3E%20%7B%5Cn%5CtString%20value%20%3D%20String.valueOf(from%20%2B%20num)%3B%5Cn%5Ctnum%20%3D%203%3B%5Cn%5Ctreturn%20value%3B%5Cn%7D%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"f0b07ba6\">访问成员变量和静态变量</h3><p><br /></p><p>上一章节中，了解了如何在 Lambda 表达式中访问局部变量。与局部变量相比，在 Lambda 表达式中对成员变量和静态变量拥有读写权限：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%40FunctionalInterface%5Cn%20%20%20%20interface%20Converter%3CF%2C%20T%3E%20%7B%5Cn%20%20%20%20%20%20%20%20T%20convert(F%20from)%3B%5Cn%20%20%20%20%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22class%20Lambda4%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%5Cn%20%20%20%20%20%20%20%20static%20int%20outerStaticNum%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%5Cn%20%20%20%20%20%20%20%20int%20outerNum%3B%5Cn%5Cn%20%20%20%20%20%20%20%20void%20testScopes()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Converter%3CInteger%2C%20String%3E%20stringConverter1%20%3D%20(from)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AF%B9%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20outerNum%20%3D%2023%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20String.valueOf(from)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Converter%3CInteger%2C%20String%3E%20stringConverter2%20%3D%20(from)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AF%B9%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20outerStaticNum%20%3D%2072%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20String.valueOf(from)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"e9841639\">访问接口的默认方法</h3><p><br /></p><p>还记得第一章节中定义的那个 <code>Formula</code> (公式) 接口吗？</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%40FunctionalInterface%5Cninterface%20Formula%20%7B%5Cn%5Ct%2F%2F%20%E8%AE%A1%E7%AE%97%5Cn%5Ctdouble%20calculate(int%20a)%3B%5Cn%5Cn%5Ct%2F%2F%20%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9%5Cn%5Ctdefault%20double%20sqrt(int%20a)%20%7B%5Cn%5Ct%5Ctreturn%20Math.sqrt(a)%3B%5Cn%5Ct%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>当时，我们在接口中定义了一个带有默认实现的 <code>sqrt</code> 求平方根方法，在匿名内部类中我们可以很方便的访问此方法：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Formula%20formula%20%3D%20new%20Formula()%20%7B%5Cn%5Ct%40Override%5Cn%5Ctpublic%20double%20calculate(int%20a)%20%7B%5Cn%5Ct%5Ctreturn%20sqrt(a%20*%20100)%3B%5Cn%5Ct%7D%5Cn%7D%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>但是在 lambda 表达式中可不行：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Formula%20formula%20%3D%20(a)%20-%3E%20sqrt(a%20*%20100)%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>带有默认实现的接口方法，是<strong>不能</strong>在 lambda 表达式中访问的，上面这段代码将无法被编译通过。</p><p><br /></p><h2 id=\"f5de65ac\">内置的函数式接口</h2><p><br /></p><p>JDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 Comparator 和 Runnable，Java 8 为他们都添加了 <a target=\"_blank\">FunctionalInterface </a>注解，以用来支持 Lambda 表达式。</p><p><br /></p><p>值得一提的是，除了 Comparator 和 Runnable 外，还有一些新的函数式接口，它们很多都借鉴于知名的 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fgoogle%2Fguava\" target=\"_blank\">Google Guava</a> 库。</p><p><br /></p><p>对于它们，即使你已经非常熟悉了，还是最好了解一下的：</p><p><br /></p><h3 id=\"cca10afe\">Predicate 断言</h3><p><br /></p><p><code>Predicate</code> 是一个可以指定入参类型，并返回 boolean 值的函数式接口。它内部提供了一些带有默认实现的方法，可以 被用来组合一个复杂的逻辑判断（<code>and</code>, <code>or</code>, <code>negate</code>）：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Predicate%3CString%3E%20predicate%20%3D%20(s)%20-%3E%20s.length()%20%3E%200%3B%5Cn%5Cnpredicate.test(%5C%22foo%5C%22)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20true%5Cnpredicate.negate().test(%5C%22foo%5C%22)%3B%20%20%20%20%20%2F%2F%20false%5Cn%5CnPredicate%3CBoolean%3E%20nonNull%20%3D%20Objects%3A%3AnonNull%3B%5CnPredicate%3CBoolean%3E%20isNull%20%3D%20Objects%3A%3AisNull%3B%5Cn%5CnPredicate%3CString%3E%20isEmpty%20%3D%20String%3A%3AisEmpty%3B%5CnPredicate%3CString%3E%20isNotEmpty%20%3D%20isEmpty.negate()%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"Function\">Function</h3><p><br /></p><p><code>Function</code> 函数式接口的作用是，我们可以为其提供一个原料，他给生产一个最终的产品。通过它提供的默认方法，组合, 链行处理 (<code>compose</code>, <code>andThen</code>)：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Function%3CString%2C%20Integer%3E%20toInteger%20%3D%20Integer%3A%3AvalueOf%3B%5CnFunction%3CString%2C%20String%3E%20backToString%20%3D%20toInteger.andThen(String%3A%3AvalueOf)%3B%5Cn%5CnbackToString.apply(%5C%22123%5C%22)%3B%20%20%20%20%20%2F%2F%20%5C%22123%5C%22%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"8dda89e0\">Supplier 生产者</h3><p><br /></p><p><code>Supplier</code> 与 <code>Function</code> 不同，它不接受入参，直接为我们生产一个指定的结果，有点像生产者模式：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22class%20Person%20%7B%5Cn%20%20%20%20String%20firstName%3B%5Cn%20%20%20%20String%20lastName%3B%5Cn%5Cn%20%20%20%20Person()%20%7B%7D%5Cn%5Cn%20%20%20%20Person(String%20firstName%2C%20String%20lastName)%20%7B%5Cn%20%20%20%20%20%20%20%20this.firstName%20%3D%20firstName%3B%5Cn%20%20%20%20%20%20%20%20this.lastName%20%3D%20lastName%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Supplier%3CPerson%3E%20personSupplier%20%3D%20Person%3A%3Anew%3B%5CnpersonSupplier.get()%3B%20%20%20%2F%2F%20new%20Person%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"37c62d93\">Consumer 消费者</h3><p><br /></p><p>对于 <code>Consumer</code>，我们需要提供入参，用来被消费，如下面这段示例代码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22class%20Person%20%7B%5Cn%20%20%20%20String%20firstName%3B%5Cn%20%20%20%20String%20lastName%3B%5Cn%5Cn%20%20%20%20Person()%20%7B%7D%5Cn%5Cn%20%20%20%20Person(String%20firstName%2C%20String%20lastName)%20%7B%5Cn%20%20%20%20%20%20%20%20this.firstName%20%3D%20firstName%3B%5Cn%20%20%20%20%20%20%20%20this.lastName%20%3D%20lastName%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Consumer%3CPerson%3E%20greeter%20%3D%20(p)%20-%3E%20System.out.println(%5C%22Hello%2C%20%5C%22%20%2B%20p.firstName)%3B%5Cngreeter.accept(new%20Person(%5C%22Luke%5C%22%2C%20%5C%22Skywalker%5C%22))%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"Comparator\">Comparator</h3><p><br /></p><p><code>Comparator</code> 在 Java 8 之前是使用比较普遍的。Java 8 中除了将其升级成了函数式接口，还为它拓展了一些默认方法：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Comparator%3CPerson%3E%20comparator%20%3D%20(p1%2C%20p2)%20-%3E%20p1.firstName.compareTo(p2.firstName)%3B%5Cn%5CnPerson%20p1%20%3D%20new%20Person(%5C%22John%5C%22%2C%20%5C%22Doe%5C%22)%3B%5CnPerson%20p2%20%3D%20new%20Person(%5C%22Alice%5C%22%2C%20%5C%22Wonderland%5C%22)%3B%5Cn%5Cncomparator.compare(p1%2C%20p2)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%3E%200%5Cncomparator.reversed().compare(p1%2C%20p2)%3B%20%20%2F%2F%20%3C%200%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"Optional\">Optional</h2><p><br /></p><p>首先，<code>Optional</code> 它不是一个函数式接口，设计它的目的是为了防止空指针异常（<code>NullPointerException</code>），要知道在 Java 编程中， 空指针异常可是臭名昭著的。</p><p><br /></p><p>让我们来快速了解一下 <code>Optional</code> 要如何使用！你可以将 <code>Optional</code> 看做是包装对象（可能是 <code>null</code>, 也有可能非 <code>null</code>）的容器。当你定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，你就可以考虑用 <code>Optional</code> 来包装它，这也是在 Java 8 被推荐使用的做法。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Optional%3CString%3E%20optional%20%3D%20Optional.of(%5C%22bam%5C%22)%3B%5Cn%5Cnoptional.isPresent()%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20true%5Cnoptional.get()%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%5C%22bam%5C%22%5Cnoptional.orElse(%5C%22fallback%5C%22)%3B%20%20%20%20%2F%2F%20%5C%22bam%5C%22%5Cn%5Cnoptional.ifPresent((s)%20-%3E%20System.out.println(s.charAt(0)))%3B%20%20%20%20%20%2F%2F%20%5C%22b%5C%22%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"6d24bd9f\">Stream 流</h2><p><br /></p><p>这一章节，我们开始步入学习 <code>Stream</code> 流。</p><p><br /></p><p><em>什么是 <code>Stream</code> 流？</em></p><p><br /></p><p>简单来说，我们可以使用 <code>java.util.Stream</code> 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 <em>终端操作</em>。 终端操作会返回一个结果，而中间操作会返回一个 <code>Stream</code> 流。</p><p><br /></p><p>需要注意的是，你只能对实现了 <code>java.util.Collection</code> 接口的类做流的操作。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p><code>Map</code> 不支持 <code>Stream</code> 流。</p></blockquote><p><br /></p><p><code>Stream</code> 流支持同步执行，也支持并发执行。</p><p><br /></p><p>让我们开始步入学习的旅程吧！Go !</p><p><br /></p><h3 id=\"35f21c77\">Filter 过滤</h3><p><br /></p><p>首先，我们创建一个 <code>List</code> 集合：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22List%3CString%3E%20stringCollection%20%3D%20new%20ArrayList%3C%3E()%3B%5CnstringCollection.add(%5C%22ddd2%5C%22)%3B%5CnstringCollection.add(%5C%22aaa2%5C%22)%3B%5CnstringCollection.add(%5C%22bbb1%5C%22)%3B%5CnstringCollection.add(%5C%22aaa1%5C%22)%3B%5CnstringCollection.add(%5C%22bbb3%5C%22)%3B%5CnstringCollection.add(%5C%22ccc%5C%22)%3B%5CnstringCollection.add(%5C%22bbb2%5C%22)%3B%5CnstringCollection.add(%5C%22ddd1%5C%22)%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><code>Filter</code> 的入参是一个 <code>Predicate</code>, 上面已经说到，<code>Predicate</code> 是一个断言的中间操作，它能够帮我们筛选出我们需要的集合元素。它的返参同样 是一个 <code>Stream</code> 流，我们可以通过 <code>foreach</code> 终端操作，来打印被筛选的元素：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22stringCollection%5Cn%20%20%20%20.stream()%5Cn%20%20%20%20.filter((s)%20-%3E%20s.startsWith(%5C%22a%5C%22))%5Cn%20%20%20%20.forEach(System.out%3A%3Aprintln)%3B%5Cn%5Cn%2F%2F%20%5C%22aaa2%5C%22%2C%20%5C%22aaa1%5C%22%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>注意：<code>foreach</code> 是一个终端操作，它的返参是 <code>void</code>, 我们无法对其再次进行流操作。</p></blockquote><p><br /></p><h3 id=\"4ac3d996\">Sorted 排序</h3><p><br /></p><p><code>Sorted</code> 同样是一个中间操作，它的返参是一个 <code>Stream</code> 流。另外，我们可以传入一个 <code>Comparator</code> 用来自定义排序，如果不传，则使用默认的排序规则。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22stringCollection%5Cn%20%20%20%20.stream()%5Cn%20%20%20%20.sorted()%5Cn%20%20%20%20.filter((s)%20-%3E%20s.startsWith(%5C%22a%5C%22))%5Cn%20%20%20%20.forEach(System.out%3A%3Aprintln)%3B%5Cn%5Cn%2F%2F%20%5C%22aaa1%5C%22%2C%20%5C%22aaa2%5C%22%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>需要注意，<code>sorted</code> 不会对 <code>stringCollection</code> 做出任何改变，<code>stringCollection</code> 还是原有的那些个元素，且顺序不变：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22System.out.println(stringCollection)%3B%5Cn%2F%2F%20ddd2%2C%20aaa2%2C%20bbb1%2C%20aaa1%2C%20bbb3%2C%20ccc%2C%20bbb2%2C%20ddd1%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"78e2f144\">Map 转换</h3><p><br /></p><p>中间操作 <code>Map</code> 能够帮助我们将 <code>List</code> 中的每一个元素做功能处理。例如下面的示例，通过 <code>map</code> 我们将每一个 <code>string</code> 转成大写：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22stringCollection%5Cn%20%20%20%20.stream()%5Cn%20%20%20%20.map(String%3A%3AtoUpperCase)%5Cn%20%20%20%20.sorted((a%2C%20b)%20-%3E%20b.compareTo(a))%5Cn%20%20%20%20.forEach(System.out%3A%3Aprintln)%3B%5Cn%5Cn%2F%2F%20%5C%22DDD2%5C%22%2C%20%5C%22DDD1%5C%22%2C%20%5C%22CCC%5C%22%2C%20%5C%22BBB3%5C%22%2C%20%5C%22BBB2%5C%22%2C%20%5C%22AAA2%5C%22%2C%20%5C%22AAA1%5C%22%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>另外，我们还可以做对象之间的转换，业务中比较常用的是将 <code>DO</code>（数据库对象） 转换成 <code>BO</code>（业务对象） 。</p><p><br /></p><h3 id=\"b1e9fab6\">Match 匹配</h3><p><br /></p><p>顾名思义，<code>match</code> 用来做匹配操作，它的返回值是一个 <code>boolean</code> 类型。通过 <code>match</code>, 我们可以方便的验证一个 <code>list</code> 中是否存在某个类型的元素。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20%E9%AA%8C%E8%AF%81%20list%20%E4%B8%AD%20string%20%E6%98%AF%E5%90%A6%E6%9C%89%E4%BB%A5%20a%20%E5%BC%80%E5%A4%B4%E7%9A%84%2C%20%E5%8C%B9%E9%85%8D%E5%88%B0%E7%AC%AC%E4%B8%80%E4%B8%AA%EF%BC%8C%E5%8D%B3%E8%BF%94%E5%9B%9E%20true%5Cnboolean%20anyStartsWithA%20%3D%5Cn%20%20%20%20stringCollection%5Cn%20%20%20%20%20%20%20%20.stream()%5Cn%20%20%20%20%20%20%20%20.anyMatch((s)%20-%3E%20s.startsWith(%5C%22a%5C%22))%3B%5Cn%5CnSystem.out.println(anyStartsWithA)%3B%20%20%20%20%20%20%2F%2F%20true%5Cn%5Cn%2F%2F%20%E9%AA%8C%E8%AF%81%20list%20%E4%B8%AD%20string%20%E6%98%AF%E5%90%A6%E9%83%BD%E6%98%AF%E4%BB%A5%20a%20%E5%BC%80%E5%A4%B4%E7%9A%84%5Cnboolean%20allStartsWithA%20%3D%5Cn%20%20%20%20stringCollection%5Cn%20%20%20%20%20%20%20%20.stream()%5Cn%20%20%20%20%20%20%20%20.allMatch((s)%20-%3E%20s.startsWith(%5C%22a%5C%22))%3B%5Cn%5CnSystem.out.println(allStartsWithA)%3B%20%20%20%20%20%20%2F%2F%20false%5Cn%5Cn%2F%2F%20%E9%AA%8C%E8%AF%81%20list%20%E4%B8%AD%20string%20%E6%98%AF%E5%90%A6%E9%83%BD%E4%B8%8D%E6%98%AF%E4%BB%A5%20z%20%E5%BC%80%E5%A4%B4%E7%9A%84%2C%5Cnboolean%20noneStartsWithZ%20%3D%5Cn%20%20%20%20stringCollection%5Cn%20%20%20%20%20%20%20%20.stream()%5Cn%20%20%20%20%20%20%20%20.noneMatch((s)%20-%3E%20s.startsWith(%5C%22z%5C%22))%3B%5Cn%5CnSystem.out.println(noneStartsWithZ)%3B%20%20%20%20%20%20%2F%2F%20true%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"d46dce25\">Count 计数</h3><p><br /></p><p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20%E5%85%88%E5%AF%B9%20list%20%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%80%E5%A4%B4%E4%B8%BA%20b%20%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4%EF%BC%8C%E8%AE%A9%E5%90%8E%E7%BB%9F%E8%AE%A1%E6%95%B0%E9%87%8F%5Cnlong%20startsWithB%20%3D%5Cn%20%20%20%20stringCollection%5Cn%20%20%20%20%20%20%20%20.stream()%5Cn%20%20%20%20%20%20%20%20.filter((s)%20-%3E%20s.startsWith(%5C%22b%5C%22))%5Cn%20%20%20%20%20%20%20%20.count()%3B%5Cn%5CnSystem.out.println(startsWithB)%3B%20%20%20%20%2F%2F%203%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"Reduce\">Reduce</h3><p><br /></p><p><code>Reduce</code> 中文翻译为：<em>减少、缩小</em>。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Optional%3CString%3E%20reduced%20%3D%5Cn%20%20%20%20stringCollection%5Cn%20%20%20%20%20%20%20%20.stream()%5Cn%20%20%20%20%20%20%20%20.sorted()%5Cn%20%20%20%20%20%20%20%20.reduce((s1%2C%20s2)%20-%3E%20s1%20%2B%20%5C%22%23%5C%22%20%2B%20s2)%3B%5Cn%5Cnreduced.ifPresent(System.out%3A%3Aprintln)%3B%5Cn%2F%2F%20%5C%22aaa1%23aaa2%23bbb1%23bbb2%23bbb3%23ccc%23ddd1%23ddd2%5C%22%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"b2264d65\">Parallel-Streams 并行流</h2><p><br /></p><p>前面章节我们说过，<code>stream</code> 流是支持<strong>顺序</strong>和<strong>并行</strong>的。顺序流操作是单线程操作，而并行流是通过多线程来处理的，能够充分利用物理机 多核 CPU 的优势，同时处理速度更快。</p><p><br /></p><p>首先，我们创建一个包含 1000000 UUID list 集合。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22int%20max%20%3D%201000000%3B%5CnList%3CString%3E%20values%20%3D%20new%20ArrayList%3C%3E(max)%3B%5Cnfor%20(int%20i%20%3D%200%3B%20i%20%3C%20max%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20UUID%20uuid%20%3D%20UUID.randomUUID()%3B%5Cn%20%20%20%20values.add(uuid.toString())%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>分别通过顺序流和并行流，对这个 list 进行排序，测算耗时:</p><p><br /></p><h3 id=\"111628cc\">顺序流排序</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20%E7%BA%B3%E7%A7%92%5Cnlong%20t0%20%3D%20System.nanoTime()%3B%5Cn%5Cnlong%20count%20%3D%20values.stream().sorted().count()%3B%5CnSystem.out.println(count)%3B%5Cn%5Cnlong%20t1%20%3D%20System.nanoTime()%3B%5Cn%5Cn%2F%2F%20%E7%BA%B3%E7%A7%92%E8%BD%AC%E5%BE%AE%E7%A7%92%5Cnlong%20millis%20%3D%20TimeUnit.NANOSECONDS.toMillis(t1%20-%20t0)%3B%5CnSystem.out.println(String.format(%5C%22%E9%A1%BA%E5%BA%8F%E6%B5%81%E6%8E%92%E5%BA%8F%E8%80%97%E6%97%B6%3A%20%25d%20ms%5C%22%2C%20millis))%3B%5Cn%5Cn%2F%2F%20%E9%A1%BA%E5%BA%8F%E6%B5%81%E6%8E%92%E5%BA%8F%E8%80%97%E6%97%B6%3A%20899%20ms%5Cn%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"eb499c12\">并行流排序</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20%E7%BA%B3%E7%A7%92%5Cnlong%20t0%20%3D%20System.nanoTime()%3B%5Cn%5Cnlong%20count%20%3D%20values.parallelStream().sorted().count()%3B%5CnSystem.out.println(count)%3B%5Cn%5Cnlong%20t1%20%3D%20System.nanoTime()%3B%5Cn%5Cn%2F%2F%20%E7%BA%B3%E7%A7%92%E8%BD%AC%E5%BE%AE%E7%A7%92%5Cnlong%20millis%20%3D%20TimeUnit.NANOSECONDS.toMillis(t1%20-%20t0)%3B%5CnSystem.out.println(String.format(%5C%22%E5%B9%B6%E8%A1%8C%E6%B5%81%E6%8E%92%E5%BA%8F%E8%80%97%E6%97%B6%3A%20%25d%20ms%5C%22%2C%20millis))%3B%5Cn%5Cn%2F%2F%20%E5%B9%B6%E8%A1%8C%E6%B5%81%E6%8E%92%E5%BA%8F%E8%80%97%E6%97%B6%3A%20472%20ms%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>正如你所见，同样的逻辑处理，通过并行流，我们的性能提升了近 <strong>50%</strong>。完成这一切，我们需要做的仅仅是将 <code>stream</code> 改成了 <code>parallelStream</code>。</p><p><br /></p><h2 id=\"8321d67b\">Map 集合</h2><p><br /></p><p>前面已经提到过 <code>Map</code> 是不支持 <code>Stream</code> 流的，因为 <code>Map</code> 接口并没有像 <code>Collection</code> 接口那样，定义了 <code>stream()</code> 方法。但是，我们可以对其 <code>key</code>, <code>values</code>, <code>entry</code> 使用 流操作，如 <code>map.keySet().stream()</code>, <code>map.values().stream()</code> 和 <code>map.entrySet().stream()</code>.</p><p><br /></p><p>另外, JDK 8 中对 <code>map</code> 提供了一些其他新特性:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Map%3CInteger%2C%20String%3E%20map%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%5Cnfor%20(int%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%2F%2F%20%E4%B8%8E%E8%80%81%E7%89%88%E4%B8%8D%E5%90%8C%E7%9A%84%E6%98%AF%EF%BC%8CputIfAbent()%20%E6%96%B9%E6%B3%95%E5%9C%A8%20put%20%E4%B9%8B%E5%89%8D%EF%BC%8C%5Cn%20%20%20%20%2F%2F%20%E4%BC%9A%E5%88%A4%E6%96%AD%20key%20%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%AD%98%E5%9C%A8%E5%88%99%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%20value%2C%20%E5%90%A6%E5%88%99%20put%2C%20%E5%86%8D%E8%BF%94%E5%9B%9E%20value%5Cn%20%20%20%20map.putIfAbsent(i%2C%20%5C%22val%5C%22%20%2B%20i)%3B%5Cn%7D%5Cn%5Cn%2F%2F%20forEach%20%E5%8F%AF%E4%BB%A5%E5%BE%88%E6%96%B9%E4%BE%BF%E5%9C%B0%E5%AF%B9%20map%20%E8%BF%9B%E8%A1%8C%E9%81%8D%E5%8E%86%E6%93%8D%E4%BD%9C%5Cnmap.forEach((key%2C%20value)%20-%3E%20System.out.println(value))%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>除了上面的 <code>putIfAbsent()</code> 和 <code>forEach()</code> 外，我们还可以很方便地对某个 <code>key</code> 的值做相关操作：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20computeIfPresent()%2C%20%E5%BD%93%20key%20%E5%AD%98%E5%9C%A8%E6%97%B6%EF%BC%8C%E6%89%8D%E4%BC%9A%E5%81%9A%E7%9B%B8%E5%85%B3%E5%A4%84%E7%90%86%5Cn%2F%2F%20%E5%A6%82%E4%B8%8B%EF%BC%9A%E5%AF%B9%20key%20%E4%B8%BA%203%20%E7%9A%84%E5%80%BC%EF%BC%8C%E5%86%85%E9%83%A8%E4%BC%9A%E5%85%88%E5%88%A4%E6%96%AD%E5%80%BC%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E5%81%9A%20value%20%2B%20key%20%E7%9A%84%E6%8B%BC%E6%8E%A5%E6%93%8D%E4%BD%9C%5Cnmap.computeIfPresent(3%2C%20(num%2C%20val)%20-%3E%20val%20%2B%20num)%3B%5Cnmap.get(3)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20val33%5Cn%5Cn%2F%2F%20%E5%85%88%E5%88%A4%E6%96%AD%20key%20%E4%B8%BA%209%20%E7%9A%84%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E5%81%9A%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%5Cnmap.computeIfPresent(9%2C%20(num%2C%20val)%20-%3E%20null)%3B%5Cnmap.containsKey(9)%3B%20%20%20%20%20%2F%2F%20false%5Cn%5Cn%2F%2F%20computeIfAbsent()%2C%20%E5%BD%93%20key%20%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%EF%BC%8C%E6%89%8D%E4%BC%9A%E5%81%9A%E7%9B%B8%E5%85%B3%E5%A4%84%E7%90%86%5Cn%2F%2F%20%E5%A6%82%E4%B8%8B%EF%BC%9A%E5%85%88%E5%88%A4%E6%96%AD%20key%20%E4%B8%BA%2023%20%E7%9A%84%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%8C%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E6%B7%BB%E5%8A%A0%5Cnmap.computeIfAbsent(23%2C%20num%20-%3E%20%5C%22val%5C%22%20%2B%20num)%3B%5Cnmap.containsKey(23)%3B%20%20%20%20%2F%2F%20true%5Cn%5Cn%2F%2F%20%E5%85%88%E5%88%A4%E6%96%AD%20key%20%E4%B8%BA%203%20%E7%9A%84%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E4%B8%8D%E5%81%9A%E4%BB%BB%E4%BD%95%E5%A4%84%E7%90%86%5Cnmap.computeIfAbsent(3%2C%20num%20-%3E%20%5C%22bam%5C%22)%3B%5Cnmap.get(3)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20val33%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>关于删除操作，JDK 8 中提供了能够新的 <code>remove()</code> API:</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22map.remove(3%2C%20%5C%22val3%5C%22)%3B%5Cnmap.get(3)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20val33%5Cn%5Cnmap.remove(3%2C%20%5C%22val33%5C%22)%3B%5Cnmap.get(3)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20null%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>如上代码，只有当给定的 <code>key</code> 和 <code>value</code> 完全匹配时，才会执行删除操作。</p><p><br /></p><p>关于添加方法，JDK 8 中提供了带有默认值的 <code>getOrDefault()</code> 方法：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20%E8%8B%A5%20key%2042%20%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E8%BF%94%E5%9B%9E%20not%20found%5Cnmap.getOrDefault(42%2C%20%5C%22not%20found%5C%22)%3B%20%20%2F%2F%20not%20found%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>对于 <code>value</code> 的合并操作也变得更加简单：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%2F%2F%20merge%20%E6%96%B9%E6%B3%95%EF%BC%8C%E4%BC%9A%E5%85%88%E5%88%A4%E6%96%AD%E8%BF%9B%E8%A1%8C%E5%90%88%E5%B9%B6%E7%9A%84%20key%20%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%8C%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E4%BC%9A%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0%5Cnmap.merge(9%2C%20%5C%22val9%5C%22%2C%20(value%2C%20newValue)%20-%3E%20value.concat(newValue))%3B%5Cnmap.get(9)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20val9%5Cn%5Cn%2F%2F%20%E8%8B%A5%20key%20%E7%9A%84%E5%85%83%E7%B4%A0%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E5%AF%B9%20value%20%E6%89%A7%E8%A1%8C%E6%8B%BC%E6%8E%A5%E6%93%8D%E4%BD%9C%5Cnmap.merge(9%2C%20%5C%22concat%5C%22%2C%20(value%2C%20newValue)%20-%3E%20value.concat(newValue))%3B%5Cnmap.get(9)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20val9concat%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"df70aa39\">新的日期 API</h2><p><br /></p><p>Java 8 中在包 <code>java.time</code> 下添加了新的日期 API. 它和 <a href=\"https://link.juejin.im/?target=http%3A%2F%2Fwww.joda.org%2Fjoda-time%2F\" target=\"_blank\">Joda-Time</a> 库相似，但又不完全相同。接下来，我会通过一些示例代码介绍一下新 API 中 最关键的特性：</p><p><br /></p><h3 id=\"Clock\">Clock</h3><p><br /></p><p><code>Clock</code> 提供对当前日期和时间的访问。我们可以利用它来替代 <code>System.currentTimeMillis()</code> 方法。另外，通过 <code>clock.instant()</code> 能够获取一个 <code>instant</code> 实例， 此实例能够方便地转换成老版本中的 <code>java.util.Date</code> 对象。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Clock%20clock%20%3D%20Clock.systemDefaultZone()%3B%5Cnlong%20millis%20%3D%20clock.millis()%3B%5Cn%5CnInstant%20instant%20%3D%20clock.instant()%3B%5CnDate%20legacyDate%20%3D%20Date.from(instant)%3B%20%20%20%2F%2F%20%E8%80%81%E7%89%88%E6%9C%AC%20java.util.Date%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"4791e622\">Timezones 时区</h3><p><br /></p><p><code>ZoneId</code> 代表时区类。通过静态工厂方法方便地获取它，入参我们可以传入某个时区编码。另外，时区类还定义了一个偏移量，用来在当前时刻或某时间 与目标时区时间之间进行转换。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22System.out.println(ZoneId.getAvailableZoneIds())%3B%5Cn%2F%2F%20prints%20all%20available%20timezone%20ids%5Cn%5CnZoneId%20zone1%20%3D%20ZoneId.of(%5C%22Europe%2FBerlin%5C%22)%3B%5CnZoneId%20zone2%20%3D%20ZoneId.of(%5C%22Brazil%2FEast%5C%22)%3B%5CnSystem.out.println(zone1.getRules())%3B%5CnSystem.out.println(zone2.getRules())%3B%5Cn%5Cn%2F%2F%20ZoneRules%5BcurrentStandardOffset%3D%2B01%3A00%5D%5Cn%2F%2F%20ZoneRules%5BcurrentStandardOffset%3D-03%3A00%5D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"LocalTime\">LocalTime</h3><p><br /></p><p><code>LocalTime</code> 表示一个没有指定时区的时间类，例如，<code>10 p.m</code>. 或者 <code>17：30:15</code>，下面示例代码中，将会使用上面创建的 时区对象创建两个 <code>LocalTime</code>。然后我们会比较两个时间，并计算它们之间的小时和分钟的不同。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22LocalTime%20now1%20%3D%20LocalTime.now(zone1)%3B%5CnLocalTime%20now2%20%3D%20LocalTime.now(zone2)%3B%5Cn%5CnSystem.out.println(now1.isBefore(now2))%3B%20%20%2F%2F%20false%5Cn%5Cnlong%20hoursBetween%20%3D%20ChronoUnit.HOURS.between(now1%2C%20now2)%3B%5Cnlong%20minutesBetween%20%3D%20ChronoUnit.MINUTES.between(now1%2C%20now2)%3B%5Cn%5CnSystem.out.println(hoursBetween)%3B%20%20%20%20%20%20%20%2F%2F%20-3%5CnSystem.out.println(minutesBetween)%3B%20%20%20%20%20%2F%2F%20-239%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p><code>LocalTime</code> 提供多个静态工厂方法，目的是为了简化对时间对象实例的创建和操作，包括对时间字符串进行解析的操作等。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22LocalTime%20late%20%3D%20LocalTime.of(23%2C%2059%2C%2059)%3B%5CnSystem.out.println(late)%3B%20%20%20%20%20%20%20%2F%2F%2023%3A59%3A59%5Cn%5CnDateTimeFormatter%20germanFormatter%20%3D%5Cn%20%20%20%20DateTimeFormatter%5Cn%20%20%20%20%20%20%20%20.ofLocalizedTime(FormatStyle.SHORT)%5Cn%20%20%20%20%20%20%20%20.withLocale(Locale.GERMAN)%3B%5Cn%5CnLocalTime%20leetTime%20%3D%20LocalTime.parse(%5C%2213%3A37%5C%22%2C%20germanFormatter)%3B%5CnSystem.out.println(leetTime)%3B%20%20%20%2F%2F%2013%3A37%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"LocalDate\">LocalDate</h2><p><br /></p><p><code>LocalDate</code> 是一个日期对象，例如：<code>2014-03-11</code>。它和 <code>LocalTime</code> 一样是个 <code>final</code> 类型对象。下面的例子演示了如何通过加减日，月，年等来计算一个新的日期。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p><code>LocalDate</code>, <code>LocalTime</code>, 因为是 <code>final</code> 类型的对象，每一次操作都会返回一个新的时间对象。</p></blockquote><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22LocalDate%20today%20%3D%20LocalDate.now()%3B%5Cn%2F%2F%20%E4%BB%8A%E5%A4%A9%E5%8A%A0%E4%B8%80%E5%A4%A9%5CnLocalDate%20tomorrow%20%3D%20today.plus(1%2C%20ChronoUnit.DAYS)%3B%5Cn%2F%2F%20%E6%98%8E%E5%A4%A9%E5%87%8F%E4%B8%A4%E5%A4%A9%5CnLocalDate%20yesterday%20%3D%20tomorrow.minusDays(2)%3B%5Cn%5Cn%2F%2F%202014%20%E5%B9%B4%E4%B8%83%E6%9C%88%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%A4%A9%5CnLocalDate%20independenceDay%20%3D%20LocalDate.of(2014%2C%20Month.JULY%2C%204)%3B%5CnDayOfWeek%20dayOfWeek%20%3D%20independenceDay.getDayOfWeek()%3B%5CnSystem.out.println(dayOfWeek)%3B%20%20%20%20%2F%2F%20%E6%98%9F%E6%9C%9F%E4%BA%94%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>也可以直接解析日期字符串，生成 <code>LocalDate</code> 实例。（和 <code>LocalTime</code> 操作一样简单）</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22DateTimeFormatter%20germanFormatter%20%3D%5Cn%20%20%20%20DateTimeFormatter%5Cn%20%20%20%20%20%20%20%20.ofLocalizedDate(FormatStyle.MEDIUM)%5Cn%20%20%20%20%20%20%20%20.withLocale(Locale.GERMAN)%3B%5Cn%5CnLocalDate%20xmas%20%3D%20LocalDate.parse(%5C%2224.12.2014%5C%22%2C%20germanFormatter)%3B%5CnSystem.out.println(xmas)%3B%20%20%20%2F%2F%202014-12-24%5Cn%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h3 id=\"LocalDateTime\">LocalDateTime</h3><p><br /></p><p><code>LocalDateTime</code> 是一个<strong>日期 - 时间</strong>对象。你也可以将其看成是 <code>LocalDate</code> 和 <code>LocalTime</code> 的结合体。操作上，也大致相同。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p><code>LocalDateTime</code> 同样是一个 <code>final</code> 类型对象。</p></blockquote><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22LocalDateTime%20sylvester%20%3D%20LocalDateTime.of(2014%2C%20Month.DECEMBER%2C%2031%2C%2023%2C%2059%2C%2059)%3B%5Cn%5CnDayOfWeek%20dayOfWeek%20%3D%20sylvester.getDayOfWeek()%3B%5CnSystem.out.println(dayOfWeek)%3B%20%20%20%20%20%20%2F%2F%20%E6%98%9F%E6%9C%9F%E4%B8%89%5Cn%5CnMonth%20month%20%3D%20sylvester.getMonth()%3B%5CnSystem.out.println(month)%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8D%81%E4%BA%8C%E6%9C%88%5Cn%5Cn%2F%2F%20%E8%8E%B7%E5%8F%96%E6%94%B9%E6%97%B6%E9%97%B4%E6%98%AF%E8%AF%A5%E5%A4%A9%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%88%86%E9%92%9F%5Cnlong%20minuteOfDay%20%3D%20sylvester.getLong(ChronoField.MINUTE_OF_DAY)%3B%5CnSystem.out.println(minuteOfDay)%3B%20%20%20%20%2F%2F%201439%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>如果再加上的时区信息，<code>LocalDateTime</code> 还能够被转换成 <code>Instance</code> 实例。<code>Instance</code> 能够被转换成老版本中 <code>java.util.Date</code> 对象。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Instant%20instant%20%3D%20sylvester%5Cn%20%20%20%20%20%20%20%20.atZone(ZoneId.systemDefault())%5Cn%20%20%20%20%20%20%20%20.toInstant()%3B%5Cn%5CnDate%20legacyDate%20%3D%20Date.from(instant)%3B%5CnSystem.out.println(legacyDate)%3B%20%20%20%20%20%2F%2F%20Wed%20Dec%2031%2023%3A59%3A59%20CET%202014%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>格式化 <code>LocalDateTime</code> 对象就和格式化 LocalDate 或者 LocalTime 一样。除了使用预定义的格式以外，也可以自定义格式化输出。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22DateTimeFormatter%20formatter%20%3D%5Cn%20%20%20%20DateTimeFormatter%5Cn%20%20%20%20%20%20%20%20.ofPattern(%5C%22MMM%20dd%2C%20yyyy%20-%20HH%3Amm%5C%22)%3B%5Cn%5CnLocalDateTime%20parsed%20%3D%20LocalDateTime.parse(%5C%22Nov%2003%2C%202014%20-%2007%3A13%5C%22%2C%20formatter)%3B%5CnString%20string%20%3D%20formatter.format(parsed)%3B%5CnSystem.out.println(string)%3B%20%20%20%20%20%2F%2F%20Nov%2003%2C%202014%20-%2007%3A13%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>注意：和 <code>java.text.NumberFormat</code> 不同，新的 <code>DateTimeFormatter</code> 类是 <code>final</code> 类型的，同时也是线程安全的。更多细节请查看<a href=\"https://link.juejin.im/?target=http%3A%2F%2Fdownload.java.net%2Fjdk8%2Fdocs%2Fapi%2Fjava%2Ftime%2Fformat%2FDateTimeFormatter.html\" target=\"_blank\">这里</a></p></blockquote><p><br /></p><h2 id=\"44fc421c\">Annotations 注解</h2><p><br /></p><p>在 Java 8 中，注解是可以重复的。让我通过下面的示例代码，来看看到底是咋回事。</p><p><br /></p><p>首先，我们定义一个包装注解，里面包含了一个有着实际注解的数组：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%40interface%20Hints%20%7B%5Cn%20%20%20%20Hint%5B%5D%20value()%3B%5Cn%7D%5Cn%5Cn%40Repeatable(Hints.class)%5Cn%40interface%20Hint%20%7B%5Cn%20%20%20%20String%20value()%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>Java 8 中，通过 <code>@Repeatable</code>，允许我们对同一个类使用多重注解：</p><p><br /></p><p>第一种形态：使用注解容器（老方法）</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%40Hints(%7B%40Hint(%5C%22hint1%5C%22)%2C%20%40Hint(%5C%22hint2%5C%22)%7D)%5Cnclass%20Person%20%7B%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>第二种形态：使用可重复注解（新方法）</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%40Hint(%5C%22hint1%5C%22)%5Cn%40Hint(%5C%22hint2%5C%22)%5Cnclass%20Person%20%7B%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>使用第二种形态，Java 编译器能够在内部自动对 <code>@Hint</code> 进行设置。这对于需要通过反射来读取注解信息时，是非常重要的。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22Hint%20hint%20%3D%20Person.class.getAnnotation(Hint.class)%3B%5CnSystem.out.println(hint)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20null%5Cn%5CnHints%20hints1%20%3D%20Person.class.getAnnotation(Hints.class)%3B%5CnSystem.out.println(hints1.value().length)%3B%20%20%2F%2F%202%5Cn%5CnHint%5B%5D%20hints2%20%3D%20Person.class.getAnnotationsByType(Hint.class)%3B%5CnSystem.out.println(hints2.length)%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%202%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>尽管我们绝对不会在 <code>Person</code> 类上声明 <code>@Hints</code> 注解，但是它的信息仍然是可以通过 <code>getAnnotation(Hints.class)</code> 来读取的。 并且，<code>getAnnotationsByType</code> 方法会更方便，因为它赋予了所有 <code>@Hints</code> 注解标注的方法直接的访问权限。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22code%22%3A%22%40Target(%7BElementType.TYPE_PARAMETER%2C%20ElementType.TYPE_USE%7D)%5Cn%40interface%20MyAnnotation%20%7B%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><h2 id=\"433531fd\">结语</h2><p><br /></p><p>Java 8 新特性的编程指南到此就告一段落了。当然，还有很多内容需要进一步研究和说明。这就需要靠读者您来对 JDK 8 进一步探究了， 例如：<code>Arrays.parallelSort</code>, <code>StampedLock</code> 和 <code>CompletableFuture</code> 等等，我这里也仅是起到抛砖引玉的作用而已。</p><p><br /></p><p>最后，我希望这个教程能够对您有所帮助，也希望您阅读愉快。</p><p><br /></p><h2 id=\"b8c89356\">小哈的微信公众号</h2><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22%22%2C%22originWidth%22%3A430%2C%22originHeight%22%3A430%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A430%2C%22height%22%3A430%2C%22status%22%3A%22error%22%2C%22percent%22%3A0%2C%22message%22%3A%22%E5%9B%BE%E7%89%87%E4%B8%8D%E6%94%AF%E6%8C%81%E6%8B%B7%E8%B4%9D%E5%A4%8D%E5%88%B6%EF%BC%8C%E8%AF%B7%E5%8D%95%E7%8B%AC%E5%A4%8D%E5%88%B6%E4%B8%8A%E4%BC%A0%22%2C%22size%22%3A0%7D\"></card><cursor /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T03:31:22.000Z",
    "deleted_at": null,
    "created_at": "2019-01-22T03:30:52.000Z",
    "updated_at": "2019-05-28T08:12:51.000Z",
    "published_at": "2019-01-22T03:31:22.000Z",
    "first_published_at": "2019-01-22T03:31:22.000Z",
    "word_count": 6646,
    "cover": "",
    "description": "本文由 简悦 SimpRead 转码， 原文地址 https://juejin.im/post/5c3d7c8a51882525dd591ac7本教程翻译整理自 github.com/winterbe/ja…目录：一、接口内允许添加默认实现的方法二、Lambda 表达式三、函数式接口 Func...",
    "custom_description": "本文由 简悦 SimpRead 转码， 原文地址 https://juejin.im/post/5c3d7c8a51882525dd591ac7本教程翻译整理自 github.com/winterbe/ja…目录：一、接口内允许添加默认实现的方法二、Lambda 表达式三、函数式接口 Func...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1171176,
    "slug": "hko441",
    "title": "码农的运维指南",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 32,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T04:40:34.515Z",
      "updated_at": "2019-06-25T04:40:34.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"a3bf94c1\"></a>\n#### 查询时间段内的日志\n\n```bash\nsed -n '/20180905:06:20:00/,/20180905:06:30:00/p'  tomcat_stdout.log-20180905\nsed -n '/20180905:02:10/,/20180905:02:20/p'  tomcat_stdout.log-20180905\n```\n\n<a name=\"7c1c8e68\"></a>\n#### 查询文件的后10行\n\n```bash\ntail -n 10 tomcat_stdout.log-20180905\n```\n\n<a name=\"9d60e7b5\"></a>\n#### 查询文件的前10行\n\n```bash\nhead -n 10 tomcat_stdout.log-20180905\n```\n\n<a name=\"db8ad796\"></a>\n#### 在指定目录下查询是否有指定名称的文件\n\n```bash\nfind /logs/ -name 'abc.log'\n```\n\n<a name=\"c8c0d895\"></a>\n#### 一次搜索多个gz文件中的内容\n\n```bash\nzgrep 1537354997562_xRi0 mybatis*2018-09-19.log*|grep che168_1004076\n```\n\n",
    "body_draft": "",
    "body_html": "<h4 id=\"a3bf94c1\">查询时间段内的日志</h4><p><br /></p><pre data-lang=\"bash\"><code>sed -n '/20180905:06:20:00/,/20180905:06:30:00/p'  tomcat_stdout.log-20180905\nsed -n '/20180905:02:10/,/20180905:02:20/p'  tomcat_stdout.log-20180905</code></pre><p><br /></p><h4 id=\"7c1c8e68\">查询文件的后10行</h4><p><br /></p><pre data-lang=\"bash\"><code>tail -n 10 tomcat_stdout.log-20180905</code></pre><p><br /></p><h4 id=\"9d60e7b5\">查询文件的前10行</h4><p><br /></p><pre data-lang=\"bash\"><code>head -n 10 tomcat_stdout.log-20180905</code></pre><p><br /></p><h4 id=\"db8ad796\">在指定目录下查询是否有指定名称的文件</h4><p><br /></p><pre data-lang=\"bash\"><code>find /logs/ -name 'abc.log'</code></pre><p><br /></p><h4 id=\"c8c0d895\">一次搜索多个gz文件中的内容</h4><p><br /></p><pre data-lang=\"bash\"><code>zgrep 1537354997562_xRi0 mybatis*2018-09-19.log*|grep che168_1004076</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><h4 id=\"a3bf94c1\"><cursor />查询时间段内的日志</h4><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22sed%20-n%20'%2F20180905%3A06%3A20%3A00%2F%2C%2F20180905%3A06%3A30%3A00%2Fp'%20%20tomcat_stdout.log-20180905%5Cnsed%20-n%20'%2F20180905%3A02%3A10%2F%2C%2F20180905%3A02%3A20%2Fp'%20%20tomcat_stdout.log-20180905%22%7D\"></card><p><br /></p><h4 id=\"7c1c8e68\">查询文件的后10行</h4><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22tail%20-n%2010%20tomcat_stdout.log-20180905%22%7D\"></card><p><br /></p><h4 id=\"9d60e7b5\">查询文件的前10行</h4><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22head%20-n%2010%20tomcat_stdout.log-20180905%22%7D\"></card><p><br /></p><h4 id=\"db8ad796\">在指定目录下查询是否有指定名称的文件</h4><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22find%20%2Flogs%2F%20-name%20'abc.log'%22%7D\"></card><p><br /></p><h4 id=\"c8c0d895\">一次搜索多个gz文件中的内容</h4><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22zgrep%201537354997562_xRi0%20mybatis*2018-09-19.log*%7Cgrep%20che168_1004076%22%7D\"></card><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T03:29:28.000Z",
    "deleted_at": null,
    "created_at": "2019-01-22T03:29:01.000Z",
    "updated_at": "2019-05-28T08:12:40.000Z",
    "published_at": "2019-01-22T03:29:28.000Z",
    "first_published_at": "2019-01-22T03:29:28.000Z",
    "word_count": 114,
    "cover": "",
    "description": "查询时间段内的日志sed -n '/20180905:06:20:00/,/20180905:06:30:00/p'  tomcat_stdout.log-20180905 sed -n '/20180905:02:10/,/20180905:02:20/p'  tomcat_stdout.l...",
    "custom_description": "查询时间段内的日志sed -n '/20180905:06:20:00/,/20180905:06:30:00/p'  tomcat_stdout.log-20180905 sed -n '/20180905:02:10/,/20180905:02:20/p'  tomcat_stdout.l...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1975198,
    "slug": "7a9be329-b668-4c55-8a80-b4377f796999",
    "title": "为什么阿里巴巴要求谨慎使用ArrayList中的subList方法 - 掘金",
    "book_id": 208262,
    "book": {
      "id": 208262,
      "type": "Book",
      "slug": "blog",
      "name": "博客",
      "user_id": 99434,
      "description": "网络资源搬运工",
      "creator_id": 99434,
      "public": 1,
      "items_count": 33,
      "likes_count": 0,
      "watches_count": 10,
      "content_updated_at": "2019-06-25T08:45:39.997Z",
      "updated_at": "2019-06-25T08:45:39.000Z",
      "created_at": "2019-01-22T03:28:24.000Z",
      "namespace": "kun95/blog",
      "user": {
        "id": 99434,
        "type": "User",
        "login": "kun95",
        "name": "临安吴彦祖",
        "description": "没错就是我",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 5,
        "public_books_count": 1,
        "followers_count": 3,
        "following_count": 4,
        "created_at": "2018-04-09T01:52:55.000Z",
        "updated_at": "2019-06-25T01:53:18.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 99434,
    "creator": {
      "id": 99434,
      "type": "User",
      "login": "kun95",
      "name": "临安吴彦祖",
      "description": "没错就是我",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/99434/1548128230898-avatar/cbc15449-06dd-4201-aa25-d89034e116d2.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 5,
      "public_books_count": 1,
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-04-09T01:52:55.000Z",
      "updated_at": "2019-06-25T01:53:18.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "[GitHub 3.7k Star 的Java工程师成神之路 ，不来了解一下吗?](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fhollischuang%2FtoBeTopJavaer)\n\n[GitHub 3.7k Star 的Java工程师成神之路 ，真的不来了解一下吗?](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fhollischuang%2FtoBeTopJavaer)\n\n[GitHub 3.7k Star 的Java工程师成神之路 ，真的确定不来了解一下吗?](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fhollischuang%2FtoBeTopJavaer)\n\n集合是Java开发日常开发中经常会使用到的。在之前的一些文章中，我们介绍过一些关于使用集合类应该注意的事项，如《为什么阿里巴巴禁止在 foreach 循环里进行元素的 remove/add 操作》、《为什么阿里巴巴建议集合初始化时，指定集合容量大小》等。\n\n\n\n关于集合类，《阿里巴巴Java开发手册》中其实还有另外一个规定：\n\n![](https://user-gold-cdn.xitu.io/2019/6/25/16b8c5809732a52d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&display=inline&height=220&originHeight=220&originWidth=1280&status=done&width=1280)\n\n￼\n\n本文就来分析一下为什么会有如此建议？其背后的原理是什么？\n\n<a name=\"subList\"></a>\n### subList\n\nsubList是List接口中定义的一个方法，该方法主要用于返回一个集合中的一段、可以理解为截取一个集合中的部分元素，他的返回值也是一个List。\n\n如以下代码：\n\n```\npublic static void main(String[] args) {\n    List<String> names = new ArrayList<String>() {{\n        add(\"Hollis\");\n        add(\"hollischuang\");\n        add(\"H\");\n    }};\n\n    List subList = names.subList(0, 1);\n    System.out.println(subList);\n}\n复制代码\n```\n\n以上代码输出结果为：\n\n```\n[Hollis]\n复制代码\n```\n\n如果我们改动下代码，将subList的返回值强转成ArrayList试一下：\n\n```\npublic static void main(String[] args) {\n    List<String> names = new ArrayList<String>() {{\n        add(\"Hollis\");\n        add(\"hollischuang\");\n        add(\"H\");\n    }};\n\n    ArrayList subList = names.subList(0, 1);\n    System.out.println(subList);\n}\n复制代码\n```\n\n以上代码将抛出异常：\n\n```\njava.lang.ClassCastException: java.util.ArrayList$SubList cannot be cast to java.util.ArrayList\n复制代码\n```\n\n不只是强转成ArrayList会报错，强转成LinkedList、Vector等List的实现类同样也都会报错。\n\n那么，为什么会发生这样的报错呢？我们接下来深入分析一下。\n\n[]()\n<a name=\"e971e343\"></a>\n### 底层原理\n\n首先，我们看下subList方法给我们返回的List到底是个什么东西，这一点在JDK源码中注释是这样说的：\n\n> Returns a view of the portion of this list between the specifiedfromIndex, inclusive, and toIndex, exclusive.\n\n\n也就是说subList 返回是一个视图，那么什么叫做视图呢？\n\n我们看下subList的源码：\n\n```\npublic List<E> subList(int fromIndex, int toIndex) {\n    subListRangeCheck(fromIndex, toIndex, size);\n    return new SubList(this, 0, fromIndex, toIndex);\n}\n复制代码\n```\n\n这个方法返回了一个SubList，这个类是ArrayList中的一个内部类。\n\nSubList这个类中单独定义了set、get、size、add、remove等方法。\n\n当我们调用subList方法的时候，会通过调用SubList的构造函数创建一个SubList，那么看下这个构造函数做了哪些事情：\n\n```\nSubList(AbstractList<E> parent,\n            int offset, int fromIndex, int toIndex) {\n    this.parent = parent;\n    this.parentOffset = fromIndex;\n    this.offset = offset + fromIndex;\n    this.size = toIndex - fromIndex;\n    this.modCount = ArrayList.this.modCount;\n}\n复制代码\n```\n\n可以看到，这个构造函数中把原来的List以及该List中的部分属性直接赋值给自己的一些属性了。\n\n也就是说，SubList并没有重新创建一个List，而是直接引用了原有的List（返回了父类的视图），只是指定了一下他要使用的元素的范围而已（从fromIndex（包含），到toIndex（不包含））。\n\n所以，为什么不能讲subList方法得到的集合直接转换成ArrayList呢？因为SubList只是ArrayList的内部类，他们之间并没有集成关系，故无法直接进行强制类型转换。\n\n[]()\n<a name=\"f012a6ac\"></a>\n### 视图有什么问题\n\n前面通过查看源码，我们知道，subList()方法并没有重新创建一个ArrayList，而是返回了一个ArrayList的内部类——SubList。\n\n这个SubList是ArrayList的一个视图。\n\n那么，这个视图又会带来什么问题呢？我们需要简单写几段代码看一下。\n\n**1、非结构性改变SubList**\n\n```\npublic static void main(String[] args) {\n    List<String> sourceList = new ArrayList<String>() {{\n        add(\"H\");\n        add(\"O\");\n        add(\"L\");\n        add(\"L\");\n        add(\"I\");\n        add(\"S\");\n    }};\n\n    List subList = sourceList.subList(2, 5);\n\n    System.out.println(\"sourceList ： \" + sourceList);\n    System.out.println(\"sourceList.subList(2, 5) 得到List ：\");\n    System.out.println(\"subList ： \" + subList);\n\n    subList.set(1, \"666\");\n\n    System.out.println(\"subList.set(3,666) 得到List ：\");\n    System.out.println(\"subList ： \" + subList);\n    System.out.println(\"sourceList ： \" + sourceList);\n\n}\n复制代码\n```\n\n得到结果：\n\n```\nsourceList ： [H, O, L, L, I, S]\nsourceList.subList(2, 5) 得到List ：\nsubList ： [L, L, I]\nsubList.set(3,666) 得到List ：\nsubList ： [L, 666, I]\nsourceList ： [H, O, L, 666, I, S]\n复制代码\n```\n\n当我们尝试通过set方法，改变subList中某个元素的值得时候，我们发现，原来的那个List中对应元素的值也发生了改变。\n\n同理，如果我们使用同样的方法，对sourceList中的某个元素进行修改，那么subList中对应的值也会发生改变。读者可以自行尝试一下。\n\n**1、结构性改变SubList**\n\n```\npublic static void main(String[] args) {\n    List<String> sourceList = new ArrayList<String>() {{\n        add(\"H\");\n        add(\"O\");\n        add(\"L\");\n        add(\"L\");\n        add(\"I\");\n        add(\"S\");\n    }};\n\n    List subList = sourceList.subList(2, 5);\n\n    System.out.println(\"sourceList ： \" + sourceList);\n    System.out.println(\"sourceList.subList(2, 5) 得到List ：\");\n    System.out.println(\"subList ： \" + subList);\n\n    subList.add(\"666\");\n\n    System.out.println(\"subList.add(666) 得到List ：\");\n    System.out.println(\"subList ： \" + subList);\n    System.out.println(\"sourceList ： \" + sourceList);\n\n}\n复制代码\n```\n\n得到结果：\n\n```\nsourceList ： [H, O, L, L, I, S]\nsourceList.subList(2, 5) 得到List ：\nsubList ： [L, L, I]\nsubList.add(666) 得到List ：\nsubList ： [L, L, I, 666]\nsourceList ： [H, O, L, L, I, 666, S]\n复制代码\n```\n\n我们尝试对subList的结构进行改变，即向其追加元素，那么得到的结果是sourceList的结构也同样发生了改变。\n\n**1、结构性改变原List**\n\n```\npublic static void main(String[] args) {\n    List<String> sourceList = new ArrayList<String>() {{\n        add(\"H\");\n        add(\"O\");\n        add(\"L\");\n        add(\"L\");\n        add(\"I\");\n        add(\"S\");\n    }};\n\n    List subList = sourceList.subList(2, 5);\n\n    System.out.println(\"sourceList ： \" + sourceList);\n    System.out.println(\"sourceList.subList(2, 5) 得到List ：\");\n    System.out.println(\"subList ： \" + subList);\n\n    sourceList.add(\"666\");\n\n    System.out.println(\"sourceList.add(666) 得到List ：\");\n    System.out.println(\"sourceList ： \" + sourceList);\n    System.out.println(\"subList ： \" + subList);\n\n}\n复制代码\n```\n\n得到结果：\n\n```\nException in thread \"main\" java.util.ConcurrentModificationException\n    at java.util.ArrayList$SubList.checkForComodification(ArrayList.java:1239)\n    at java.util.ArrayList$SubList.listIterator(ArrayList.java:1099)\n    at java.util.AbstractList.listIterator(AbstractList.java:299)\n    at java.util.ArrayList$SubList.iterator(ArrayList.java:1095)\n    at java.util.AbstractCollection.toString(AbstractCollection.java:454)\n    at java.lang.String.valueOf(String.java:2994)\n    at java.lang.StringBuilder.append(StringBuilder.java:131)\n    at com.hollis.SubListTest.main(SubListTest.java:28)\n复制代码\n```\n\n我们尝试对sourceList的结构进行改变，即向其追加元素，结果发现抛出了ConcurrentModificationException。关于这个异常，我们在《[一不小心就踩坑的fail-fast是个什么鬼？](https://link.juejin.im/?target=https%3A%2F%2Fwww.hollischuang.com%2Farchives%2F3542)》中分析过，这里原理相同，就不再赘述了。\n\n**小结**\n\n我们简单总结一下，List的subList方法并没有创建一个新的List，而是使用了原List的视图，这个视图使用内部类SubList表示。\n\n所以，我们不能把subList方法返回的List强制转换成ArrayList等类，因为他们之间没有继承关系。\n\n另外，视图和原List的修改还需要注意几点，尤其是他们之间的相互影响：\n\n1、对父(sourceList)子(subList)List做的非结构性修改（non-structural changes），都会影响到彼此。\n\n2、对子List做结构性修改，操作同样会反映到父List上。\n\n3、对父List做结构性修改，会抛出异常ConcurrentModificationException。\n\n所以，阿里巴巴Java开发手册中有另外一条规定：\n\n![](https://user-gold-cdn.xitu.io/2019/6/25/16b8c58095d31b5e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&display=inline&height=111&originHeight=111&originWidth=1280&status=done&width=1280)\n\n￼\n\n[]()\n<a name=\"8572266e\"></a>\n### 如何创建新的List\n\n如果需要对subList作出修改，又不想动原list。那么可以创建subList的一个拷贝：\n\n```\nsubList = Lists.newArrayList(subList);\nlist.stream().skip(strart).limit(end).collect(Collectors.toList());\n复制代码\n```\n\nPS：最近，《阿里巴巴Java开发手册》已经正式更名为《Java开发手册》，并发布了新版本，增加了21条新规约，修改描述112处。\n\n关注公众号后台回复：手册，即可获取最新版Java开发手册。\n\n![](https://user-gold-cdn.xitu.io/2019/6/25/16b8c587766e30d7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&display=inline&height=661&originHeight=661&originWidth=1087&status=done&width=1087)\n\n参考资料： [www.jianshu.com/p/585485124…](https://link.juejin.im/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F5854851240df) [www.cnblogs.com/ljdblog/p/6…](https://link.juejin.im/?target=https%3A%2F%2Fwww.cnblogs.com%2Fljdblog%2Fp%2F6251387.html)\n\n\n哈哈\n",
    "body_draft": "",
    "body_html": "<p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fhollischuang%2FtoBeTopJavaer\" target=\"_blank\">GitHub 3.7k Star 的Java工程师成神之路 ，不来了解一下吗?</a></p><p><br /></p><p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fhollischuang%2FtoBeTopJavaer\" target=\"_blank\">GitHub 3.7k Star 的Java工程师成神之路 ，真的不来了解一下吗?</a></p><p><br /></p><p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fhollischuang%2FtoBeTopJavaer\" target=\"_blank\">GitHub 3.7k Star 的Java工程师成神之路 ，真的确定不来了解一下吗?</a></p><p><br /></p><p>集合是Java开发日常开发中经常会使用到的。在之前的一些文章中，我们介绍过一些关于使用集合类应该注意的事项，如《为什么阿里巴巴禁止在 foreach 循环里进行元素的 remove/add 操作》、《为什么阿里巴巴建议集合初始化时，指定集合容量大小》等。</p><p><br /></p><p><br /></p><p><br /></p><p>关于集合类，《阿里巴巴Java开发手册》中其实还有另外一个规定：</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2019/6/25/16b8c5809732a52d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&amp;display=inline&amp;height=220&amp;originHeight=220&amp;originWidth=1280&amp;status=done&amp;width=1280\" style=\"max-width: 600px; width: 1280px;\" /></p><p><br /></p><p>￼</p><p><br /></p><p>本文就来分析一下为什么会有如此建议？其背后的原理是什么？</p><p><br /></p><h3 id=\"subList\">subList</h3><p><br /></p><p>subList是List接口中定义的一个方法，该方法主要用于返回一个集合中的一段、可以理解为截取一个集合中的部分元素，他的返回值也是一个List。</p><p><br /></p><p>如以下代码：</p><p><br /></p><pre><code>public static void main(String[] args) {\n    List&lt;String&gt; names = new ArrayList&lt;String&gt;() {{\n        add(&quot;Hollis&quot;);\n        add(&quot;hollischuang&quot;);\n        add(&quot;H&quot;);\n    }};\n\n    List subList = names.subList(0, 1);\n    System.out.println(subList);\n}\n复制代码</code></pre><p><br /></p><p>以上代码输出结果为：</p><p><br /></p><pre><code>[Hollis]\n复制代码</code></pre><p><br /></p><p>如果我们改动下代码，将subList的返回值强转成ArrayList试一下：</p><p><br /></p><pre><code>public static void main(String[] args) {\n    List&lt;String&gt; names = new ArrayList&lt;String&gt;() {{\n        add(&quot;Hollis&quot;);\n        add(&quot;hollischuang&quot;);\n        add(&quot;H&quot;);\n    }};\n\n    ArrayList subList = names.subList(0, 1);\n    System.out.println(subList);\n}\n复制代码</code></pre><p><br /></p><p>以上代码将抛出异常：</p><p><br /></p><pre><code>java.lang.ClassCastException: java.util.ArrayList$SubList cannot be cast to java.util.ArrayList\n复制代码</code></pre><p><br /></p><p>不只是强转成ArrayList会报错，强转成LinkedList、Vector等List的实现类同样也都会报错。</p><p><br /></p><p>那么，为什么会发生这样的报错呢？我们接下来深入分析一下。</p><p><br /></p><p><a name=\"底层原理\"></a></p><h3 id=\"e971e343\">底层原理</h3><p><br /></p><p>首先，我们看下subList方法给我们返回的List到底是个什么东西，这一点在JDK源码中注释是这样说的：</p><p><br /></p><blockquote><p>Returns a view of the portion of this list between the specifiedfromIndex, inclusive, and toIndex, exclusive.</p></blockquote><p><br /></p><p>也就是说subList 返回是一个视图，那么什么叫做视图呢？</p><p><br /></p><p>我们看下subList的源码：</p><p><br /></p><pre><code>public List&lt;E&gt; subList(int fromIndex, int toIndex) {\n    subListRangeCheck(fromIndex, toIndex, size);\n    return new SubList(this, 0, fromIndex, toIndex);\n}\n复制代码</code></pre><p><br /></p><p>这个方法返回了一个SubList，这个类是ArrayList中的一个内部类。</p><p><br /></p><p>SubList这个类中单独定义了set、get、size、add、remove等方法。</p><p><br /></p><p>当我们调用subList方法的时候，会通过调用SubList的构造函数创建一个SubList，那么看下这个构造函数做了哪些事情：</p><p><br /></p><pre><code>SubList(AbstractList&lt;E&gt; parent,\n            int offset, int fromIndex, int toIndex) {\n    this.parent = parent;\n    this.parentOffset = fromIndex;\n    this.offset = offset + fromIndex;\n    this.size = toIndex - fromIndex;\n    this.modCount = ArrayList.this.modCount;\n}\n复制代码</code></pre><p><br /></p><p>可以看到，这个构造函数中把原来的List以及该List中的部分属性直接赋值给自己的一些属性了。</p><p><br /></p><p>也就是说，SubList并没有重新创建一个List，而是直接引用了原有的List（返回了父类的视图），只是指定了一下他要使用的元素的范围而已（从fromIndex（包含），到toIndex（不包含））。</p><p><br /></p><p>所以，为什么不能讲subList方法得到的集合直接转换成ArrayList呢？因为SubList只是ArrayList的内部类，他们之间并没有集成关系，故无法直接进行强制类型转换。</p><p><br /></p><p><a name=\"视图有什么问题\"></a></p><h3 id=\"f012a6ac\">视图有什么问题</h3><p><br /></p><p>前面通过查看源码，我们知道，subList()方法并没有重新创建一个ArrayList，而是返回了一个ArrayList的内部类——SubList。</p><p><br /></p><p>这个SubList是ArrayList的一个视图。</p><p><br /></p><p>那么，这个视图又会带来什么问题呢？我们需要简单写几段代码看一下。</p><p><br /></p><p><strong>1、非结构性改变SubList</strong></p><p><br /></p><pre><code>public static void main(String[] args) {\n    List&lt;String&gt; sourceList = new ArrayList&lt;String&gt;() {{\n        add(&quot;H&quot;);\n        add(&quot;O&quot;);\n        add(&quot;L&quot;);\n        add(&quot;L&quot;);\n        add(&quot;I&quot;);\n        add(&quot;S&quot;);\n    }};\n\n    List subList = sourceList.subList(2, 5);\n\n    System.out.println(&quot;sourceList ： &quot; + sourceList);\n    System.out.println(&quot;sourceList.subList(2, 5) 得到List ：&quot;);\n    System.out.println(&quot;subList ： &quot; + subList);\n\n    subList.set(1, &quot;666&quot;);\n\n    System.out.println(&quot;subList.set(3,666) 得到List ：&quot;);\n    System.out.println(&quot;subList ： &quot; + subList);\n    System.out.println(&quot;sourceList ： &quot; + sourceList);\n\n}\n复制代码</code></pre><p><br /></p><p>得到结果：</p><p><br /></p><pre><code>sourceList ： [H, O, L, L, I, S]\nsourceList.subList(2, 5) 得到List ：\nsubList ： [L, L, I]\nsubList.set(3,666) 得到List ：\nsubList ： [L, 666, I]\nsourceList ： [H, O, L, 666, I, S]\n复制代码</code></pre><p><br /></p><p>当我们尝试通过set方法，改变subList中某个元素的值得时候，我们发现，原来的那个List中对应元素的值也发生了改变。</p><p><br /></p><p>同理，如果我们使用同样的方法，对sourceList中的某个元素进行修改，那么subList中对应的值也会发生改变。读者可以自行尝试一下。</p><p><br /></p><p><strong>1、结构性改变SubList</strong></p><p><br /></p><pre><code>public static void main(String[] args) {\n    List&lt;String&gt; sourceList = new ArrayList&lt;String&gt;() {{\n        add(&quot;H&quot;);\n        add(&quot;O&quot;);\n        add(&quot;L&quot;);\n        add(&quot;L&quot;);\n        add(&quot;I&quot;);\n        add(&quot;S&quot;);\n    }};\n\n    List subList = sourceList.subList(2, 5);\n\n    System.out.println(&quot;sourceList ： &quot; + sourceList);\n    System.out.println(&quot;sourceList.subList(2, 5) 得到List ：&quot;);\n    System.out.println(&quot;subList ： &quot; + subList);\n\n    subList.add(&quot;666&quot;);\n\n    System.out.println(&quot;subList.add(666) 得到List ：&quot;);\n    System.out.println(&quot;subList ： &quot; + subList);\n    System.out.println(&quot;sourceList ： &quot; + sourceList);\n\n}\n复制代码</code></pre><p><br /></p><p>得到结果：</p><p><br /></p><pre><code>sourceList ： [H, O, L, L, I, S]\nsourceList.subList(2, 5) 得到List ：\nsubList ： [L, L, I]\nsubList.add(666) 得到List ：\nsubList ： [L, L, I, 666]\nsourceList ： [H, O, L, L, I, 666, S]\n复制代码</code></pre><p><br /></p><p>我们尝试对subList的结构进行改变，即向其追加元素，那么得到的结果是sourceList的结构也同样发生了改变。</p><p><br /></p><p><strong>1、结构性改变原List</strong></p><p><br /></p><pre><code>public static void main(String[] args) {\n    List&lt;String&gt; sourceList = new ArrayList&lt;String&gt;() {{\n        add(&quot;H&quot;);\n        add(&quot;O&quot;);\n        add(&quot;L&quot;);\n        add(&quot;L&quot;);\n        add(&quot;I&quot;);\n        add(&quot;S&quot;);\n    }};\n\n    List subList = sourceList.subList(2, 5);\n\n    System.out.println(&quot;sourceList ： &quot; + sourceList);\n    System.out.println(&quot;sourceList.subList(2, 5) 得到List ：&quot;);\n    System.out.println(&quot;subList ： &quot; + subList);\n\n    sourceList.add(&quot;666&quot;);\n\n    System.out.println(&quot;sourceList.add(666) 得到List ：&quot;);\n    System.out.println(&quot;sourceList ： &quot; + sourceList);\n    System.out.println(&quot;subList ： &quot; + subList);\n\n}\n复制代码</code></pre><p><br /></p><p>得到结果：</p><p><br /></p><pre><code>Exception in thread &quot;main&quot; java.util.ConcurrentModificationException\n    at java.util.ArrayList$SubList.checkForComodification(ArrayList.java:1239)\n    at java.util.ArrayList$SubList.listIterator(ArrayList.java:1099)\n    at java.util.AbstractList.listIterator(AbstractList.java:299)\n    at java.util.ArrayList$SubList.iterator(ArrayList.java:1095)\n    at java.util.AbstractCollection.toString(AbstractCollection.java:454)\n    at java.lang.String.valueOf(String.java:2994)\n    at java.lang.StringBuilder.append(StringBuilder.java:131)\n    at com.hollis.SubListTest.main(SubListTest.java:28)\n复制代码</code></pre><p><br /></p><p>我们尝试对sourceList的结构进行改变，即向其追加元素，结果发现抛出了ConcurrentModificationException。关于这个异常，我们在《<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.hollischuang.com%2Farchives%2F3542\" target=\"_blank\">一不小心就踩坑的fail-fast是个什么鬼？</a>》中分析过，这里原理相同，就不再赘述了。</p><p><br /></p><p><strong>小结</strong></p><p><br /></p><p>我们简单总结一下，List的subList方法并没有创建一个新的List，而是使用了原List的视图，这个视图使用内部类SubList表示。</p><p><br /></p><p>所以，我们不能把subList方法返回的List强制转换成ArrayList等类，因为他们之间没有继承关系。</p><p><br /></p><p>另外，视图和原List的修改还需要注意几点，尤其是他们之间的相互影响：</p><p><br /></p><p>1、对父(sourceList)子(subList)List做的非结构性修改（non-structural changes），都会影响到彼此。</p><p><br /></p><p>2、对子List做结构性修改，操作同样会反映到父List上。</p><p><br /></p><p>3、对父List做结构性修改，会抛出异常ConcurrentModificationException。</p><p><br /></p><p>所以，阿里巴巴Java开发手册中有另外一条规定：</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2019/6/25/16b8c58095d31b5e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&amp;display=inline&amp;height=111&amp;originHeight=111&amp;originWidth=1280&amp;status=done&amp;width=1280\" style=\"max-width: 600px; width: 1280px;\" /></p><p><br /></p><p>￼</p><p><br /></p><p><a name=\"如何创建新的List\"></a></p><h3 id=\"8572266e\">如何创建新的List</h3><p><br /></p><p>如果需要对subList作出修改，又不想动原list。那么可以创建subList的一个拷贝：</p><p><br /></p><pre><code>subList = Lists.newArrayList(subList);\nlist.stream().skip(strart).limit(end).collect(Collectors.toList());\n复制代码</code></pre><p><br /></p><p>PS：最近，《阿里巴巴Java开发手册》已经正式更名为《Java开发手册》，并发布了新版本，增加了21条新规约，修改描述112处。</p><p><br /></p><p>关注公众号后台回复：手册，即可获取最新版Java开发手册。</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2019/6/25/16b8c587766e30d7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#align=left&amp;display=inline&amp;height=661&amp;originHeight=661&amp;originWidth=1087&amp;status=done&amp;width=1087\" style=\"max-width: 600px; width: 1087px;\" /></p><p><br /></p><p>参考资料： <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F5854851240df\" target=\"_blank\">www.jianshu.com/p/585485124…</a> <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.cnblogs.com%2Fljdblog%2Fp%2F6251387.html\" target=\"_blank\">www.cnblogs.com/ljdblog/p/6…</a></p><p><br /></p><p><br /></p><p>哈哈</p>",
    "body_lake": "<!doctype lake><p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fhollischuang%2FtoBeTopJavaer\" target=\"_blank\">GitHub 3.7k Star 的Java工程师成神之路 ，不来了解一下吗?</a></p><p><br /></p><p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fhollischuang%2FtoBeTopJavaer\" target=\"_blank\">GitHub 3.7k Star 的Java工程师成神之路 ，真的不来了解一下吗?</a></p><p><br /></p><p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fhollischuang%2FtoBeTopJavaer\" target=\"_blank\">GitHub 3.7k Star 的Java工程师成神之路 ，真的确定不来了解一下吗?</a></p><p><br /></p><p>集合是Java开发日常开发中经常会使用到的。在之前的一些文章中，我们介绍过一些关于使用集合类应该注意的事项，如《为什么阿里巴巴禁止在 foreach 循环里进行元素的 remove/add 操作》、《为什么阿里巴巴建议集合初始化时，指定集合容量大小》等。</p><p><br /></p><p><br /></p><p><cursor /><br /></p><p>关于集合类，《阿里巴巴Java开发手册》中其实还有另外一个规定：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F6%2F25%2F16b8c5809732a52d%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%22%2C%22originWidth%22%3A1280%2C%22originHeight%22%3A220%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A1280%2C%22height%22%3A220%7D\"></card></p><p><br /></p><p>￼</p><p><br /></p><p>本文就来分析一下为什么会有如此建议？其背后的原理是什么？</p><p><br /></p><h3 id=\"subList\">subList</h3><p><br /></p><p>subList是List接口中定义的一个方法，该方法主要用于返回一个集合中的一段、可以理解为截取一个集合中的部分元素，他的返回值也是一个List。</p><p><br /></p><p>如以下代码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%220751d818%22%2C%22code%22%3A%22public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20List%3CString%3E%20names%20%3D%20new%20ArrayList%3CString%3E()%20%7B%7B%5Cn%20%20%20%20%20%20%20%20add(%5C%22Hollis%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22hollischuang%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22H%5C%22)%3B%5Cn%20%20%20%20%7D%7D%3B%5Cn%5Cn%20%20%20%20List%20subList%20%3D%20names.subList(0%2C%201)%3B%5Cn%20%20%20%20System.out.println(subList)%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>以上代码输出结果为：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22170ef773%22%2C%22code%22%3A%22%5BHollis%5D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>如果我们改动下代码，将subList的返回值强转成ArrayList试一下：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22ea419256%22%2C%22code%22%3A%22public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20List%3CString%3E%20names%20%3D%20new%20ArrayList%3CString%3E()%20%7B%7B%5Cn%20%20%20%20%20%20%20%20add(%5C%22Hollis%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22hollischuang%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22H%5C%22)%3B%5Cn%20%20%20%20%7D%7D%3B%5Cn%5Cn%20%20%20%20ArrayList%20subList%20%3D%20names.subList(0%2C%201)%3B%5Cn%20%20%20%20System.out.println(subList)%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>以上代码将抛出异常：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%223ee738ca%22%2C%22code%22%3A%22java.lang.ClassCastException%3A%20java.util.ArrayList%24SubList%20cannot%20be%20cast%20to%20java.util.ArrayList%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>不只是强转成ArrayList会报错，强转成LinkedList、Vector等List的实现类同样也都会报错。</p><p><br /></p><p>那么，为什么会发生这样的报错呢？我们接下来深入分析一下。</p><p><br /></p><p><a name=\"底层原理\"></a></p><h3 id=\"e971e343\">底层原理</h3><p><br /></p><p>首先，我们看下subList方法给我们返回的List到底是个什么东西，这一点在JDK源码中注释是这样说的：</p><p><br /></p><blockquote><p>Returns a view of the portion of this list between the specifiedfromIndex, inclusive, and toIndex, exclusive.</p></blockquote><p><br /></p><p>也就是说subList 返回是一个视图，那么什么叫做视图呢？</p><p><br /></p><p>我们看下subList的源码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22682d5a07%22%2C%22code%22%3A%22public%20List%3CE%3E%20subList(int%20fromIndex%2C%20int%20toIndex)%20%7B%5Cn%20%20%20%20subListRangeCheck(fromIndex%2C%20toIndex%2C%20size)%3B%5Cn%20%20%20%20return%20new%20SubList(this%2C%200%2C%20fromIndex%2C%20toIndex)%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>这个方法返回了一个SubList，这个类是ArrayList中的一个内部类。</p><p><br /></p><p>SubList这个类中单独定义了set、get、size、add、remove等方法。</p><p><br /></p><p>当我们调用subList方法的时候，会通过调用SubList的构造函数创建一个SubList，那么看下这个构造函数做了哪些事情：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%228bfb2fb0%22%2C%22code%22%3A%22SubList(AbstractList%3CE%3E%20parent%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20int%20offset%2C%20int%20fromIndex%2C%20int%20toIndex)%20%7B%5Cn%20%20%20%20this.parent%20%3D%20parent%3B%5Cn%20%20%20%20this.parentOffset%20%3D%20fromIndex%3B%5Cn%20%20%20%20this.offset%20%3D%20offset%20%2B%20fromIndex%3B%5Cn%20%20%20%20this.size%20%3D%20toIndex%20-%20fromIndex%3B%5Cn%20%20%20%20this.modCount%20%3D%20ArrayList.this.modCount%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>可以看到，这个构造函数中把原来的List以及该List中的部分属性直接赋值给自己的一些属性了。</p><p><br /></p><p>也就是说，SubList并没有重新创建一个List，而是直接引用了原有的List（返回了父类的视图），只是指定了一下他要使用的元素的范围而已（从fromIndex（包含），到toIndex（不包含））。</p><p><br /></p><p>所以，为什么不能讲subList方法得到的集合直接转换成ArrayList呢？因为SubList只是ArrayList的内部类，他们之间并没有集成关系，故无法直接进行强制类型转换。</p><p><br /></p><p><a name=\"视图有什么问题\"></a></p><h3 id=\"f012a6ac\">视图有什么问题</h3><p><br /></p><p>前面通过查看源码，我们知道，subList()方法并没有重新创建一个ArrayList，而是返回了一个ArrayList的内部类——SubList。</p><p><br /></p><p>这个SubList是ArrayList的一个视图。</p><p><br /></p><p>那么，这个视图又会带来什么问题呢？我们需要简单写几段代码看一下。</p><p><br /></p><p><strong>1、非结构性改变SubList</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%223fad0735%22%2C%22code%22%3A%22public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20List%3CString%3E%20sourceList%20%3D%20new%20ArrayList%3CString%3E()%20%7B%7B%5Cn%20%20%20%20%20%20%20%20add(%5C%22H%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22O%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22L%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22L%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22I%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22S%5C%22)%3B%5Cn%20%20%20%20%7D%7D%3B%5Cn%5Cn%20%20%20%20List%20subList%20%3D%20sourceList.subList(2%2C%205)%3B%5Cn%5Cn%20%20%20%20System.out.println(%5C%22sourceList%20%EF%BC%9A%20%5C%22%20%2B%20sourceList)%3B%5Cn%20%20%20%20System.out.println(%5C%22sourceList.subList(2%2C%205)%20%E5%BE%97%E5%88%B0List%20%EF%BC%9A%5C%22)%3B%5Cn%20%20%20%20System.out.println(%5C%22subList%20%EF%BC%9A%20%5C%22%20%2B%20subList)%3B%5Cn%5Cn%20%20%20%20subList.set(1%2C%20%5C%22666%5C%22)%3B%5Cn%5Cn%20%20%20%20System.out.println(%5C%22subList.set(3%2C666)%20%E5%BE%97%E5%88%B0List%20%EF%BC%9A%5C%22)%3B%5Cn%20%20%20%20System.out.println(%5C%22subList%20%EF%BC%9A%20%5C%22%20%2B%20subList)%3B%5Cn%20%20%20%20System.out.println(%5C%22sourceList%20%EF%BC%9A%20%5C%22%20%2B%20sourceList)%3B%5Cn%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>得到结果：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2260d720b9%22%2C%22code%22%3A%22sourceList%20%EF%BC%9A%20%5BH%2C%20O%2C%20L%2C%20L%2C%20I%2C%20S%5D%5CnsourceList.subList(2%2C%205)%20%E5%BE%97%E5%88%B0List%20%EF%BC%9A%5CnsubList%20%EF%BC%9A%20%5BL%2C%20L%2C%20I%5D%5CnsubList.set(3%2C666)%20%E5%BE%97%E5%88%B0List%20%EF%BC%9A%5CnsubList%20%EF%BC%9A%20%5BL%2C%20666%2C%20I%5D%5CnsourceList%20%EF%BC%9A%20%5BH%2C%20O%2C%20L%2C%20666%2C%20I%2C%20S%5D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>当我们尝试通过set方法，改变subList中某个元素的值得时候，我们发现，原来的那个List中对应元素的值也发生了改变。</p><p><br /></p><p>同理，如果我们使用同样的方法，对sourceList中的某个元素进行修改，那么subList中对应的值也会发生改变。读者可以自行尝试一下。</p><p><br /></p><p><strong>1、结构性改变SubList</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22be2b61fa%22%2C%22code%22%3A%22public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20List%3CString%3E%20sourceList%20%3D%20new%20ArrayList%3CString%3E()%20%7B%7B%5Cn%20%20%20%20%20%20%20%20add(%5C%22H%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22O%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22L%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22L%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22I%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22S%5C%22)%3B%5Cn%20%20%20%20%7D%7D%3B%5Cn%5Cn%20%20%20%20List%20subList%20%3D%20sourceList.subList(2%2C%205)%3B%5Cn%5Cn%20%20%20%20System.out.println(%5C%22sourceList%20%EF%BC%9A%20%5C%22%20%2B%20sourceList)%3B%5Cn%20%20%20%20System.out.println(%5C%22sourceList.subList(2%2C%205)%20%E5%BE%97%E5%88%B0List%20%EF%BC%9A%5C%22)%3B%5Cn%20%20%20%20System.out.println(%5C%22subList%20%EF%BC%9A%20%5C%22%20%2B%20subList)%3B%5Cn%5Cn%20%20%20%20subList.add(%5C%22666%5C%22)%3B%5Cn%5Cn%20%20%20%20System.out.println(%5C%22subList.add(666)%20%E5%BE%97%E5%88%B0List%20%EF%BC%9A%5C%22)%3B%5Cn%20%20%20%20System.out.println(%5C%22subList%20%EF%BC%9A%20%5C%22%20%2B%20subList)%3B%5Cn%20%20%20%20System.out.println(%5C%22sourceList%20%EF%BC%9A%20%5C%22%20%2B%20sourceList)%3B%5Cn%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>得到结果：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f1918231%22%2C%22code%22%3A%22sourceList%20%EF%BC%9A%20%5BH%2C%20O%2C%20L%2C%20L%2C%20I%2C%20S%5D%5CnsourceList.subList(2%2C%205)%20%E5%BE%97%E5%88%B0List%20%EF%BC%9A%5CnsubList%20%EF%BC%9A%20%5BL%2C%20L%2C%20I%5D%5CnsubList.add(666)%20%E5%BE%97%E5%88%B0List%20%EF%BC%9A%5CnsubList%20%EF%BC%9A%20%5BL%2C%20L%2C%20I%2C%20666%5D%5CnsourceList%20%EF%BC%9A%20%5BH%2C%20O%2C%20L%2C%20L%2C%20I%2C%20666%2C%20S%5D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>我们尝试对subList的结构进行改变，即向其追加元素，那么得到的结果是sourceList的结构也同样发生了改变。</p><p><br /></p><p><strong>1、结构性改变原List</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%227a61757e%22%2C%22code%22%3A%22public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20List%3CString%3E%20sourceList%20%3D%20new%20ArrayList%3CString%3E()%20%7B%7B%5Cn%20%20%20%20%20%20%20%20add(%5C%22H%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22O%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22L%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22L%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22I%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20add(%5C%22S%5C%22)%3B%5Cn%20%20%20%20%7D%7D%3B%5Cn%5Cn%20%20%20%20List%20subList%20%3D%20sourceList.subList(2%2C%205)%3B%5Cn%5Cn%20%20%20%20System.out.println(%5C%22sourceList%20%EF%BC%9A%20%5C%22%20%2B%20sourceList)%3B%5Cn%20%20%20%20System.out.println(%5C%22sourceList.subList(2%2C%205)%20%E5%BE%97%E5%88%B0List%20%EF%BC%9A%5C%22)%3B%5Cn%20%20%20%20System.out.println(%5C%22subList%20%EF%BC%9A%20%5C%22%20%2B%20subList)%3B%5Cn%5Cn%20%20%20%20sourceList.add(%5C%22666%5C%22)%3B%5Cn%5Cn%20%20%20%20System.out.println(%5C%22sourceList.add(666)%20%E5%BE%97%E5%88%B0List%20%EF%BC%9A%5C%22)%3B%5Cn%20%20%20%20System.out.println(%5C%22sourceList%20%EF%BC%9A%20%5C%22%20%2B%20sourceList)%3B%5Cn%20%20%20%20System.out.println(%5C%22subList%20%EF%BC%9A%20%5C%22%20%2B%20subList)%3B%5Cn%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>得到结果：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2241cf4f65%22%2C%22code%22%3A%22Exception%20in%20thread%20%5C%22main%5C%22%20java.util.ConcurrentModificationException%5Cn%20%20%20%20at%20java.util.ArrayList%24SubList.checkForComodification(ArrayList.java%3A1239)%5Cn%20%20%20%20at%20java.util.ArrayList%24SubList.listIterator(ArrayList.java%3A1099)%5Cn%20%20%20%20at%20java.util.AbstractList.listIterator(AbstractList.java%3A299)%5Cn%20%20%20%20at%20java.util.ArrayList%24SubList.iterator(ArrayList.java%3A1095)%5Cn%20%20%20%20at%20java.util.AbstractCollection.toString(AbstractCollection.java%3A454)%5Cn%20%20%20%20at%20java.lang.String.valueOf(String.java%3A2994)%5Cn%20%20%20%20at%20java.lang.StringBuilder.append(StringBuilder.java%3A131)%5Cn%20%20%20%20at%20com.hollis.SubListTest.main(SubListTest.java%3A28)%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>我们尝试对sourceList的结构进行改变，即向其追加元素，结果发现抛出了ConcurrentModificationException。关于这个异常，我们在《<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.hollischuang.com%2Farchives%2F3542\" target=\"_blank\">一不小心就踩坑的fail-fast是个什么鬼？</a>》中分析过，这里原理相同，就不再赘述了。</p><p><br /></p><p><strong>小结</strong></p><p><br /></p><p>我们简单总结一下，List的subList方法并没有创建一个新的List，而是使用了原List的视图，这个视图使用内部类SubList表示。</p><p><br /></p><p>所以，我们不能把subList方法返回的List强制转换成ArrayList等类，因为他们之间没有继承关系。</p><p><br /></p><p>另外，视图和原List的修改还需要注意几点，尤其是他们之间的相互影响：</p><p><br /></p><p>1、对父(sourceList)子(subList)List做的非结构性修改（non-structural changes），都会影响到彼此。</p><p><br /></p><p>2、对子List做结构性修改，操作同样会反映到父List上。</p><p><br /></p><p>3、对父List做结构性修改，会抛出异常ConcurrentModificationException。</p><p><br /></p><p>所以，阿里巴巴Java开发手册中有另外一条规定：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F6%2F25%2F16b8c58095d31b5e%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%22%2C%22originWidth%22%3A1280%2C%22originHeight%22%3A111%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A1280%2C%22height%22%3A111%7D\"></card></p><p><br /></p><p>￼</p><p><br /></p><p><a name=\"如何创建新的List\"></a></p><h3 id=\"8572266e\">如何创建新的List</h3><p><br /></p><p>如果需要对subList作出修改，又不想动原list。那么可以创建subList的一个拷贝：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2280cdddcc%22%2C%22code%22%3A%22subList%20%3D%20Lists.newArrayList(subList)%3B%5Cnlist.stream().skip(strart).limit(end).collect(Collectors.toList())%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p><br /></p><p>PS：最近，《阿里巴巴Java开发手册》已经正式更名为《Java开发手册》，并发布了新版本，增加了21条新规约，修改描述112处。</p><p><br /></p><p>关注公众号后台回复：手册，即可获取最新版Java开发手册。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2019%2F6%2F25%2F16b8c587766e30d7%3FimageView2%2F0%2Fw%2F1280%2Fh%2F960%2Fformat%2Fwebp%2Fignore-error%2F1%22%2C%22originWidth%22%3A1087%2C%22originHeight%22%3A661%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A1087%2C%22height%22%3A661%7D\"></card></p><p><br /></p><p>参考资料： <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F5854851240df\" target=\"_blank\">www.jianshu.com/p/585485124…</a> <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.cnblogs.com%2Fljdblog%2Fp%2F6251387.html\" target=\"_blank\">www.cnblogs.com/ljdblog/p/6…</a></p><p><br /></p><p><br /></p><p>哈哈</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-06-25T08:45:39.000Z",
    "deleted_at": null,
    "created_at": "2019-06-25T07:48:15.000Z",
    "updated_at": "2019-06-25T08:45:40.000Z",
    "published_at": "2019-06-25T08:45:39.000Z",
    "first_published_at": null,
    "word_count": 2023,
    "cover": null,
    "description": "GitHub 3.7k Star 的Java工程师成神之路 ，不来了解一下吗?GitHub 3.7k Star 的Java工程师成神之路 ，真的不来了解一下吗?GitHub 3.7k Star 的Java工程师成神之路 ，真的确定不来了解一下吗?集合是Java开发日常开发中经常会使用到的。在之...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  }
]